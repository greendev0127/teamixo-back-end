{"version":3,"file":"src/app.js","mappings":"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AI;UACrBtF,MAAM,EAAEuB,IAAI,CAACvB,MAAM;UACnB6M,UAAU,EAAE,CAAC;UACbtH,SAAS,EAAElB,SAAS;UACpBmB,QAAQ,EAAEnB;QACZ;MACF,CAAC;MACD,MAAMvF,QAAQ,CAAC2G,GAAG,CAACZ,UAAU,CAAC,CAAChF,OAAO,CAAC,CAAC;IAC1C,CAAC,CAAC;IAEF,MAAMiN,OAAO,CAACC,GAAG,CAAClN,OAAO,CAAC;IAE1B,OAAOL,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAC1BC,UAAU,EAAE,GAAG;MACfK,OAAO,EAAG,GAAEJ,IAAI,CAAC8E,KAAK,CAACK,IAAK;IAC9B,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOlF,KAAK,EAAE;IACd0B,OAAO,CAACC,GAAG,CAAC3B,KAAK,CAAC;IAClB,OAAOZ,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAACG,KAAK,CAAC;EACpC;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;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","sources":["webpack://ai-image-generator/./src/routes/admin/admin.route.js","webpack://ai-image-generator/./src/routes/admin/index.js","webpack://ai-image-generator/./src/routes/client/client.route.js","webpack://ai-image-generator/./src/routes/client/index.js","webpack://ai-image-generator/./src/routes/company/company.route.js","webpack://ai-image-generator/./src/routes/company/index.js","webpack://ai-image-generator/./src/routes/contact/contact.route.js","webpack://ai-image-generator/./src/routes/contact/index.js","webpack://ai-image-generator/./src/routes/db/db.route.js","webpack://ai-image-generator/./src/routes/db/index.js","webpack://ai-image-generator/./src/routes/document/document.route.js","webpack://ai-image-generator/./src/routes/document/index.js","webpack://ai-image-generator/./src/routes/form/form.route.js","webpack://ai-image-generator/./src/routes/form/index.js","webpack://ai-image-generator/./src/routes/index.js","webpack://ai-image-generator/./src/routes/logs/index.js","webpack://ai-image-generator/./src/routes/logs/log.route.js","webpack://ai-image-generator/./src/routes/profile/index.js","webpack://ai-image-generator/./src/routes/profile/profile.route.js","webpack://ai-image-generator/./src/routes/remote/index.js","webpack://ai-image-generator/./src/routes/remote/remote.route.js","webpack://ai-image-generator/./src/routes/report/index.js","webpack://ai-image-generator/./src/routes/report/report.route.js","webpack://ai-image-generator/./src/routes/role/index.js","webpack://ai-image-generator/./src/routes/role/role.route.js","webpack://ai-image-generator/./src/routes/setting/index.js","webpack://ai-image-generator/./src/routes/setting/setting.route.js","webpack://ai-image-generator/./src/routes/site/index.js","webpack://ai-image-generator/./src/routes/site/site.route.js","webpack://ai-image-generator/./src/routes/staff/index.js","webpack://ai-image-generator/./src/routes/staff/staff.route.js","webpack://ai-image-generator/./src/routes/user/index.js","webpack://ai-image-generator/./src/routes/user/user.route.js","webpack://ai-image-generator/./src/routes/v1/books.route.js","webpack://ai-image-generator/./src/routes/v1/index.js","webpack://ai-image-generator/external commonjs \"aws-sdk\"","webpack://ai-image-generator/external commonjs \"body-parser\"","webpack://ai-image-generator/external commonjs \"cors\"","webpack://ai-image-generator/external commonjs \"express\"","webpack://ai-image-generator/external commonjs \"fs\"","webpack://ai-image-generator/external commonjs \"moment\"","webpack://ai-image-generator/external commonjs \"multer\"","webpack://ai-image-generator/external commonjs \"serverless-http\"","webpack://ai-image-generator/external commonjs \"uuid\"","webpack://ai-image-generator/webpack/bootstrap","webpack://ai-image-generator/webpack/runtime/compat get default export","webpack://ai-image-generator/webpack/runtime/define property getters","webpack://ai-image-generator/webpack/runtime/hasOwnProperty shorthand","webpack://ai-image-generator/webpack/runtime/make namespace object","webpack://ai-image-generator/./src/app.js"],"sourcesContent":["import AWS from \"aws-sdk\";\nimport { Router } from \"express\";\nconst uuid = require(\"uuid\");\n\nconst cognito = new AWS.CognitoIdentityServiceProvider();\nconst dynamoDb = new AWS.DynamoDB.DocumentClient();\nconst s3bucket = new AWS.S3();\nvar ddb = new AWS.DynamoDB({ apiVersion: \"2012-08-10\" });\n\nconst router = Router();\n\nrouter.get(\"/companies\", async (req, res) => {\n  try {\n    const companyParams = {\n      TableName: \"company_list\",\n    };\n\n    const companyData = await dynamoDb.scan(companyParams).promise();\n\n    const orgParams = {\n      TableName: \"organization\",\n    };\n\n    const orgData = await dynamoDb.scan(orgParams).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      data: {\n        companyData: companyData,\n        orgData: orgData,\n      },\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/deleteowner\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const orgParam = {\n      TableName: \"organization\",\n      Key: {\n        id: data.orgId,\n      },\n    };\n\n    await dynamoDb.delete(orgParam).promise();\n\n    const companyParam = {\n      TableName: \"company_list\",\n      Key: {\n        id: data.companyId,\n      },\n    };\n\n    await dynamoDb.delete(companyParam).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Owner data has been successfully deleted\",\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/deletesites\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const params = {\n      TableName: \"site_list\",\n      FilterExpression: \"#organization_id = :organization_id\",\n      ExpressionAttributeNames: {\n        \"#organization_id\": \"organization_id\",\n      },\n      ExpressionAttributeValues: {\n        \":organization_id\": data.orgId, // Replace 'YourId' with the id you want to delete\n      },\n    };\n\n    const scanResults = [];\n    let items;\n\n    do {\n      items = await dynamoDb.scan(params).promise();\n      items.Items.forEach((item) => scanResults.push(item));\n      params.ExclusiveStartKey = items.LastEvaluatedKey;\n    } while (typeof items.LastEvaluatedKey !== \"undefined\");\n\n    for (const item of scanResults) {\n      const params = {\n        TableName: item.table_name,\n      };\n\n      await ddb.deleteTable(params).promise();\n      const deleteParams = {\n        TableName: \"site_list\",\n        Key: {\n          id: item.id,\n        },\n      };\n      await dynamoDb.delete(deleteParams).promise();\n    }\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Sites data has been successfully deleted\",\n    });\n  } catch (error) {\n    console.log(error);\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/deleterole\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const params = {\n      TableName: \"role_list\",\n      FilterExpression: \"#organization_id = :organization_id\",\n      ExpressionAttributeNames: {\n        \"#organization_id\": \"organization_id\",\n      },\n      ExpressionAttributeValues: {\n        \":organization_id\": data.orgId, // Replace 'YourId' with the id you want to delete\n      },\n    };\n\n    const scanResults = [];\n    let items;\n\n    do {\n      items = await dynamoDb.scan(params).promise();\n      items.Items.forEach((item) => scanResults.push(item));\n      params.ExclusiveStartKey = items.LastEvaluatedKey;\n    } while (typeof items.LastEvaluatedKey !== \"undefined\");\n\n    for (const item of scanResults) {\n      const deleteParams = {\n        TableName: \"role_list\",\n        Key: {\n          id: item.id,\n        },\n      };\n      await dynamoDb.delete(deleteParams).promise();\n    }\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Role data has been successfully deleted\",\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/deletestaffs\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const params = {\n      TableName: \"staff_list\",\n      FilterExpression: \"#organization_id = :organization_id\",\n      ExpressionAttributeNames: {\n        \"#organization_id\": \"organization_id\",\n      },\n      ExpressionAttributeValues: {\n        \":organization_id\": data.orgId, // Replace 'YourId' with the id you want to delete\n      },\n    };\n\n    const scanResults = [];\n    let items;\n\n    do {\n      items = await dynamoDb.scan(params).promise();\n      items.Items.forEach((item) => scanResults.push(item));\n      params.ExclusiveStartKey = items.LastEvaluatedKey;\n    } while (typeof items.LastEvaluatedKey !== \"undefined\");\n\n    for (const item of scanResults) {\n      const userParam = {\n        UserPoolId: process.env.USER_POOL_ID,\n        Username: item.email,\n      };\n\n      await cognito.adminDeleteUser(userParam).promise();\n\n      const deleteParams = {\n        TableName: \"staff_list\",\n        Key: {\n          id: item.id,\n        },\n      };\n      await dynamoDb.delete(deleteParams).promise();\n    }\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Role data has been successfully deleted\",\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/deletedocs\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const params = {\n      TableName: \"documents\",\n      FilterExpression: \"#organization_id = :organization_id\",\n      ExpressionAttributeNames: {\n        \"#organization_id\": \"organization_id\",\n      },\n      ExpressionAttributeValues: {\n        \":organization_id\": data.orgId, // Replace 'YourId' with the id you want to delete\n      },\n    };\n\n    const scanResults = [];\n    let items;\n\n    do {\n      items = await dynamoDb.scan(params).promise();\n      items.Items.forEach((item) => scanResults.push(item));\n      params.ExclusiveStartKey = items.LastEvaluatedKey;\n    } while (typeof items.LastEvaluatedKey !== \"undefined\");\n\n    for (const item of scanResults) {\n      const urlParts = new URL(item.docFile).pathname.split(\"/\");\n      const key = urlParts.slice(1).join(\"/\").replaceAll(\"%20\", \" \");\n\n      const params = {\n        Bucket: process.env.S3_BUCKET_NAME, // replace with your bucket name\n        Key: key, // replace with the image key\n      };\n\n      await s3bucket.deleteObject(params).promise();\n\n      const deleteParams = {\n        TableName: \"documents\",\n        Key: {\n          id: item.id,\n        },\n      };\n      await dynamoDb.delete(deleteParams).promise();\n    }\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Role data has been successfully deleted\",\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nexport default router;\n","import { Router } from \"express\";\nimport admin from \"./admin.route\";\n\nconst router = Router();\n\nrouter.use(\"/\", admin);\n\nexport default router;\n","import AWS from \"aws-sdk\";\nimport { Router } from \"express\";\nimport moment from \"moment\";\nconst uuid = require(\"uuid\");\n\nconst dynamoDb = new AWS.DynamoDB.DocumentClient();\n\nconst router = Router();\n\nfunction roundToNearestFiveMinutes(date, round) {\n  const ms = 1000 * 60 * round; // convert 5 minutes to milliseconds\n  const roundedDate = new Date(Math.round(date / ms) * ms);\n  return roundedDate.getTime();\n}\n\nrouter.post(\"/getsite\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request!\" });\n    }\n\n    const params = {\n      TableName: \"site_list\",\n      Key: {\n        id: data.id,\n      },\n    };\n\n    const site = await dynamoDb.get(params).promise();\n\n    const companyParams = {\n      TableName: \"company_list\",\n      FilterExpression: \"#organization_id = :organization_id\",\n      ExpressionAttributeNames: {\n        \"#organization_id\": \"organization_id\",\n      },\n      ExpressionAttributeValues: {\n        \":organization_id\": site.Item.organization_id,\n      },\n    };\n\n    const company = await dynamoDb.scan(companyParams).promise();\n\n    const response = {\n      statusCode: 200,\n      body: {\n        site: site,\n        company: company,\n      },\n    };\n\n    return res.status(200).json(response);\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/stafflist\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request!\" });\n    }\n\n    const params = {\n      TableName: \"staff_list\",\n      FilterExpression: \"#organization_id = :organization_id\",\n      ExpressionAttributeNames: {\n        \"#organization_id\": \"organization_id\",\n      },\n      ExpressionAttributeValues: {\n        \":organization_id\": data.organization_id,\n      },\n    };\n    const result = await dynamoDb.scan(params).promise();\n    const response = {\n      statusCode: 200,\n      body: result.Items,\n    };\n\n    return res.status(200).json(response);\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/trigger\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request!\" });\n    }\n\n    const params = {\n      TableName: \"organization\",\n      Key: {\n        id: data.id,\n      },\n    };\n\n    const result = await dynamoDb.get(params).promise();\n\n    if (result.Item.update_state) {\n      const siteParams = {\n        TableName: \"organization\",\n        Key: {\n          id: data.id,\n        },\n        ExpressionAttributeNames: {\n          \"#update_state\": \"update_state\",\n        },\n        ExpressionAttributeValues: {\n          \":update_state\": false,\n          \":updateAt\": timeStamp,\n        },\n        UpdateExpression:\n          \"SET #update_state = :update_state, updateAt = :updateAt\",\n        ReturnValues: \"ALL_NEW\",\n      };\n\n      await dynamoDb.update(siteParams).promise();\n    }\n\n    const response = {\n      statusCode: 200,\n      body: result,\n    };\n\n    return res.status(200).json(response);\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/start\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request!\" });\n    }\n\n    const uid = uuid.v1();\n\n    const dateParams = {\n      TableName: data.tableName,\n      Item: {\n        id: uid,\n        track_id: uid,\n        staff_id: data.staff.id,\n        date: moment(timeStamp).format(\"YYYY-MM-DD\"),\n        start_date: roundToNearestFiveMinutes(timeStamp, data.round),\n        end_date: null,\n        total_time: null,\n        name: data.staff.name,\n        status: \"start\",\n        createdAt: timeStamp,\n        updateAt: timeStamp,\n      },\n    };\n\n    await dynamoDb.put(dateParams).promise();\n\n    const params = {\n      TableName: \"staff_list\",\n      Key: {\n        id: data.staff.id,\n      },\n      ExpressionAttributeNames: {\n        \"#clocked_state\": \"clocked_state\",\n        \"#break_state\": \"break_state\",\n        \"#track_id\": \"track_id\",\n        \"#record_id\": \"record_id\",\n        \"#site_id\": \"site_id\",\n        \"#last_start_date\": \"last_start_date\",\n      },\n      ExpressionAttributeValues: {\n        \":clocked_state\": true,\n        \":break_state\": false,\n        \":track_id\": uid,\n        \":record_id\": uid,\n        \":site_id\": data.tableName,\n        \":last_start_date\": roundToNearestFiveMinutes(timeStamp, data.round),\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression:\n        \"SET #clocked_state = :clocked_state, #break_state = :break_state, #track_id = :track_id, #record_id = :record_id, #site_id = :site_id, #last_start_date = :last_start_date, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    const result = await dynamoDb.update(params).promise();\n\n    const response = {\n      stsatusCode: 200,\n      body: result.Attributes,\n    };\n\n    return res.status(200).json(response);\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/break\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request!\" });\n    }\n    //calculate the total time from start work to start break\n    var differenceInMs =\n      roundToNearestFiveMinutes(timeStamp, data.round) -\n      data.staff.last_start_date;\n\n    var total_time = differenceInMs;\n\n    const uid = uuid.v1();\n    // update the start state record with total time and end time\n    const updateParams = {\n      TableName: data.tableName,\n      Key: {\n        id: data.staff.record_id,\n      },\n      ExpressionAttributeNames: {\n        \"#end_date\": \"end_date\",\n        \"#total_time\": \"total_time\",\n      },\n      ExpressionAttributeValues: {\n        \":end_date\": roundToNearestFiveMinutes(timeStamp, data.round),\n        \":total_time\": total_time,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression:\n        \"SET #end_date = :end_date, #total_time = :total_time, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    await dynamoDb.update(updateParams).promise();\n\n    // add new record to report table with break state\n    const addParams = {\n      TableName: data.tableName,\n      Item: {\n        id: uid,\n        track_id: data.staff.track_id,\n        staff_id: data.staff.id,\n        date: moment(timeStamp).format(\"YYYY-MM-DD\"),\n        start_date: roundToNearestFiveMinutes(timeStamp, data.round),\n        end_date: null,\n        total_time: null,\n        name: data.staff.name,\n        status: \"break\",\n        createdAt: timeStamp,\n        updateAt: timeStamp,\n      },\n    };\n\n    await dynamoDb.put(addParams).promise();\n\n    // update user with break state\n    const updateUserParam = {\n      TableName: \"staff_list\",\n      Key: {\n        id: data.staff.id,\n      },\n      ExpressionAttributeNames: {\n        \"#break_state\": \"break_state\",\n        \"#record_id\": \"record_id\",\n        \"#last_start_date\": \"last_start_date\",\n      },\n      ExpressionAttributeValues: {\n        \":break_state\": true,\n        \":record_id\": uid,\n        \":last_start_date\": roundToNearestFiveMinutes(timeStamp, data.round),\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression:\n        \"SET #break_state = :break_state, #record_id = :record_id, #last_start_date = :last_start_date, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    const result = await dynamoDb.update(updateUserParam).promise();\n    const response = {\n      stsatusCode: 200,\n      body: result.Attributes,\n    };\n\n    return res.status(200).json(response);\n  } catch (error) {\n    console.log(error);\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/restart\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request!\" });\n    }\n    //calculate the total time from start work to start break\n    var differenceInMs =\n      roundToNearestFiveMinutes(timeStamp, data.round) -\n      data.staff.last_start_date;\n\n    var total_time = differenceInMs;\n\n    const uid = uuid.v1();\n    // update the start state record with total time and end time\n    const updateParams = {\n      TableName: data.tableName,\n      Key: {\n        id: data.staff.record_id,\n      },\n      ExpressionAttributeNames: {\n        \"#end_date\": \"end_date\",\n        \"#total_time\": \"total_time\",\n      },\n      ExpressionAttributeValues: {\n        \":end_date\": roundToNearestFiveMinutes(timeStamp, data.round),\n        \":total_time\": total_time,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression:\n        \"SET #end_date = :end_date, #total_time = :total_time, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    await dynamoDb.update(updateParams).promise();\n\n    // add new record to report table with break state\n    const addParams = {\n      TableName: data.tableName,\n      Item: {\n        id: uid,\n        track_id: data.staff.track_id,\n        staff_id: data.staff.id,\n        date: moment(timeStamp).format(\"YYYY-MM-DD\"),\n        start_date: roundToNearestFiveMinutes(timeStamp, data.round),\n        end_date: null,\n        total_time: null,\n        name: data.staff.name,\n        status: \"restart\",\n        createdAt: timeStamp,\n        updateAt: timeStamp,\n      },\n    };\n\n    await dynamoDb.put(addParams).promise();\n\n    const updateUserParam = {\n      TableName: \"staff_list\",\n      Key: {\n        id: data.staff.id,\n      },\n      ExpressionAttributeNames: {\n        \"#break_state\": \"break_state\",\n        \"#record_id\": \"record_id\",\n        \"#last_start_date\": \"last_start_date\",\n      },\n      ExpressionAttributeValues: {\n        \":break_state\": false,\n        \":record_id\": uid,\n        \":last_start_date\": roundToNearestFiveMinutes(timeStamp, data.round),\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression:\n        \"SET #break_state = :break_state, #record_id = :record_id, #last_start_date = :last_start_date, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    const result = await dynamoDb.update(updateUserParam).promise();\n    const response = {\n      stsatusCode: 200,\n      body: result.Attributes,\n    };\n\n    return res.status(200).json(response);\n  } catch (error) {\n    console.log(error);\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/end\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request!\" });\n    }\n    //calculate the total time from start work to start break\n    var differenceInMs =\n      roundToNearestFiveMinutes(timeStamp, data.round) -\n      data.staff.last_start_date;\n\n    var total_time = differenceInMs;\n\n    const uid = uuid.v1();\n    // update the start state record with total time and end time\n    const updateParams = {\n      TableName: data.tableName,\n      Key: {\n        id: data.staff.record_id,\n      },\n      ExpressionAttributeNames: {\n        \"#end_date\": \"end_date\",\n        \"#total_time\": \"total_time\",\n      },\n      ExpressionAttributeValues: {\n        \":end_date\": roundToNearestFiveMinutes(timeStamp, data.round),\n        \":total_time\": total_time,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression:\n        \"SET #end_date = :end_date, #total_time = :total_time, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    await dynamoDb.update(updateParams).promise();\n\n    // add new record to report table with break state\n    const addParams = {\n      TableName: data.tableName,\n      Item: {\n        id: uid,\n        track_id: data.staff.track_id,\n        staff_id: data.staff.id,\n        date: moment(timeStamp).format(\"YYYY-MM-DD\"),\n        start_date: roundToNearestFiveMinutes(timeStamp, data.round),\n        total_time: 0,\n        name: data.staff.name,\n        status: \"end\",\n        createdAt: timeStamp,\n        updateAt: timeStamp,\n      },\n    };\n\n    await dynamoDb.put(addParams).promise();\n\n    const updateUserParam = {\n      TableName: \"staff_list\",\n      Key: {\n        id: data.staff.id,\n      },\n      ExpressionAttributeNames: {\n        \"#clocked_state\": \"clocked_state\",\n        \"#break_state\": \"break_state\",\n        \"#record_id\": \"record_id\",\n        \"#site_id\": \"site_id\",\n        \"#last_start_date\": \"last_start_date\",\n      },\n      ExpressionAttributeValues: {\n        \":clocked_state\": false,\n        \":break_state\": false,\n        \":record_id\": null,\n        \":site_id\": null,\n        \":last_start_date\": null,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression:\n        \"SET #clocked_state = :clocked_state, #break_state = :break_state, #record_id = :record_id, #site_id = :site_id, #last_start_date = :last_start_date, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    const result = await dynamoDb.update(updateUserParam).promise();\n    const response = {\n      stsatusCode: 200,\n      body: result.Attributes,\n    };\n\n    return res.status(200).json(response);\n  } catch (error) {\n    console.log(error);\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/check\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request!\" });\n    }\n\n    const params = {\n      TableName: \"staff_list\",\n      Key: {\n        id: data.id,\n      },\n    };\n\n    const result = await dynamoDb.get(params).promise();\n\n    const response = {\n      statusCode: 200,\n      body: result,\n    };\n\n    return res.status(200).json(response);\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/addstaff\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request!\" });\n    }\n\n    const uid = uuid.v1();\n    const staff_id = uuid.v1();\n\n    const dateParams = {\n      TableName: data.tableName,\n      Item: {\n        id: uid,\n        track_id: uid,\n        staff_id: staff_id,\n        date: moment(timeStamp).format(\"YYYY-MM-DD\"),\n        start_date: roundToNearestFiveMinutes(timeStamp, data.round),\n        end_date: null,\n        total_time: null,\n        name: data.name,\n        status: \"start\",\n        createdAt: timeStamp,\n        updateAt: timeStamp,\n      },\n    };\n\n    await dynamoDb.put(dateParams).promise();\n\n    let Item = {\n      id: staff_id,\n      organization_id: data.organization_id,\n      name: data.name,\n      email: data.email,\n      avatar: process.env.DEFAULT_AVATAR,\n      site_id: data.tableName,\n      track_id: uid,\n      record_id: uid,\n      type: 1,\n      level: 3,\n      clocked_state: true,\n      break_state: false,\n      last_start_date: roundToNearestFiveMinutes(timeStamp, data.round),\n      state: false,\n      createAt: timeStamp,\n      updateAt: timeStamp,\n    };\n\n    const params = {\n      TableName: \"staff_list\",\n      Item,\n    };\n\n    await dynamoDb.put(params).promise();\n\n    const response = {\n      stsatusCode: 200,\n      message: \"success\",\n    };\n\n    return res.status(200).json(response);\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nexport default router;\n","import {Router} from \"express\"\nimport client from \"./client.route\"\n\nconst router = Router()\n\nrouter.use(\"/\", client)\n\nexport default router\n","import AWS from \"aws-sdk\";\nimport { Router } from \"express\";\nconst uuid = require(\"uuid\");\n\nconst dynamoDb = new AWS.DynamoDB.DocumentClient();\nconst s3bucket = new AWS.S3();\n\nconst router = Router();\n\nrouter.post(\"/create\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    let Item = {\n      id: uuid.v1(),\n      organization_id: data.organizationId,\n      name: data.name,\n      city: data.city,\n      country: data.country,\n      address: data.address,\n      postcode: data.postCode,\n      telephone: data.telePhone,\n      email: data.email,\n      country_state: data.state,\n      timeZone: data.timeZone,\n      logo: process.env.DEFAULT_COMAPNY_LOGO,\n      date_format: \"YYYY-MM-DD\",\n      type: 1,\n      round: 5,\n      createAt: timeStamp,\n      updateAt: timeStamp,\n    };\n\n    const params = {\n      TableName: \"company_list\",\n      Item,\n    };\n\n    await dynamoDb.put(params).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"success create\",\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/fetch\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const params = {\n      TableName: \"company_list\",\n      FilterExpression: \"#organization_id = :organization_id\",\n      ExpressionAttributeNames: {\n        \"#organization_id\": \"organization_id\",\n      },\n      ExpressionAttributeValues: {\n        \":organization_id\": data.organization_id,\n      },\n    };\n\n    const result = await dynamoDb.scan(params).promise();\n\n    const response = {\n      statusCode: 200,\n      body: result,\n    };\n\n    return res.status(200).json(response);\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/update\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    let location = \"\";\n\n    if (data.logo) {\n      var buf = Buffer.from(\n        data.logo.replace(/^data:image\\/\\w+;base64,/, \"\"),\n        \"base64\"\n      );\n      const type = data.logo.split(\";\")[0].split(\"/\")[1];\n      const params = {\n        Bucket: process.env.S3_BUCKET_NAME,\n        Key: `Home/Logos/${data.name}/${data.name}_${timeStamp}.${type}`,\n        Body: buf,\n        ACL: \"public-read\",\n        ContentEncoding: \"base64\",\n        ContentType: `image/${type}`,\n      };\n      try {\n        const uploadData = await s3bucket.upload(params).promise();\n        location = uploadData.Location;\n      } catch (error) {\n        console.log(error);\n        return res.status(200).json({ statusCode: 500, error });\n      }\n    }\n\n    const params = data.logo\n      ? {\n          TableName: \"company_list\",\n          Key: {\n            id: data.id,\n          },\n          ExpressionAttributeNames: {\n            \"#name_text\": \"name\",\n            \"#rdname\": \"rdname\",\n            \"#logo\": \"logo\",\n            \"#date_format\": \"date_format\",\n            \"#timeZone\": \"timeZone\",\n            \"#type\": \"type\",\n            \"#round\": \"round\",\n          },\n          ExpressionAttributeValues: {\n            \":name\": data.name,\n            \":rdname\": data.rdname,\n            \":logo\": location,\n            \":date_format\": data.dateFormat,\n            \":timeZone\": data.timeZone,\n            \":type\": data.type,\n            \":round\": data.round,\n            \":updateAt\": timeStamp,\n          },\n          UpdateExpression:\n            \"SET #name_text = :name, #rdname = :rdname, #logo = :logo, #date_format = :date_format, #timeZone = :timeZone, #type = :type, #round = :round, updateAt = :updateAt\",\n          ReturnValues: \"ALL_NEW\",\n        }\n      : {\n          TableName: \"company_list\",\n          Key: {\n            id: data.id,\n          },\n          ExpressionAttributeNames: {\n            \"#name_text\": \"name\",\n            \"#rdname\": \"rdname\",\n            \"#date_format\": \"date_format\",\n            \"#timeZone\": \"timeZone\",\n            \"#type\": \"type\",\n            \"#round\": \"round\",\n          },\n          ExpressionAttributeValues: {\n            \":name\": data.name,\n            \":rdname\": data.rdname,\n            \":date_format\": data.dateFormat,\n            \":timeZone\": data.timeZone,\n            \":type\": data.type,\n            \":round\": data.round,\n            \":updateAt\": timeStamp,\n          },\n          UpdateExpression:\n            \"SET #name_text = :name, #rdname = :rdname, #date_format = :date_format, #timeZone = :timeZone, #type = :type, #round = :round, updateAt = :updateAt\",\n          ReturnValues: \"ALL_NEW\",\n        };\n\n    const result = await dynamoDb.update(params).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Company data has been successfully updated\",\n      data: location,\n      response: result,\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/state\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const organizationParams = {\n      TableName: \"organization\",\n      Key: {\n        id: data.organization_id,\n      },\n      ExpressionAttributeNames: {\n        \"#update_state\": \"update_state\",\n      },\n      ExpressionAttributeValues: {\n        \":update_state\": true,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression:\n        \"SET #update_state = :update_state, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    await dynamoDb.update(organizationParams).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"success create\",\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/getcompany\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const companyParams = {\n      TableName: \"company_list\",\n      FilterExpression: \"#organization_id = :organization_id\",\n      ExpressionAttributeNames: {\n        \"#organization_id\": \"organization_id\",\n      },\n      ExpressionAttributeValues: {\n        \":organization_id\": data.organization_id,\n      },\n    };\n\n    const company = await dynamoDb.scan(companyParams).promise();\n\n    const response = {\n      statusCode: 200,\n      body: company,\n    };\n\n    return res.status(200).json(response);\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/updatelogo\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    let location = \"\";\n\n    var buf = Buffer.from(\n      data.logo.replace(/^data:image\\/\\w+;base64,/, \"\"),\n      \"base64\"\n    );\n\n    const type = data.logo.split(\";\")[0].split(\"/\")[1];\n    const imageParam = {\n      Bucket: process.env.S3_BUCKET_NAME,\n      Key: `Home/Logos/${data.organization_id}/${timeStamp}.${type}`,\n      Body: buf,\n      ACL: \"public-read\",\n      ContentEncoding: \"base64\",\n      ContentType: `image/${type}`,\n    };\n    try {\n      const uploadData = await s3bucket.upload(imageParam).promise();\n      location = uploadData.Location;\n    } catch (error) {\n      console.log(error);\n      return res.status(200).json({ statusCode: 500, error });\n    }\n\n    const updateParams = {\n      TableName: \"company_list\",\n      Key: {\n        id: data.id,\n      },\n      ExpressionAttributeNames: {\n        \"#logo\": \"logo\",\n      },\n      ExpressionAttributeValues: {\n        \":logo\": location,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression: \"SET #logo = :logo, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    const result = await dynamoDb.update(updateParams).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Company Logo has been successfully updated\",\n      location: location,\n      response: result,\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/updatename\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const updateParams = {\n      TableName: \"company_list\",\n      Key: {\n        id: data.id,\n      },\n      ExpressionAttributeNames: {\n        \"#name\": \"name\",\n      },\n      ExpressionAttributeValues: {\n        \":name\": data.name,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression: \"SET #name = :name, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    const result = await dynamoDb.update(updateParams).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Company Name has been successfully updated\",\n      response: result,\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/updatesettings\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const updateParams = {\n      TableName: \"company_list\",\n      Key: {\n        id: data.id,\n      },\n      ExpressionAttributeNames: {\n        \"#rdname\": \"rdname\",\n        \"#break\": \"break\",\n        \"#timeZone\": \"timeZone\",\n        \"#date_format\": \"date_format\",\n        \"#type\": \"type\",\n        \"#round\": \"round\",\n      },\n      ExpressionAttributeValues: {\n        \":rdname\": data.rdname,\n        \":break\": data.break,\n        \":timeZone\": data.timeZone,\n        \":date_format\": data.date_format,\n        \":type\": data.type,\n        \":round\": data.round,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression:\n        \"SET #rdname = :rdname, #break = :break, #timeZone = :timeZone, #date_format = :date_format, #type = :type, #round = :round, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    const result = await dynamoDb.update(updateParams).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Company Name has been successfully updated\",\n      response: result,\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/updatecontact\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const updateParams = {\n      TableName: \"company_list\",\n      Key: {\n        id: data.id,\n      },\n      ExpressionAttributeNames: {\n        \"#email\": \"email\",\n        \"#telephone\": \"telephone\",\n      },\n      ExpressionAttributeValues: {\n        \":email\": data.email,\n        \":telephone\": data.telephone,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression:\n        \"SET #email = :email, #telephone = :telephone, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    const result = await dynamoDb.update(updateParams).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Company Name has been successfully updated\",\n      response: result,\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/updateForm\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const updateParams = {\n      TableName: \"company_list\",\n      Key: {\n        id: data.id,\n      },\n      ExpressionAttributeNames: {\n        \"#form\": \"form\",\n      },\n      ExpressionAttributeValues: {\n        \":form\": data.form,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression: \"SET #form = :form, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    const result = await dynamoDb.update(updateParams).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Company Form has been successfully updated\",\n      response: result,\n    });\n  } catch (error) {\n    return res.status(400).json(error);\n  }\n});\n\nexport default router;\n","import { Router } from \"express\";\nimport company from \"./company.route\";\n\nconst router = Router();\n\nrouter.use(\"/\", company);\n\nexport default router;\n","import AWS from \"aws-sdk\";\nimport { Router } from \"express\";\nconst uuid = require(\"uuid\");\n\nconst dynamoDb = new AWS.DynamoDB.DocumentClient();\n\nconst router = Router();\n\nrouter.post(\"/addticket\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const TableName = \"support\";\n\n    let Item = data;\n    Item.id = uuid.v1();\n    Item.createAt = timeStamp;\n    Item.updateAt = timeStamp;\n\n    const params = {\n      TableName: TableName,\n      Item,\n    };\n\n    const response = await dynamoDb.put(params).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"success create\",\n      data: response,\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/getticket\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const params = {\n      TableName: \"support\",\n      Key: {\n        id: data.id,\n      },\n    };\n\n    const res = await dynamoDb.get(params).promise();\n\n    const response = {\n      statusCode: 200,\n      body: res,\n    };\n\n    return res.status(200).json(response);\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/solveticket\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const params = {\n      TableName: \"support\",\n      Key: {\n        id: data.id,\n      },\n      ExpressionAttributeNames: {\n        \"#solved\": \"solved\",\n      },\n      ExpressionAttributeValues: {\n        \":solved\": true,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression: \"SET #solved = :solved, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    await dynamoDb.update(params).promise();\n\n    const message = \"#\" + data.id + \" ticket is closed\";\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: message,\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/updateticket\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const params = {\n      TableName: \"support\",\n      Key: {\n        id: data.id,\n      },\n      ExpressionAttributeNames: {\n        \"#messages\": \"messages\",\n      },\n      ExpressionAttributeValues: {\n        \":messages\": data.messages,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression: \"SET #messages = :messages, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    await dynamoDb.update(params).promise();\n\n    const message = \"#\" + data.id + \" ticket is closed.\";\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: message,\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.get(\"/fetchtickets\", async (req, res) => {\n  try {\n    const params = {\n      TableName: \"support\",\n    };\n    const ticketData = await dynamoDb.scan(params).promise();\n    return res.status(200).json({ statusCode: 200, data: ticketData });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/fetchticket\", async (req, res) => {\n  try {\n    const data = req.body;\n\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const params = {\n      TableName: \"support\",\n      FilterExpression: \"#organization_id = :organization_id\",\n      ExpressionAttributeNames: {\n        \"#organization_id\": \"organization_id\",\n      },\n      ExpressionAttributeValues: {\n        \":organization_id\": data.organization_id,\n      },\n    };\n    const result = await dynamoDb.scan(params).promise();\n    const response = {\n      statusCode: 200,\n      body: result.Items,\n    };\n\n    return res.status(200).json(response);\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nexport default router;\n","import { Router } from \"express\";\nimport contact from \"./contact.route\";\n\nconst router = Router();\n\nrouter.use(\"/\", contact);\n\nexport default router;\n","import AWS from \"aws-sdk\";\nimport { Router } from \"express\";\n\nvar ddb = new AWS.DynamoDB({ apiVersion: \"2012-08-10\" });\n\nconst router = Router();\n\nrouter.post(\"/createtable\", async (req, res) => {\n  try {\n    const data = req.body;\n\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const params = {\n      TableName: data.tableName,\n      KeySchema: [{ AttributeName: \"id\", KeyType: \"HASH\" }],\n      AttributeDefinitions: [{ AttributeName: \"id\", AttributeType: \"S\" }],\n      BillingMode: \"PAY_PER_REQUEST\",\n    };\n\n    await ddb.createTable(params).promise();\n\n    res.status(200).json({ message: \"Create table successful\" });\n  } catch (error) {\n    console.error(\"An error ocurred:\", error);\n    res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/deletetable\", async (req, res) => {\n  try {\n    const data = req.body;\n\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const params = {\n      TableName: data.tableName,\n    };\n\n    await ddb.deleteTable(params).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Delete table successful\",\n    });\n  } catch (error) {\n    console.error(\"An error ocurred:\", error);\n    res.status(200).json(error);\n  }\n});\n\nexport default router;\n","import { Router } from \"express\";\n\nimport db from \"./db.route\";\n\nconst router = Router();\n\nrouter.use(\"/\", db);\n\nexport default router;\n","import AWS from \"aws-sdk\";\nimport { Router } from \"express\";\nimport moment from \"moment\";\nconst uuid = require(\"uuid\");\n\nconst dynamoDb = new AWS.DynamoDB.DocumentClient();\nconst s3bucket = new AWS.S3();\n\nconst router = Router();\n\nrouter.post(\"/upload\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n    const file = data.file;\n    const base64Data = file.replace(/^data:application\\/pdf;base64,/, \"\");\n    const decodedFile = Buffer.from(base64Data, \"base64\");\n    const params = {\n      Bucket: process.env.S3_BUCKET_NAME,\n      Key: `Home/Document/${data.organizationId}/${moment(timeStamp).format(\n        \"YYYY-MM-DD\"\n      )}/${data.docName}_${timeStamp}.pdf`,\n      Body: decodedFile,\n      ACL: \"public-read\",\n      ContentEncoding: \"base64\",\n      ContentType: `application/pdf`,\n    };\n    let location = \"\";\n    try {\n      const uploadData = await s3bucket.upload(params).promise();\n      location = uploadData.Location;\n    } catch (error) {\n      console.log(error);\n      return res.status(200).json({ statusCode: 500, error });\n    }\n    return res.status(200).json({ statusCode: 200, data: location });\n  } catch (error) {\n    res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/add\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    let Item = data;\n    Item.id = uuid.v1();\n    Item.createAt = timeStamp;\n    Item.updateAt = timeStamp;\n\n    const params = {\n      TableName: \"documents\",\n      Item,\n    };\n\n    await dynamoDb.put(params).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Document has been successfully created\",\n    });\n  } catch (error) {\n    res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/update\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const params = {\n      TableName: \"documents\",\n      Key: {\n        id: data.id,\n      },\n      ExpressionAttributeNames: {\n        \"#docName\": \"docName\",\n        \"#docType\": \"docType\",\n        \"#docDate\": \"docDate\",\n        \"#expireDate\": \"expireDate\",\n        \"#assignType\": \"assignType\",\n        \"#assignValue\": \"assignValue\",\n      },\n      ExpressionAttributeValues: {\n        \":docName\": data.docName,\n        \":docType\": data.docType,\n        \":docDate\": data.docDate,\n        \":expireDate\": data.expireDate,\n        \":assignType\": data.assignType,\n        \":assignValue\": data.assignValue,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression:\n        \"SET #docName = :docName, #docType = :docType, #docDate = :docDate, #expireDate = :expireDate, #assignType = :assignType, #assignValue = :assignValue, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    await dynamoDb.update(params).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Site data has been successfully updated\",\n    });\n  } catch (error) {\n    res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/delete\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const params = {\n      Bucket: process.env.S3_BUCKET_NAME, // replace with your bucket name\n      Key: data.key, // replace with the image key\n    };\n\n    await s3bucket.deleteObject(params).promise();\n\n    const documentParams = {\n      TableName: \"documents\",\n      Key: {\n        id: data.id,\n      },\n    };\n\n    await dynamoDb.delete(documentParams).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"delete successful\",\n    });\n  } catch (error) {\n    res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/fetch\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n    const params = {\n      TableName: \"documents\",\n      FilterExpression: \"#organization_id = :organization_id\",\n      ExpressionAttributeNames: {\n        \"#organization_id\": \"organization_id\",\n      },\n      ExpressionAttributeValues: {\n        \":organization_id\": data.organization_id,\n      },\n    };\n    const result = await dynamoDb.scan(params).promise();\n    const response = {\n      statusCode: 200,\n      body: result.Items,\n    };\n\n    return res.status(200).json(response);\n  } catch (error) {\n    res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/staff\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const params = {\n      TableName: \"documents\",\n      FilterExpression:\n        \"#organization_id = :organization_id AND #assignType < :assignType\",\n      ExpressionAttributeNames: {\n        \"#organization_id\": \"organization_id\",\n        \"#assignType\": \"assignType\",\n      },\n      ExpressionAttributeValues: {\n        \":organization_id\": data.organization_id,\n        \":assignType\": 5,\n      },\n    };\n\n    const result = await dynamoDb.scan(params).promise();\n    const resultDocList = result.Items.filter((item) => {\n      return (\n        item.assignType === 1 ||\n        (item.assignType === 2 && item.assignValue === data.type) ||\n        (item.assignType === 3 && data.role.includes(item.assignValue)) ||\n        data.userId === item.assignValue\n      );\n    });\n    return res.status(200).json({\n      statusCode: 200,\n      body: resultDocList,\n    });\n  } catch (error) {\n    res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/site\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const params = {\n      TableName: \"documents\",\n      FilterExpression:\n        \"#organization_id = :organization_id AND #assignType > :assignType\",\n      ExpressionAttributeNames: {\n        \"#organization_id\": \"organization_id\",\n        \"#assignType\": \"assignType\",\n      },\n      ExpressionAttributeValues: {\n        \":organization_id\": data.organization_id,\n        \":assignType\": 4,\n      },\n    };\n\n    const result = await dynamoDb.scan(params).promise();\n    const resultDocList = result.Items.filter((item) => {\n      return item.assignType === 5 || data.sietId === item.assignValue;\n    });\n    return res.status(200).json({\n      statusCode: 200,\n      body: resultDocList,\n    });\n  } catch (error) {\n    res.status(200).json(error);\n  }\n});\n\nexport default router;\n","import { Router } from \"express\";\nimport document from \"./document.route\";\n\nconst router = Router();\n\nrouter.use(\"/\", document);\n\nexport default router;\n","import AWS from \"aws-sdk\";\nimport { Router } from \"express\";\nconst uuid = require(\"uuid\");\nconst fs = require(\"fs\");\nconst multer = require(\"multer\");\nconst upload = multer({ storage: multer.memoryStorage() });\n\nconst dynamoDb = new AWS.DynamoDB.DocumentClient();\nconst S3 = new AWS.S3();\n\nconst router = Router();\n\nrouter.post(\"/newform\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request!\" });\n    }\n\n    let Item = {\n      id: uuid.v1(),\n      organization_id: data.organization_id,\n      form_name: data.form_name,\n      submit_label: data.submit_label,\n      form_elements: data.form_elements,\n      color: data.color,\n      createAt: timeStamp,\n      updateAt: timeStamp,\n    };\n\n    const params = {\n      TableName: \"form_list\",\n      Item,\n    };\n\n    await dynamoDb.put(params).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: `${form_name} form have been created successfully!`,\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/updateform\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request!\" });\n    }\n\n    const updateParam = {\n      TableName: \"form_list\",\n      Key: {\n        id: data.id,\n      },\n      ExpressionAttributeNames: {\n        \"#form_name\": \"form_name\",\n        \"#submit_label\": \"submit_label\",\n        \"#form_elements\": \"form_elements\",\n        \"#color\": \"color\",\n      },\n      ExpressionAttributeValues: {\n        \":form_name\": data.form_name,\n        \":submit_label\": data.submit_label,\n        \":form_elements\": data.form_elements,\n        \":color\": data.color,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression:\n        \"SET #form_name = :form_name, #submit_label = :submit_label, #form_elements = :form_elements, #color = :color, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    await dynamoDb.update(updateParam).promise();\n\n    return res\n      .status(200)\n      .json({ statusCode: 200, message: \"Allocate Form Success\" });\n  } catch (error) {\n    console.log(\"error\", error);\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/fetch\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const params = {\n      TableName: \"form_list\",\n      FilterExpression: \"#organization_id = :organization_id\",\n      ExpressionAttributeNames: {\n        \"#organization_id\": \"organization_id\",\n      },\n      ExpressionAttributeValues: {\n        \":organization_id\": data.organization_id,\n      },\n    };\n\n    const result = await dynamoDb.scan(params).promise();\n\n    const response = {\n      statusCode: 200,\n      body: result,\n    };\n\n    return res.status(200).json(response);\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/delete\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const delete_param = {\n      TableName: \"form_list\",\n      Key: {\n        id: data.id,\n      },\n    };\n\n    await dynamoDb.delete(delete_param).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Form has been removed successfully\",\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/allocate\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const allocateParam = {\n      TableName: \"form_list\",\n      Key: {\n        id: data.id,\n      },\n      ExpressionAttributeNames: {\n        \"#allocated_site\": \"allocated_site\",\n        \"#allocated_staff\": \"allocated_staff\",\n      },\n      ExpressionAttributeValues: {\n        \":allocated_site\": data.allocated_site,\n        \":allocated_staff\": data.allocated_staff,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression:\n        \"SET #allocated_site = :allocated_site, #allocated_staff = :allocated_staff, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    await dynamoDb.update(allocateParam).promise();\n\n    return res\n      .status(200)\n      .json({ statusCode: 200, message: \"Allocate Form Success\" });\n  } catch (error) {\n    console.log(error);\n    return res.status(200).json(error);\n  }\n});\n\nrouter.get(\"/test\", async (req, res) => {\n  try {\n    const params = {\n      TableName: \"form_list\",\n    };\n\n    const data = await dynamoDb.scan(params).promise();\n    return res.status(200).json({ data: data });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/upload\", upload.single(\"file\"), async (req, res) => {\n  const file = req.file;\n\n  const base64Data = req.body.base.split(\"base64,\")[1];\n  const decodedFile = Buffer.from(base64Data, \"base64\");\n\n  const params = {\n    Bucket: process.env.S3_BUCKET_NAME,\n    Key: \"Home/Form/File/\" + req.file.originalname, // Use the original file name\n    Body: decodedFile,\n    ACL: \"public-read\",\n    ContentEncoding: \"base64\",\n    ContentType: file.mimetype,\n  };\n\n  try {\n    const data = await S3.upload(params).promise();\n    console.log(`File uploaded successfully. ${data.Location}`);\n    return res\n      .status(200)\n      .json({ data: data.Location, message: \"File uploaded successfully\" });\n  } catch (error) {\n    console.error(\"Error uploading file:\", error);\n    return res\n      .status(200)\n      .json({ statusCode: 500, message: \"Error uploading file\" });\n  }\n});\n\nrouter.post(\"/uploadphoto\", async (req, res) => {\n  const timeStamp = new Date().getTime();\n  const photo = req.body.photo.split(\"base64,\")[1];\n\n  const decodedFile = Buffer.from(photo, \"base64\");\n\n  const params = {\n    Bucket: process.env.S3_BUCKET_NAME,\n    Key: \"Home/Form/Photo/\" + timeStamp, // Use the original file name\n    Body: decodedFile,\n    ACL: \"public-read\",\n    ContentEncoding: \"base64\",\n    ContentType: \"image/jpeg\",\n  };\n\n  try {\n    const data = await S3.upload(params).promise();\n    console.log(`File uploaded successfully. ${data.Location}`);\n    return res\n      .status(200)\n      .json({ data: data.Location, message: \"File uploaded successfully\" });\n  } catch (error) {\n    console.error(\"Error uploading file:\", error);\n    return res\n      .status(200)\n      .json({ statusCode: 500, message: \"Error uploading file\" });\n  }\n});\n\nrouter.post(\"/getuserform\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const fetchParam = {\n      TableName: \"form_list\",\n      FilterExpression: \"contains(allocated_staff, :allocate_id)\",\n      ExpressionAttributeValues: {\n        \":allocate_id\": data.allocate_id,\n      },\n    };\n\n    const result = await dynamoDb.scan(fetchParam).promise();\n\n    const response = {\n      statusCode: 200,\n      body: result,\n    };\n\n    return res.status(200).json(response);\n  } catch (error) {\n    console.log(error);\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/getsiteform\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const fetchParam = {\n      TableName: \"form_list\",\n      FilterExpression: \"contains(allocated_site, :allocate_id)\",\n      ExpressionAttributeValues: {\n        \":allocate_id\": data.allocate_id,\n      },\n    };\n\n    const result = await dynamoDb.scan(fetchParam).promise();\n\n    const response = {\n      statusCode: 200,\n      body: result,\n    };\n\n    return res.status(200).json(response);\n  } catch (error) {\n    console.log(error);\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/getforms\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const fetchParam = {\n      TableName: \"form_list\",\n      FilterExpression: \"#allocate_id = :allocate_id\",\n      ExpressionAttributeNames: {\n        \"#allocate_id\": \"allocate_id\",\n      },\n      ExpressionAttributeValues: {\n        \":allocate_id\": data.allocate_id,\n      },\n    };\n\n    const result = await dynamoDb.scan(fetchParam).promise();\n\n    const response = {\n      statusCode: 200,\n      body: result,\n    };\n\n    return res.status(200).json(response);\n  } catch (error) {\n    console.log(error);\n    return res.status(200).json(error);\n  }\n});\n\nexport default router;\n","import { Router } from \"express\";\n\nimport form from \"./form.route\";\n\nconst router = Router();\n\nrouter.use(\"/\", form);\n\nexport default router;\n","import { Router } from \"express\";\n\nimport v1 from \"./v1\";\nimport db from \"./db\";\nimport user from \"./user\";\nimport staff from \"./staff\";\nimport site from \"./site\";\nimport setting from \"./setting\";\nimport role from \"./role\";\nimport report from \"./report\";\nimport remote from \"./remote\";\nimport profile from \"./profile\";\nimport document from \"./document\";\nimport contact from \"./contact\";\nimport company from \"./company\";\nimport client from \"./client\";\nimport admin from \"./admin\";\nimport log from \"./logs\";\nimport form from \"./form\";\n// import custom from \"./custom\";\n\nconst router = Router();\n\nrouter.use(\"/v1\", v1);\nrouter.use(\"/db\", db);\nrouter.use(\"/user\", user);\nrouter.use(\"/staff\", staff);\nrouter.use(\"/site\", site);\nrouter.use(\"/setting\", setting);\nrouter.use(\"/role\", role);\nrouter.use(\"/report\", report);\nrouter.use(\"/remote\", remote);\nrouter.use(\"/profile\", profile);\nrouter.use(\"/document\", document);\nrouter.use(\"/support\", contact);\nrouter.use(\"/company\", company);\nrouter.use(\"/client\", client);\nrouter.use(\"/admin\", admin);\nrouter.use(\"/logs\", log);\nrouter.use(\"/form\", form);\n// router.use(\"/custom\", custom);\n\nexport default router;\n","import { Router } from \"express\";\n\nimport logs from \"./log.route\";\n\nconst router = Router();\n\nrouter.use(\"/\", logs);\n\nexport default router;\n","import AWS from \"aws-sdk\";\nimport { Router } from \"express\";\nconst uuid = require(\"uuid\");\n\nconst dynamoDb = new AWS.DynamoDB.DocumentClient();\n\nconst router = Router();\n\nrouter.post(\"/addlog\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const userParam = {\n      TableName: \"staff_list\",\n      Key: {\n        id: data.userId,\n      },\n    };\n\n    const user = await dynamoDb.get(userParam).promise();\n\n    const TableName = \"logs\";\n\n    let Item = data;\n    Item.id = uuid.v1();\n    Item.user = user.Item.name;\n    Item.date = timeStamp;\n    Item.createAt = timeStamp;\n    Item.updateAt = timeStamp;\n    delete Item.userId;\n\n    const params = {\n      TableName: TableName,\n      Item,\n    };\n\n    const response = await dynamoDb.put(params).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"success create\",\n      data: response,\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/fetchlogs\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const params = {\n      TableName: \"logs\",\n      FilterExpression: \"#organization_id = :organization_id\",\n      ExpressionAttributeNames: {\n        \"#organization_id\": \"organization_id\",\n      },\n      ExpressionAttributeValues: {\n        \":organization_id\": data.organization_id,\n      },\n    };\n    const result = await dynamoDb.scan(params).promise();\n    const response = {\n      statusCode: 200,\n      body: result.Items,\n    };\n\n    return res.status(200).json(response);\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nexport default router;\n","import { Router } from \"express\";\nimport profile from \"./profile.route\";\n\nconst router = Router();\n\nrouter.use(\"/\", profile);\n\nexport default router;\n","import AWS from \"aws-sdk\";\nimport { Router } from \"express\";\nconst uuid = require(\"uuid\");\n\nconst dynamoDb = new AWS.DynamoDB.DocumentClient();\nconst s3bucket = new AWS.S3();\n\nconst router = Router();\n\nrouter.post(\"/fetch\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const params = {\n      TableName: \"staff_list\",\n      Key: {\n        id: data.id,\n      },\n    };\n\n    const user = await dynamoDb.get(params).promise();\n\n    const response = {\n      statusCode: 200,\n      body: {\n        user: user,\n      },\n    };\n\n    return res.status(200).json(response);\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/update\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const params = {\n      TableName: \"staff_list\",\n      Key: {\n        id: data.id,\n      },\n      ExpressionAttributeNames: {\n        \"#name_text\": \"name\",\n        \"#gender\": \"gender\",\n        \"#birth\": \"birth\",\n      },\n      ExpressionAttributeValues: {\n        \":name\": data.name,\n        \":gender\": data.gender,\n        \":birth\": data.birth,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression:\n        \"SET #name_text = :name, #gender = :gender, #birth = :birth, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    await dynamoDb.update(params).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Profile data has been successfully updated\",\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/updateavatar\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    let location = \"\";\n\n    var buf = Buffer.from(\n      data.avatar.replace(/^data:image\\/\\w+;base64,/, \"\"),\n      \"base64\"\n    );\n    const type = data.avatar.split(\";\")[0].split(\"/\")[1];\n    const s3params = {\n      Bucket: process.env.S3_BUCKET_NAME,\n      Key: `Home/Avatars/${data.organization_id}/avatar${timeStamp}.${type}`,\n      Body: buf,\n      ACL: \"public-read\",\n      ContentEncoding: \"base64\",\n      ContentType: `image/${type}`,\n    };\n    try {\n      const uploadData = await s3bucket.upload(s3params).promise();\n      location = uploadData.Location;\n    } catch (error) {\n      console.log(error);\n      return utils.responseData(200, { statusCode: 500, error });\n    }\n\n    const params = {\n      TableName: \"staff_list\",\n      Key: {\n        id: data.id,\n      },\n      ExpressionAttributeNames: {\n        \"#avatar\": \"avatar\",\n      },\n      ExpressionAttributeValues: {\n        \":avatar\": location,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression: \"SET #avatar = :avatar, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    await dynamoDb.update(params).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      avatar: location,\n      message: \"Profile Avatar has been successfully updated\",\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/changepin\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const staffParams = {\n      TableName: \"staff_list\",\n      Key: {\n        id: data.id,\n      },\n      ExpressionAttributeNames: {\n        \"#pin\": \"pin\",\n      },\n      ExpressionAttributeValues: {\n        \":pin\": data.pin,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression: \"SET #pin = :pin, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n    await dynamoDb.update(staffParams).promise();\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Pin has been successfully updated\",\n      response,\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/gethistory\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const staffParams = {\n      TableName: data.tableName,\n      FilterExpression: \"#staff_id = :staff_id\",\n      ExpressionAttributeNames: {\n        \"#staff_id\": \"staff_id\",\n      },\n      ExpressionAttributeValues: {\n        \":staff_id\": data.userId,\n      },\n    };\n\n    const staffHistoryList = await dynamoDb.scan(staffParams).promise();\n    return res.status(200).json({ statusCode: 200, data: staffHistoryList });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nexport default router;\n","import { Router } from \"express\";\nimport remote from \"./remote.route\";\n\nconst router = Router();\n\nrouter.use(\"/\", remote);\n\nexport default router;\n","import AWS from \"aws-sdk\";\nimport { Router } from \"express\";\n\nconst dynamoDb = new AWS.DynamoDB.DocumentClient();\n\nconst router = Router();\n\nrouter.post(\"/sites\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const params = {\n      TableName: \"site_list\",\n      FilterExpression: \"#organization_id = :organization_id\",\n      ExpressionAttributeNames: {\n        \"#organization_id\": \"organization_id\",\n      },\n      ExpressionAttributeValues: {\n        \":organization_id\": data.organization_id,\n      },\n    };\n    const result = await dynamoDb.scan(params).promise();\n    const response = {\n      statusCode: 200,\n      body: result.Items,\n    };\n\n    return res.status(200).json(response);\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nexport default router;\n","import { Router } from \"express\";\nimport report from \"./report.route\";\n\nconst router = Router();\n\nrouter.use(\"/\", report);\n\nexport default router;\n","import AWS from \"aws-sdk\";\nimport { Router } from \"express\";\nimport moment from \"moment\";\nconst uuid = require(\"uuid\");\n\nconst dynamoDb = new AWS.DynamoDB.DocumentClient();\nconst s3bucket = new AWS.S3();\n\nconst router = Router();\n\nasync function queryAndDeleteDynamoDB(params) {\n  const data = await dynamoDb.scan(params).promise();\n  for (let item of data.Items) {\n    const deleteParams = {\n      TableName: params.TableName,\n      Key: {\n        id: item.id,\n      },\n    };\n    await dynamoDb.delete(deleteParams).promise();\n  }\n  if (data.LastEvaluatedKey) {\n    params.ExclusiveStartKey = data.LastEvaluatedKey;\n    return queryAndDeleteDynamoDB(params);\n  }\n}\n\nrouter.post(\"/fetch\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const params = {\n      TableName: data.tableName,\n    };\n    const result = await dynamoDb.scan(params).promise();\n    const response = {\n      statusCode: 200,\n      body: result.Items,\n    };\n\n    return res.status(200).json(response);\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/scandate\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const params = {\n      TableName: data.tableName,\n      FilterExpression: \"#date between :start_date and :end_date\",\n      ExpressionAttributeNames: {\n        \"#date\": \"date\",\n      },\n      ExpressionAttributeValues: {\n        \":start_date\": data.start_date,\n        \":end_date\": data.end_date,\n      },\n    };\n\n    const result = await dynamoDb.scan(params).promise();\n\n    const response = {\n      statusCode: 200,\n      body: result,\n    };\n\n    return res.status(200).json(response);\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\n// router.post(\"/addtrack\", async (req, res) => {\n//   try {\n//     const timeStamp = new Date().getTime();\n//     const data = req.body;\n//     if (!data) {\n//       return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n//     }\n\n//     const TableName = data.tableName;\n//     let site_id = data.site_id;\n//     let last_start_date = data.last_start_date;\n//     let track_id = data.track_id;\n//     const clocked_state = data.state;\n\n//     let Item = data;\n//     Item.id = uuid.v1();\n//     Item.createdAt = timeStamp;\n//     Item.updateAt = timeStamp;\n//     Item.edit_state = 2;\n//     delete Item.tableName;\n//     delete Item.siteId;\n//     delete Item.track_id;\n//     delete Item.last_start_date;\n//     delete Item.state;\n//     delete Item.site_id;\n\n//     const params = {\n//       TableName: TableName,\n//       Item,\n//     };\n\n//     await dynamoDb.put(params).promise();\n\n//     var state = clocked_state;\n//     if (Item.end_date === null) {\n//       track_id = Item.id;\n//       last_start_date = data.start_date;\n//       state = true;\n//       site_id = TableName;\n//     }\n\n//     const staffParams = {\n//       TableName: \"staff_list\",\n//       Key: {\n//         id: data.staff_id,\n//       },\n//       ExpressionAttributeNames: {\n//         \"#clocked_state\": \"clocked_state\",\n//         \"#track_id\": \"track_id\",\n//         \"#site_id\": \"site_id\",\n//         \"#last_start_date\": \"last_start_date\",\n//       },\n//       ExpressionAttributeValues: {\n//         \":clocked_state\": state,\n//         \":track_id\": track_id,\n//         \":site_id\": site_id,\n//         \":last_start_date\": last_start_date,\n//         \":updateAt\": timeStamp,\n//       },\n//       UpdateExpression:\n//         \"SET #track_id = :track_id, #last_start_date = :last_start_date, #clocked_state = :clocked_state, #site_id = :site_id, updateAt = :updateAt\",\n//       ReturnValues: \"ALL_NEW\",\n//     };\n\n//     await dynamoDb.update(staffParams).promise();\n\n//     return res.status(200).json({\n//       statusCode: 200,\n//       message: `${Item.name} track data has been successfully created`,\n//     });\n//   } catch (error) {\n//     return res.status(200).json(error);\n//   }\n// });\n\nrouter.post(\"/addtrack\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request!\" });\n    }\n\n    const track_id = uuid.v1();\n\n    const promise = data.dateList.map(async (item, index) => {\n      const uid = uuid.v1();\n\n      const dateParams = {\n        TableName: data.tableName,\n        Item: {\n          id: uid,\n          track_id: track_id,\n          staff_id: data.staff.id,\n          date: moment(item.start_date).format(\"YYYY-MM-DD\"),\n          start_date: item.start_date,\n          end_date: item.end_date,\n          total_time: item.total_time,\n          name: data.staff.name,\n          status: item.status,\n          track_type: 1,\n          createdAt: timeStamp,\n          updateAt: timeStamp,\n        },\n      };\n      await dynamoDb.put(dateParams).promise();\n    });\n\n    await Promise.all(promise);\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: `${data.staff.name} track data has been successfully created`,\n    });\n  } catch (error) {\n    console.log(error);\n    return res.status(200).json(error);\n  }\n});\n\n// router.post(\"/updatetrack\", async (req, res) => {\n//   try {\n//     const timeStamp = new Date().getTime();\n//     const data = req.body;\n//     if (!data) {\n//       return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n//     }\n\n//     const dateParam = {\n//       TableName: data.tableName,\n//       Key: {\n//         id: data.id,\n//       },\n//       ExpressionAttributeNames: {\n//         \"#name\": \"name\",\n//         \"#staff_id\": \"staff_id\",\n//         \"#date\": \"date\",\n//         \"#start_date\": \"start_date\",\n//         \"#end_date\": \"end_date\",\n//         \"#start_origin\": \"start_origin\",\n//         \"#end_origin\": \"end_origin\",\n//         \"#total_time\": \"total_time\",\n//       },\n//       ExpressionAttributeValues: {\n//         \":name\": data.name,\n//         \":staff_id\": data.staff_id,\n//         \":date\": data.date,\n//         \":start_date\": data.start_date,\n//         \":end_date\": data.end_date,\n//         \":start_origin\": data.start_origin,\n//         \":end_origin\": data.end_origin,\n//         \":total_time\": data.total_time,\n//         \":edit_state\": 1,\n//         \":updateAt\": timeStamp,\n//       },\n//       UpdateExpression:\n//         \"SET #name = :name, #staff_id = :staff_id, #date = :date, #start_date = :start_date, #end_date = :end_date, #start_origin = :start_origin, #end_origin = :end_origin, #total_time = :total_time, edit_state = :edit_state, updateAt = :updateAt\",\n//       ReturnValues: \"ALL_NEW\",\n//     };\n\n//     await dynamoDb.update(dateParam).promise();\n\n//     if (data.state) {\n//       if (!data.subState) {\n//         const oldParams = {\n//           TableName: \"staff_list\",\n//           Key: {\n//             id: data.old_staff_id,\n//           },\n//           ExpressionAttributeNames: {\n//             \"#clocked_state\": \"clocked_state\",\n//           },\n//           ExpressionAttributeValues: {\n//             \":clocked_state\": false,\n//           },\n//           UpdateExpression: \"SET #clocked_state = :clocked_state\",\n//           ReturnValues: \"ALL_NEW\",\n//         };\n\n//         await dynamoDb.update(oldParams).promise();\n\n//         const params = {\n//           TableName: \"staff_list\",\n//           Key: {\n//             id: data.staff_id,\n//           },\n//           ExpressionAttributeNames: {\n//             \"#clocked_state\": \"clocked_state\",\n//             \"#last_start_date\": \"last_start_date\",\n//             \"#track_id\": \"track_id\",\n//             \"#site_id\": \"site_id\",\n//           },\n//           ExpressionAttributeValues: {\n//             \":clocked_state\": data.clocked_state,\n//             \":last_start_date\": data.start_date,\n//             \":track_id\": data.id,\n//             \":updateAt\": timeStamp,\n//             \":site_id\": data.tableName,\n//           },\n//           UpdateExpression:\n//             \"SET #last_start_date = :last_start_date, #clocked_state = :clocked_state, #track_id = :track_id, #site_id = :site_id, updateAt = :updateAt\",\n//           ReturnValues: \"ALL_NEW\",\n//         };\n\n//         await dynamoDb.update(params).promise();\n//       } else {\n//         if (data.clocked_state) {\n//           const params = {\n//             TableName: \"staff_list\",\n//             Key: {\n//               id: data.staff_id,\n//             },\n//             ExpressionAttributeNames: {\n//               \"#clocked_state\": \"clocked_state\",\n//               \"#last_start_date\": \"last_start_date\",\n//               \"#track_id\": \"track_id\",\n//               \"#site_id\": \"site_id\",\n//             },\n//             ExpressionAttributeValues: {\n//               \":clocked_state\": data.clocked_state,\n//               \":last_start_date\": data.start_date,\n//               \":track_id\": data.id,\n//               \":updateAt\": timeStamp,\n//               \":site_id\": data.tableName,\n//             },\n//             UpdateExpression:\n//               \"SET #last_start_date = :last_start_date, #clocked_state = :clocked_state, #track_id = :track_id, #site_id = :site_id, updateAt = :updateAt\",\n//             ReturnValues: \"ALL_NEW\",\n//           };\n\n//           await dynamoDb.update(params).promise();\n//         } else {\n//           const oldParams = {\n//             TableName: \"staff_list\",\n//             Key: {\n//               id: data.old_staff_id,\n//             },\n//             ExpressionAttributeNames: {\n//               \"#clocked_state\": \"clocked_state\",\n//             },\n//             ExpressionAttributeValues: {\n//               \":clocked_state\": false,\n//             },\n//             UpdateExpression: \"SET #clocked_state = :clocked_state\",\n//             ReturnValues: \"ALL_NEW\",\n//           };\n\n//           await dynamoDb.update(oldParams).promise();\n//         }\n//       }\n//     }\n\n//     return res.status(200).json({\n//       statusCode: 200,\n//       message: `${data.name} track data has been successfully updated`,\n//     });\n//   } catch (error) {\n//     return res.status(200).json(error);\n//   }\n// });\n\n// router.post(\"/deletetrack\", async (req, res) => {\n//   try {\n//     const timeStamp = new Date().getTime();\n//     const data = req.body;\n//     if (!data) {\n//       return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n//     }\n\n//     const params = {\n//       TableName: data.tableName,\n//       Key: {\n//         id: data.id,\n//       },\n//     };\n\n//     await dynamoDb.delete(params).promise();\n\n//     if (data.state) {\n//       const staffParams = {\n//         TableName: \"staff_list\",\n//         Key: {\n//           id: data.staff_id,\n//         },\n//         ExpressionAttributeNames: {\n//           \"#clocked_state\": \"clocked_state\",\n//         },\n//         ExpressionAttributeValues: {\n//           \":clocked_state\": false,\n//           \":updateAt\": timeStamp,\n//         },\n//         UpdateExpression:\n//           \"SET #clocked_state = :clocked_state, updateAt = :updateAt\",\n//         ReturnValues: \"ALL_NEW\",\n//       };\n\n//       await dynamoDb.update(staffParams).promise();\n//     }\n\n//     return res.status(200).json({\n//       statusCode: 200,\n//       message: \"Track data has been successfully deleted\",\n//     });\n//   } catch (error) {\n//     return res.status(200).json(error);\n//   }\n// });\n\nrouter.post(\"/updatetrack\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const promise = data.map(async (item, index) => {\n      const updateParam = {\n        TableName: item.tableName,\n        Key: {\n          id: item.id,\n        },\n        ExpressionAttributeNames: {\n          \"#date\": \"date\",\n          \"#start_date\": \"start_date\",\n          \"#end_date\": \"end_date\",\n          \"#status\": \"status\",\n          \"#total_time\": \"total_time\",\n        },\n        ExpressionAttributeValues: {\n          \":date\": moment(item.start_date).format(\"YYYY-MM-DD\"),\n          \":start_date\": item.start_date,\n          \":end_date\": item.end_date,\n          \":status\": item.status,\n          \":total_time\": item.total_time,\n          \":updateAt\": timeStamp,\n        },\n        UpdateExpression:\n          \"SET #date = :date, #start_date = :start_date, #end_date = :end_date, #status = :status, #total_time = :total_time, updateAt = :updateAt\",\n        ReturnValues: \"ALL_NEW\",\n      };\n\n      // Check if the item has an origin_date\n      if (item.origin_date) {\n        // If it does, add it to the ExpressionAttributeNames, ExpressionAttributeValues, and UpdateExpression\n        updateParam.ExpressionAttributeNames[\"#origin_date\"] = \"origin_date\";\n        updateParam.ExpressionAttributeNames[\"#update_info\"] = \"update_info\";\n        updateParam.ExpressionAttributeValues[\":origin_date\"] =\n          item.origin_date;\n        updateParam.ExpressionAttributeValues[\":update_info\"] =\n          item.update_info;\n        updateParam.ExpressionAttributeValues[\":track_type\"] = 2;\n        updateParam.UpdateExpression +=\n          \", #origin_date = :origin_date, #update_info = :update_info, track_type = :track_type\";\n      }\n\n      // Return the promise from the map function\n      return dynamoDb.update(updateParam).promise();\n    });\n\n    // Now promise is an array of promises\n    await Promise.all(promise);\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: `track data has been successfully updated`,\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/deletetrack\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request!\" });\n    }\n\n    const params = {\n      TableName: data.tableName,\n      FilterExpression: \"#track_id = :track_id\",\n      ExpressionAttributeNames: {\n        \"#track_id\": \"track_id\",\n      },\n      ExpressionAttributeValues: {\n        \":track_id\": data.track_id, // Replace 'YourId' with the id you want to delete\n      },\n    };\n\n    await queryAndDeleteDynamoDB(params);\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"The report data has been deleted.\",\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/getimage\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const params = {\n      Bucket: process.env.S3_BUCKET_NAME, // replace with your bucket name\n      Key: data.key, // replace with the image key\n    };\n\n    try {\n      const data = await s3bucket.getObject(params).promise();\n      var base64Data = data.Body.toString(\"base64\");\n    } catch (error) {\n      console.log(error);\n      return res.status(200).json({ statusCode: 500, error });\n    }\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Company Logo\",\n      data: base64Data,\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nexport default router;\n","import { Router } from \"express\";\n\nimport role from \"./role.route\";\n\nconst router = Router();\n\nrouter.use(\"/\", role);\n\nexport default router;\n","import AWS from \"aws-sdk\";\nimport { Router } from \"express\";\nconst uuid = require(\"uuid\");\n\nconst dynamoDb = new AWS.DynamoDB.DocumentClient();\n\nconst router = Router();\n\nrouter.post(\"/create\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    let Item = {\n      id: uuid.v1(),\n      organization_id: data.organization_id,\n      role: data.roleName,\n      createAt: timeStamp,\n      updateAt: timeStamp,\n    };\n\n    const params = {\n      TableName: \"role_list\",\n      Item,\n    };\n\n    await dynamoDb.put(params).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Role has been successfully created\",\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/fetch\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const params = {\n      TableName: \"role_list\",\n      FilterExpression: \"#organization_id = :organization_id\",\n      ExpressionAttributeNames: {\n        \"#organization_id\": \"organization_id\",\n      },\n      ExpressionAttributeValues: {\n        \":organization_id\": data.organization_id,\n      },\n    };\n    const result = await dynamoDb.scan(params).promise();\n    const response = {\n      statusCode: 200,\n      body: result.Items,\n    };\n\n    return res.status(200).json(response);\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/update\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const params = {\n      TableName: \"role_list\",\n      Key: {\n        id: data.id,\n      },\n      ExpressionAttributeNames: {\n        \"#role_text\": \"role\",\n      },\n      ExpressionAttributeValues: {\n        \":role\": data.role,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression: \"SET #role_text = :role, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    await dynamoDb.update(params).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Role has been successfully updated\",\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/delete\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const params = {\n      TableName: \"role_list\",\n      Key: {\n        id: data.id,\n      },\n    };\n\n    await dynamoDb.delete(params).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Role has been successfully deleted\",\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/staffrole\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const params = {\n      TableName: \"staff_list\",\n      Key: {\n        id: data.id,\n      },\n      ExpressionAttributeNames: {\n        \"#role_text\": \"role\",\n      },\n      ExpressionAttributeValues: {\n        \":role\": data.role,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression: \"SET #role_text = :role, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    await dynamoDb.update(params).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Update Successful\",\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nexport default router;\n","import { Router } from \"express\";\n\nimport setting from \"./setting.route\";\n\nconst router = Router();\n\nrouter.use(\"/\", setting);\n\nexport default router;\n","import AWS from \"aws-sdk\";\nimport { Router } from \"express\";\n\nconst dynamoDb = new AWS.DynamoDB.DocumentClient();\n\nconst router = Router();\n\nrouter.post(\"/report\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request!\" });\n    }\n\n    const params = {\n      TableName: \"company_list\",\n      Key: {\n        id: data.id,\n      },\n      ExpressionAttributeNames: {\n        \"#site_report\": \"site_report\",\n        \"#staff_report\": \"staff_report\",\n        \"#show_day\": \"show_day\",\n      },\n      ExpressionAttributeValues: {\n        \":site_report\": data.site_report,\n        \":staff_report\": data.staff_report,\n        \":show_day\": data.showDay,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression:\n        \"SET #site_report = :site_report, #staff_report = :staff_report, #show_day = :show_day, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    await dynamoDb.update(params).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Report option data has been successfully updated\",\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nexport default router;\n","import { Router } from \"express\";\n\nimport site from \"./site.route\";\n\nconst router = Router();\n\nrouter.use(\"/\", site);\n\nexport default router;\n","import AWS from \"aws-sdk\";\nimport { Router } from \"express\";\nconst uuid = require(\"uuid\");\n\nconst dynamoDb = new AWS.DynamoDB.DocumentClient();\n\nconst router = Router();\n\nrouter.post(\"/create\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    let Item = data;\n    Item.id = uuid.v1();\n    Item.createAt = timeStamp;\n    Item.updateAt = timeStamp;\n\n    const params = {\n      TableName: \"site_list\",\n      Item,\n    };\n\n    await dynamoDb.put(params).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Site data has been successfully created\",\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/fetch\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const params = {\n      TableName: \"site_list\",\n      FilterExpression: \"#organization_id = :organization_id\",\n      ExpressionAttributeNames: {\n        \"#organization_id\": \"organization_id\",\n      },\n      ExpressionAttributeValues: {\n        \":organization_id\": data.organization_id,\n      },\n    };\n    const result = await dynamoDb.scan(params).promise();\n    const response = {\n      statusCode: 200,\n      body: result.Items,\n    };\n\n    return res.status(200).json(response);\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/update\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const params = {\n      TableName: \"site_list\",\n      Key: {\n        id: data.id,\n      },\n      ExpressionAttributeNames: {\n        \"#name_text\": \"name\",\n        \"#description_text\": \"description\",\n        \"#round\": \"round\",\n        \"#radius\": \"radius\",\n        \"#remote\": \"remote\",\n      },\n      ExpressionAttributeValues: {\n        \":name\": data.name,\n        \":description\": data.description,\n        \":round\": data.round,\n        \":radius\": data.radius,\n        \":remote\": data.remote,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression:\n        \"SET #name_text = :name, #description_text = :description, #round = :round, #radius = :radius, #remote = :remote, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    await dynamoDb.update(params).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Site data has been successfully updated\",\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/location\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const params = {\n      TableName: \"site_list\",\n      Key: {\n        id: data.id,\n      },\n      ExpressionAttributeNames: {\n        \"#lat\": \"lat\",\n        \"#lng\": \"lng\",\n        \"#address\": \"address\",\n      },\n      ExpressionAttributeValues: {\n        \":lat\": data.lat,\n        \":lng\": data.lng,\n        \":address\": data.address,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression:\n        \"SET #lat = :lat, #lng = :lng, #address = :address, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    await dynamoDb.update(params).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Location data has been successfully updated\",\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/delete\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const params = {\n      TableName: \"site_list\",\n      Key: {\n        id: data.id,\n      },\n    };\n\n    await dynamoDb.delete(params).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Site data had been successfully deleted\",\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nexport default router;\n","import { Router } from \"express\";\n\nimport staff from \"./staff.route\";\n\nconst router = Router();\n\nrouter.use(\"/\", staff);\n\nexport default router;\n","import AWS from \"aws-sdk\";\nimport { Router } from \"express\";\nconst uuid = require(\"uuid\");\n\nconst cognito = new AWS.CognitoIdentityServiceProvider();\nconst dynamoDb = new AWS.DynamoDB.DocumentClient();\nconst s3bucket = new AWS.S3();\nvar ses = new AWS.SES();\n\nconst router = Router();\n\nrouter.post(\"/create\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n    const pin = Math.floor(1000 + Math.random() * 9000);\n    var result = \"\";\n    var characters =\n      \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    var charactersLength = characters.length;\n    for (var i = 0; i < 10; i++) {\n      result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n\n    let Item = {\n      id: uuid.v1(),\n      organization_id: data.companyInfo.organization_id,\n      email: data.email,\n      name: data.name,\n      avatar: process.env.DEFAULT_AVATAR,\n      pin: pin,\n      role: data.role,\n      level: data.level,\n      type: data.type,\n      site_id: null,\n      track_id: null,\n      clocked_state: false,\n      state: true,\n      last_start_date: null,\n      createAt: timeStamp,\n      updateAt: timeStamp,\n    };\n\n    const params = {\n      UserPoolId: process.env.USER_POOL_ID, // replace with your User Pool ID\n      Username: data.email, // replace with the username\n      TemporaryPassword: result, // replace with a temporary password\n      UserAttributes: [\n        {\n          Name: \"email\",\n          Value: data.email, // replace with the user's email\n        },\n        {\n          Name: \"email_verified\",\n          Value: \"true\",\n        },\n        {\n          Name: \"custom:role\",\n          Value: data.level == 2 ? \"admin\" : \"member\",\n        },\n        {\n          Name: \"custom:user_id\",\n          Value: Item.id,\n        },\n        {\n          Name: \"custom:level\",\n          Value: data.level.toString(),\n        },\n        {\n          Name: \"custom:organization_id\",\n          Value: data.companyInfo.organization_id,\n        },\n      ],\n      MessageAction: \"SUPPRESS\", // suppresses the welcome message\n    };\n    await cognito.adminCreateUser(params).promise();\n\n    const staffParams = {\n      TableName: \"staff_list\",\n      Item,\n    };\n\n    await dynamoDb.put(staffParams).promise();\n\n    const inviteLink =\n      data.level === 2\n        ? \"https://teamixo-server.vercel.app/invite/\" + Item.id\n        : \"https://teamixo-user.vercel.app/invite/\" + Item.id;\n\n    var emailParams = {\n      Destination: {\n        ToAddresses: [data.email], // replace recipient@example.com with the recipient's email address\n      },\n      Message: {\n        Body: {\n          Html: {\n            Charset: \"UTF-8\",\n            Data: `<div>\n              <p>Dear ${data.name}</p>\n              <p>\n                You have been invited to join the ${data.companyInfo.name} workspace, we use this\n                system for you to clock-in and clock-out of your shifts as well as to manage\n                your employee profile, it is important you setup your profile now using the\n                link below:\n              </p>\n              <p>\n                <a\n                  href=\"${inviteLink}\"\n                  style=\"\n                    height: 20px;\n                    background-color: #3a2456;\n                    color: white;\n                    border-radius: 6px;\n                    padding: 5px 8px 5px 8px;\n                    text-decoration: none;\n                    font-weight: 600;\n                  \"\n                  >SET PASSWORD</a\n                >\n              </p>\n              <p>\n                <span style=\"font-weight: 600\"\n                  >You will need your PIN number to create your password</span\n                ><span>- your unique PIN number is: </span\n                ><span style=\"font-weight: 600\">${pin}.</span>\n              </p>\n              <p>\n                <span style=\"font-weight: 600\"\n                  >You will also use this PIN to clock in and clock out of shifts so please\n                  keep it safe and on hand.</span\n                >\n              </p>\n              <p>\n                <span\n                  >Once you have created your account using the link above you will be able\n                  to login at</span\n                ><br />\n                <a href=\"https://app.teamixo.com/\" style=\"text-decoration: none\"\n                  >https://app.teamixo.com/</a\n                ><span style=\"font-weight: 600\">\n                  where you can manage your profile and update your PIN to a more memorable\n                  number for yourself.</span\n                >\n              </p>\n              <p>\n                If you have any questions please reply to this e-mail, send an e-mail to\n                ${data.companyInfo.email} or contact your manager.\n              </p>\n              <p>Kind Regards,</p>\n              <p>The ${data.companyInfo.name} admin team.</p>\n            </div>\n            `,\n          },\n        },\n        Subject: {\n          Charset: \"UTF-8\",\n          Data: `You are invited as member from ${data.companyName}`, // replace with your email subject\n        },\n      },\n      Source: \"Teamixo Support <support@teamixo.com>\", // replace sender@example.com with your \"From\" address\n    };\n\n    await ses.sendEmail(emailParams).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Staff data has been successfully created\",\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/fetch\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const params = {\n      TableName: \"staff_list\",\n      FilterExpression: \"#organization_id = :organization_id\",\n      ExpressionAttributeNames: {\n        \"#organization_id\": \"organization_id\",\n      },\n      ExpressionAttributeValues: {\n        \":organization_id\": data.organization_id,\n      },\n    };\n    const result = await dynamoDb.scan(params).promise();\n    const response = {\n      statusCode: 200,\n      body: result.Items,\n    };\n\n    return res.status(200).json(response);\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/update\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    let location = \"\";\n\n    if (data.avatar) {\n      var buf = Buffer.from(\n        data.avatar.replace(/^data:image\\/\\w+;base64,/, \"\"),\n        \"base64\"\n      );\n      const type = data.avatar.split(\";\")[0].split(\"/\")[1];\n      const params = {\n        Bucket: process.env.S3_BUCKET_NAME,\n        Key: `Home/Avatars/${data.organization_id}/avatar${timeStamp}.${type}`,\n        Body: buf,\n        ACL: \"public-read\",\n        ContentEncoding: \"base64\",\n        ContentType: `image/${type}`,\n      };\n      try {\n        const uploadData = await s3bucket.upload(params).promise();\n        location = uploadData.Location;\n      } catch (error) {\n        console.log(error);\n        return res.status(200).json({ statusCode: 500, error });\n      }\n    }\n\n    const params = data.avatar\n      ? {\n          TableName: \"staff_list\",\n          Key: {\n            id: data.id,\n          },\n          ExpressionAttributeNames: {\n            \"#name_text\": \"name\",\n            \"#role_text\": \"role\",\n            \"#avatar\": \"avatar\",\n            \"#birth\": \"birth\",\n            \"#pin\": \"pin\",\n            \"#type\": \"type\",\n            \"#state\": \"state\",\n          },\n          ExpressionAttributeValues: {\n            \":name\": data.name,\n            \":role\": data.role,\n            \":type\": data.type,\n            \":avatar\": location,\n            \":birth\": data.birth,\n            \":pin\": data.pin,\n            \":state\": true,\n            \":updateAt\": timeStamp,\n          },\n          UpdateExpression:\n            \"SET #name_text = :name, #role_text = :role, #type = :type, #avatar = :avatar, #birth = :birth, #pin = :pin, #state = :state, updateAt = :updateAt\",\n          ReturnValues: \"ALL_NEW\",\n        }\n      : {\n          TableName: \"staff_list\",\n          Key: {\n            id: data.id,\n          },\n          ExpressionAttributeNames: {\n            \"#name_text\": \"name\",\n            \"#role_text\": \"role\",\n            \"#birth\": \"birth\",\n            \"#pin\": \"pin\",\n            \"#type\": \"type\",\n            \"#state\": \"state\",\n          },\n          ExpressionAttributeValues: {\n            \":name\": data.name,\n            \":role\": data.role,\n            \":type\": data.type,\n            \":birth\": data.birth,\n            \":pin\": data.pin,\n            \":state\": true,\n            \":updateAt\": timeStamp,\n          },\n          UpdateExpression:\n            \"SET #name_text = :name, #role_text = :role, #type = :type, #birth = :birth, #pin = :pin, #state = :state, updateAt = :updateAt\",\n          ReturnValues: \"ALL_NEW\",\n        };\n\n    await dynamoDb.update(params).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Staff data has been successfully updated\",\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/upgrade\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const pin = Math.floor(1000 + Math.random() * 9000);\n    var result = \"\";\n    var characters =\n      \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    var charactersLength = characters.length;\n    for (var i = 0; i < 10; i++) {\n      result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n\n    const addParams = {\n      UserPoolId: process.env.USER_POOL_ID, // replace with your User Pool ID\n      Username: data.email, // replace with the username\n      TemporaryPassword: result, // replace with a temporary password\n      UserAttributes: [\n        {\n          Name: \"email\",\n          Value: data.email, // replace with the user's email\n        },\n        {\n          Name: \"email_verified\",\n          Value: \"true\",\n        },\n        {\n          Name: \"custom:role\",\n          Value: \"member\",\n        },\n        {\n          Name: \"custom:user_id\",\n          Value: data.id,\n        },\n        {\n          Name: \"custom:level\",\n          Value: \"3\",\n        },\n        {\n          Name: \"custom:organization_id\",\n          Value: data.organization_id,\n        },\n      ],\n      MessageAction: \"SUPPRESS\", // suppresses the welcome message\n    };\n    await cognito.adminCreateUser(addParams).promise();\n\n    const params = {\n      TableName: \"staff_list\",\n      Key: {\n        id: data.id,\n      },\n      ExpressionAttributeNames: {\n        \"#role_text\": \"role\",\n        \"#type\": \"type\",\n        \"#state\": \"state\",\n        \"#pin\": \"pin\",\n      },\n      ExpressionAttributeValues: {\n        \":role\": data.role,\n        \":type\": data.type,\n        \":state\": true,\n        \":pin\": pin,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression:\n        \"SET #role_text = :role, #type = :type, #state = :state, #pin = :pin, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    await dynamoDb.update(params).promise();\n\n    const inviteLink = \"https://teamixo-user.vercel.app/invite/\" + data.id;\n\n    var emailParams = {\n      Destination: {\n        ToAddresses: [data.email], // replace recipient@example.com with the recipient's email address\n      },\n      Message: {\n        Body: {\n          Html: {\n            Charset: \"UTF-8\",\n            Data: `<div>\n            <p>Dear ${data.name}</p>\n            <p>\n              You have been invited to join the ${data.companyInfo.name} workspace, we use this\n              system for you to clock-in and clock-out of your shifts as well as to manage\n              your employee profile, it is important you setup your profile now using the\n              link below:\n            </p>\n            <p>\n              <a\n                href=\"${inviteLink}\"\n                style=\"\n                  height: 20px;\n                  background-color: #3a2456;\n                  color: white;\n                  border-radius: 6px;\n                  padding: 5px 8px 5px 8px;\n                  text-decoration: none;\n                  font-weight: 600;\n                \"\n                >SET PASSWORD</a\n              >\n            </p>\n            <p>\n              <span style=\"font-weight: 600\"\n                >You will need your PIN number to create your password</span\n              ><span>- your unique PIN number is: </span\n              ><span style=\"font-weight: 600\">${pin}.</span>\n            </p>\n            <p>\n              <span style=\"font-weight: 600\"\n                >You will also use this PIN to clock in and clock out of shifts so please\n                keep it safe and on hand.</span\n              >\n            </p>\n            <p>\n              <span\n                >Once you have created your account using the link above you will be able\n                to login at</span\n              ><br />\n              <a href=\"https://app.teamixo.com/\" style=\"text-decoration: none\"\n                >https://app.teamixo.com/</a\n              ><span style=\"font-weight: 600\">\n                where you can manage your profile and update your PIN to a more memorable\n                number for yourself.</span\n              >\n            </p>\n            <p>\n              If you have any questions please reply to this e-mail, send an e-mail to\n              ${data.companyInfo.email} or contact your manager.\n            </p>\n            <p>Kind Regards,</p>\n            <p>The ${data.companyInfo.name} admin team.</p>\n          </div>\n          `,\n          },\n        },\n        Subject: {\n          Charset: \"UTF-8\",\n          Data: \"You are invited as member from Teamixo\", // replace with your email subject\n        },\n      },\n      Source: \"support@teamixo.com\", // replace sender@example.com with your \"From\" address\n    };\n\n    await ses.sendEmail(emailParams).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Upgrade Successful\",\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/delete\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Reqeust\" });\n    }\n\n    if (data.state) {\n      const params = {\n        UserPoolId: process.env.USER_POOL_ID,\n        Username: data.email,\n      };\n\n      await cognito.adminDeleteUser(params).promise();\n    }\n\n    const params = {\n      TableName: \"staff_list\",\n      Key: {\n        id: data.id,\n      },\n    };\n\n    await dynamoDb.delete(params).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Staff data has been successfully deleted\",\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/addpermission\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const permissionParam = {\n      TableName: \"staff_list\",\n      Key: {\n        id: data.id,\n      },\n      ExpressionAttributeNames: {\n        \"#permission\": \"permission\",\n      },\n      ExpressionAttributeValues: {\n        \":permission\": data.permission,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression: \"SET #permission = :permission, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    await dynamoDb.update(permissionParam).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Permissions has been successfully added!\",\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/fetchadmin\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const params = {\n      TableName: \"staff_list\",\n      FilterExpression:\n        \"#organization_id = :organization_id AND #level = :level\",\n      ExpressionAttributeNames: {\n        \"#organization_id\": \"organization_id\",\n        \"#level\": \"level\",\n      },\n      ExpressionAttributeValues: {\n        \":organization_id\": data.organization_id,\n        \":level\": 2,\n      },\n    };\n    const result = await dynamoDb.scan(params).promise();\n    const response = {\n      statusCode: 200,\n      body: result.Items,\n    };\n\n    return res.status(200).json(response);\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/grade\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const updateParams = {\n      TableName: \"staff_list\",\n      Key: {\n        id: data.id,\n      },\n      ExpressionAttributeNames: {\n        \"#level\": \"level\",\n        \"#permission\": \"permission\",\n        \"#role\": \"role\",\n      },\n      ExpressionAttributeValues: {\n        \":level\": data.level,\n        \":permission\": data.permission,\n        \":role\": data.staff_role,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression:\n        \"SET #level = :level, #permission = :permission, #role = :role, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n    await dynamoDb.update(updateParams).promise();\n\n    const cognitoParams = {\n      UserPoolId: process.env.USER_POOL_ID,\n      Username: data.email,\n      UserAttributes: [\n        {\n          Name: \"custom:level\",\n          Value: data.level.toString(),\n        },\n        {\n          Name: \"custom:role\",\n          Value: data.role,\n        },\n      ],\n    };\n\n    await cognito.adminUpdateUserAttributes(cognitoParams).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Staff has been successfully down graded\",\n    });\n  } catch (error) {\n    res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/block\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const updateParams = {\n      TableName: \"staff_list\",\n      Key: {\n        id: data.id,\n      },\n      ExpressionAttributeNames: {\n        \"#block_state\": \"block_state\",\n      },\n      ExpressionAttributeValues: {\n        \":block_state\": data.block_state,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression: \"SET #block_state = :block_state, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    await dynamoDb.update(updateParams).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Staff block state has been successfully changed\",\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nexport default router;\n","import { Router } from \"express\";\n\nimport user from \"./user.route\";\n\nconst router = Router();\n\nrouter.use(\"/\", user);\n\nexport default router;\n","import AWS from \"aws-sdk\";\nimport { Router } from \"express\";\nconst uuid = require(\"uuid\");\n\nconst cognito = new AWS.CognitoIdentityServiceProvider();\nconst dynamoDb = new AWS.DynamoDB.DocumentClient();\n\nconst router = Router();\n\nrouter.post(\"/signup\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, error: \"Bad Request\" });\n    }\n    const { CLIENT_ID } = process.env;\n\n    const userId = uuid.v1();\n\n    const params = {\n      ClientId: CLIENT_ID,\n      Password: data.password,\n      Username: data.email,\n      UserAttributes: [\n        {\n          Name: \"email\",\n          Value: data.email,\n        },\n        {\n          Name: \"custom:user_id\",\n          Value: userId,\n        },\n        {\n          Name: \"custom:role\",\n          Value: \"owner\",\n        },\n        {\n          Name: \"custom:level\",\n          Value: \"1\",\n        },\n      ],\n    };\n    const response = await cognito.signUp(params).promise();\n\n    const Item = {\n      id: response.UserSub,\n      email: data.email,\n      state: \"free\",\n      createAt: timeStamp,\n      updateAt: timeStamp,\n    };\n\n    const organizationParam = {\n      TableName: \"organization\",\n      Item,\n    };\n\n    await dynamoDb.put(organizationParam).promise();\n\n    const pin = Math.floor(1000 + Math.random() * 9000);\n\n    var staffItems = {\n      id: userId,\n      organization_id: response.UserSub,\n      email: data.email,\n      name: data.fname,\n      first_name: data.firstName,\n      last_name: data.lastName,\n      avatar: process.env.DEFAULT_AVATAR,\n      pin: pin,\n      role: [\"owner\"],\n      level: 1,\n      type: 1,\n      site_id: null,\n      track_id: null,\n      clocked_state: false,\n      state: true,\n      last_start_date: null,\n      createAt: timeStamp,\n      updateAt: timeStamp,\n    };\n\n    const staffParams = {\n      TableName: \"staff_list\",\n      Item: staffItems,\n    };\n\n    await dynamoDb.put(staffParams).promise();\n\n    res.status(200).json({\n      statusCode: 200,\n      message: \"User registration successful\",\n      response: response,\n    });\n  } catch (error) {\n    console.error(\"An error ocurred:\", error);\n    res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/login\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n    const { USER_POOL_ID, CLIENT_ID } = process.env;\n    const params = {\n      AuthFlow: \"ADMIN_NO_SRP_AUTH\",\n      UserPoolId: USER_POOL_ID,\n      ClientId: CLIENT_ID,\n      AuthParameters: {\n        USERNAME: data.email,\n        PASSWORD: data.password,\n      },\n    };\n    const response = await cognito.adminInitiateAuth(params).promise();\n    res.status(200).json({\n      statusCode: 200,\n      message: \"Login succeed\",\n      token: response.AuthenticationResult.IdToken,\n    });\n  } catch (error) {\n    console.error(\"An error ocurred:\", error);\n    res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/confirmEmail\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n    const { CLIENT_ID } = process.env;\n    const params = {\n      ClientId: CLIENT_ID,\n      Username: data.email,\n      ConfirmationCode: data.confirmCode,\n    };\n    const response = await cognito.confirmSignUp(params).promise();\n\n    res.status(200).json({\n      statusCode: 200,\n      message: `Confirm succeffsul about ${data.email}`,\n      response: response,\n    });\n  } catch (error) {\n    console.error(\"An error occured:\", error);\n    res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/forgot\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n    const { CLIENT_ID } = process.env;\n\n    const params = {\n      ClientId: CLIENT_ID, // replace with your App client id\n      Username: data.useremail, // replace with the username\n    };\n\n    const response = await cognito.forgotPassword(params).promise();\n    return res.status(200).json({ statusCode: 200, response });\n  } catch (error) {\n    console.log(\"An error occured:\", error);\n    res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/setpassword\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({\n        statusCode: 400,\n        message: \"Bad Request\",\n      });\n    }\n\n    var verifyParams = {\n      UserPoolId: process.env.USER_POOL_ID, // replace with your User Pool ID\n      Username: data.email, // replace with the user's username\n      Password: data.password, // replace with the user's real password\n      Permanent: true,\n    };\n\n    const response = await cognito.adminSetUserPassword(verifyParams).promise();\n\n    return res.status(200).json({ statusCode: 200, response });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/confirmforgot\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({\n        statusCode: 400,\n        message: \"Bad Request\",\n      });\n    }\n\n    const { CLIENT_ID } = process.env;\n\n    const params = {\n      ClientId: CLIENT_ID, // replace with your App client id\n      Username: data.username, // replace with the username\n      ConfirmationCode: data.confirmationCode, // replace with the confirmation code\n      Password: data.newPassword, // replace with the new password\n    };\n\n    const response = await cognito.confirmForgotPassword(params).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      response,\n      message: \"Password has been changed successfully.\",\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/changeEmail\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n\n    if (!data) {\n      return res.status(200).json({\n        statusCode: 400,\n        message: \"Bad Request\",\n      });\n    }\n\n    const { USER_POOL_ID } = process.env;\n\n    const params = {\n      UserPoolId: USER_POOL_ID, // replace with your User Pool ID\n      Username: data.oldEmail, // replace with the old email\n      UserAttributes: [\n        {\n          Name: \"email\",\n          Value: data.newEmail, // replace with the new email\n        },\n        {\n          Name: \"email_verified\",\n          Value: \"true\",\n        },\n      ],\n    };\n\n    const response = await cognito.adminUpdateUserAttributes(params).promise();\n\n    const staffParams = {\n      TableName: \"staff_list\",\n      Key: {\n        id: data.id,\n      },\n      ExpressionAttributeNames: {\n        \"#email\": \"email\",\n      },\n      ExpressionAttributeValues: {\n        \":email\": data.newEmail,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression: \"SET #email = :email, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    await dynamoDb.update(staffParams).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Email has been successfully updated\",\n      data: response,\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nexport default router;\n","import { Router } from \"express\";\n\nconst router = Router();\n\nrouter.get(\"/\", async (req, res) => {\n  try {\n    res.status(200).json([]);\n  } catch (error) {\n    console.error(\"An error ocurred:\", error);\n    res.status(200).json(error);\n  }\n});\n\nrouter.get(\"/:id\", async (req, res) => {\n  try {\n    res.status(200).json({});\n  } catch (error) {\n    console.error(\"An error ocurred:\", error);\n    res.status(500).json(error);\n  }\n});\n\nrouter.post(\"/\", async (req, res) => {\n  try {\n    res.status(201).json({});\n  } catch (error) {\n    console.error(\"An error occurred:\", error);\n    res.status(500).json(error);\n  }\n});\n\nrouter.put(\"/:id\", async (req, res) => {\n  try {\n    res.status(200).json({});\n  } catch (error) {\n    console.error(\"An error occurred:\", error);\n    res.status(500).json(error);\n  }\n});\n\nrouter.delete(\"/:id\", async (req, res) => {\n  try {\n    res.status(200).json({});\n  } catch (error) {\n    console.error(\"An error occurred:\", error);\n    res.status(500).json(error);\n  }\n});\n\nexport default router;\n","import { Router } from \"express\";\n\nimport books from \"./books.route\";\n\nconst router = Router();\n\nrouter.use(\"/books\", books);\n\nexport default router;\n","module.exports = require(\"aws-sdk\");","module.exports = require(\"body-parser\");","module.exports = require(\"cors\");","module.exports = require(\"express\");","module.exports = require(\"fs\");","module.exports = require(\"moment\");","module.exports = require(\"multer\");","module.exports = require(\"serverless-http\");","module.exports = require(\"uuid\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import express from \"express\";\nimport serverless from \"serverless-http\";\nimport cors from \"cors\";\nimport bodyParser from \"body-parser\";\n\nimport routes from \"./routes\";\n\nconst app = express();\n\napp.use(cors());\n\napp.use(bodyParser.json({ limit: \"10mb\" }));\napp.use(bodyParser.urlencoded({ limit: \"10mb\", extended: true }));\n\napp.use(express.json());\n\napp.use(\"/api\", routes);\n\napp.use((req, res, next) => {\n  res.status(404).send();\n});\n\napp.use((err, req, res, next) => {\n  res.status(err.status || 500).send();\n});\n\nexport const handler = serverless(app);\n"],"names":["AWS","Router","uuid","require","cognito","CognitoIdentityServiceProvider","dynamoDb","DynamoDB","DocumentClient","s3bucket","S3","ddb","apiVersion","router","get","req","res","companyParams","TableName","companyData","scan","promise","orgParams","orgData","status","json","statusCode","data","error","post","body","message","orgParam","Key","id","orgId","delete","companyParam","companyId","params","FilterExpression","ExpressionAttributeNames","ExpressionAttributeValues","scanResults","items","Items","forEach","item","push","ExclusiveStartKey","LastEvaluatedKey","table_name","deleteTable","deleteParams","console","log","userParam","UserPoolId","process","env","USER_POOL_ID","Username","email","adminDeleteUser","urlParts","URL","docFile","pathname","split","key","slice","join","replaceAll","Bucket","S3_BUCKET_NAME","deleteObject","admin","use","moment","roundToNearestFiveMinutes","date","round","ms","roundedDate","Date","Math","getTime","site","Item","organization_id","company","response","result","timeStamp","update_state","siteParams","UpdateExpression","ReturnValues","update","uid","v1","dateParams","tableName","track_id","staff_id","staff","format","start_date","end_date","total_time","name","createdAt","updateAt","put","stsatusCode","Attributes","differenceInMs","last_start_date","updateParams","record_id","addParams","updateUserParam","avatar","DEFAULT_AVATAR","site_id","type","level","clocked_state","break_state","state","createAt","client","organizationId","city","country","address","postcode","postCode","telephone","telePhone","country_state","timeZone","logo","DEFAULT_COMAPNY_LOGO","date_format","location","buf","Buffer","from","replace","Body","ACL","ContentEncoding","ContentType","uploadData","upload","Location","rdname","dateFormat","organizationParams","imageParam","break","form","messages","ticketData","contact","KeySchema","AttributeName","KeyType","AttributeDefinitions","AttributeType","BillingMode","createTable","db","file","base64Data","decodedFile","docName","docType","docDate","expireDate","assignType","assignValue","documentParams","resultDocList","filter","role","includes","userId","sietId","document","fs","multer","storage","memoryStorage","form_name","submit_label","form_elements","color","updateParam","delete_param","allocateParam","allocated_site","allocated_staff","single","base","originalname","mimetype","photo","fetchParam","allocate_id","user","setting","report","remote","profile","logs","gender","birth","s3params","utils","responseData","staffParams","pin","staffHistoryList","queryAndDeleteDynamoDB","dateList","map","index","track_type","Promise","all","origin_date","update_info","getObject","toString","roleName","site_report","staff_report","showDay","description","radius","lat","lng","ses","SES","floor","random","characters","charactersLength","length","i","charAt","companyInfo","TemporaryPassword","UserAttributes","Name","Value","MessageAction","adminCreateUser","inviteLink","emailParams","Destination","ToAddresses","Message","Html","Charset","Data","Subject","companyName","Source","sendEmail","permissionParam","permission","staff_role","cognitoParams","adminUpdateUserAttributes","block_state","CLIENT_ID","ClientId","Password","password","signUp","UserSub","organizationParam","staffItems","fname","first_name","firstName","last_name","lastName","AuthFlow","AuthParameters","USERNAME","PASSWORD","adminInitiateAuth","token","AuthenticationResult","IdToken","ConfirmationCode","confirmCode","confirmSignUp","useremail","forgotPassword","verifyParams","Permanent","adminSetUserPassword","username","confirmationCode","newPassword","confirmForgotPassword","oldEmail","newEmail","books","express","serverless","cors","bodyParser","routes","app","limit","urlencoded","extended","next","send","err","handler"],"sourceRoot":""}