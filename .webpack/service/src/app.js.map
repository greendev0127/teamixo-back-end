{"version":3,"file":"src/app.js","mappings":"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;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEArD,MAAM,CAACC,IAAI,CAAC,cAAc,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAC9C,IAAI;IACF,MAAMoH,SAAS,GAAG,IAAIT,IAAI,CAAC,CAAC,CAACE,OAAO,CAAC,CAAC;IACtC,MAAM5G,IAAI,GAAGF,GAAG,CAACG,IAAI;IACrB,IAAI,CAACD,IAAI,EAAE;MACT,OAAOD,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,UAAU,EAAE,GAAG;QAAEC,OAAO,EAAE;MAAc,CAAC,CAAC;IAC1E;IAEA,MAAMgB,OAAO,GAAGrB,IAAI,CAACwR,GAAG,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","sources":["webpack://ai-image-generator/./src/routes/admin/admin.route.js","webpack://ai-image-generator/./src/routes/admin/index.js","webpack://ai-image-generator/./src/routes/client/client.route.js","webpack://ai-image-generator/./src/routes/client/index.js","webpack://ai-image-generator/./src/routes/company/company.route.js","webpack://ai-image-generator/./src/routes/company/index.js","webpack://ai-image-generator/./src/routes/contact/contact.route.js","webpack://ai-image-generator/./src/routes/contact/index.js","webpack://ai-image-generator/./src/routes/custom/custom.route.js","webpack://ai-image-generator/./src/routes/custom/index.js","webpack://ai-image-generator/./src/routes/db/db.route.js","webpack://ai-image-generator/./src/routes/db/index.js","webpack://ai-image-generator/./src/routes/document/document.route.js","webpack://ai-image-generator/./src/routes/document/index.js","webpack://ai-image-generator/./src/routes/form/form.route.js","webpack://ai-image-generator/./src/routes/form/index.js","webpack://ai-image-generator/./src/routes/index.js","webpack://ai-image-generator/./src/routes/logs/index.js","webpack://ai-image-generator/./src/routes/logs/log.route.js","webpack://ai-image-generator/./src/routes/migration/index.js","webpack://ai-image-generator/./src/routes/migration/migration.route.js","webpack://ai-image-generator/./src/routes/payment/index.js","webpack://ai-image-generator/./src/routes/payment/payment.route.js","webpack://ai-image-generator/./src/routes/profile/index.js","webpack://ai-image-generator/./src/routes/profile/profile.route.js","webpack://ai-image-generator/./src/routes/remote/index.js","webpack://ai-image-generator/./src/routes/remote/remote.route.js","webpack://ai-image-generator/./src/routes/report/index.js","webpack://ai-image-generator/./src/routes/report/report.route.js","webpack://ai-image-generator/./src/routes/role/index.js","webpack://ai-image-generator/./src/routes/role/role.route.js","webpack://ai-image-generator/./src/routes/setting/index.js","webpack://ai-image-generator/./src/routes/setting/setting.route.js","webpack://ai-image-generator/./src/routes/site/index.js","webpack://ai-image-generator/./src/routes/site/site.route.js","webpack://ai-image-generator/./src/routes/staff/index.js","webpack://ai-image-generator/./src/routes/staff/staff.route.js","webpack://ai-image-generator/./src/routes/user/index.js","webpack://ai-image-generator/./src/routes/user/user.route.js","webpack://ai-image-generator/./src/routes/v1/admin/company.js","webpack://ai-image-generator/./src/routes/v1/admin/index.js","webpack://ai-image-generator/./src/routes/v1/books.route.js","webpack://ai-image-generator/./src/routes/v1/index.js","webpack://ai-image-generator/./src/routes/v1/server/auth.js","webpack://ai-image-generator/./src/routes/v1/server/company.js","webpack://ai-image-generator/./src/routes/v1/server/department.js","webpack://ai-image-generator/./src/routes/v1/server/index.js","webpack://ai-image-generator/./src/routes/v1/server/report.js","webpack://ai-image-generator/./src/routes/v1/server/service.js","webpack://ai-image-generator/./src/routes/v1/server/staff.js","webpack://ai-image-generator/./src/routes/v1/utils.js","webpack://ai-image-generator/./src/routes/v1/utils/upload-util.js","webpack://ai-image-generator/external commonjs \"aws-sdk\"","webpack://ai-image-generator/external commonjs \"body-parser\"","webpack://ai-image-generator/external commonjs \"cors\"","webpack://ai-image-generator/external commonjs \"express\"","webpack://ai-image-generator/external commonjs \"fs\"","webpack://ai-image-generator/external commonjs \"jsonwebtoken\"","webpack://ai-image-generator/external commonjs \"moment\"","webpack://ai-image-generator/external commonjs \"multer\"","webpack://ai-image-generator/external commonjs \"serverless-http\"","webpack://ai-image-generator/external commonjs \"stripe\"","webpack://ai-image-generator/external commonjs \"uuid\"","webpack://ai-image-generator/webpack/bootstrap","webpack://ai-image-generator/webpack/runtime/compat get default export","webpack://ai-image-generator/webpack/runtime/define property getters","webpack://ai-image-generator/webpack/runtime/hasOwnProperty shorthand","webpack://ai-image-generator/webpack/runtime/make namespace object","webpack://ai-image-generator/./src/app.js"],"sourcesContent":["import AWS from \"aws-sdk\";\nimport { Router } from \"express\";\nconst uuid = require(\"uuid\");\n\nconst cognito = new AWS.CognitoIdentityServiceProvider();\nconst dynamoDb = new AWS.DynamoDB.DocumentClient();\nconst s3bucket = new AWS.S3();\nvar ddb = new AWS.DynamoDB({ apiVersion: \"2012-08-10\" });\n\nconst router = Router();\n\nrouter.post(\"/signup\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(400).json({ statusCode: 400, message: \"Bad Request!\" });\n    }\n\n    const { password, email, name } = data;\n\n    const signUpParams = {\n      ClientId: process.env.ADMIN_CLIENT_ID,\n      Username: email,\n      Password: password,\n      UserAttributes: [\n        { Name: \"email\", Value: email },\n        { Name: \"name\", Value: name },\n      ],\n    };\n\n    const signUpResponse = await cognito.signUp(signUpParams).promise();\n\n    return res.status(200).json({\n      message: \"User signed up successfully\",\n      user: signUpResponse.UserSub,\n    });\n  } catch (err) {\n    console.log(\"Error signing up user:\", err);\n    return res.status(500).json({ message: err.message });\n  }\n});\n\nrouter.post(\"/signin\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(400).json({ statusCode: 400, message: \"Bad Request!\" });\n    }\n\n    const { password, email } = data;\n\n    const signInParams = {\n      AuthFlow: \"USER_PASSWORD_AUTH\",\n      ClientId: process.env.ADMIN_CLIENT_ID,\n      AuthParameters: {\n        USERNAME: email,\n        PASSWORD: password,\n      },\n    };\n\n    const signInResponse = await cognito.initiateAuth(signInParams).promise();\n\n    return res.status(200).json({\n      message: \"User signed in successfully\",\n      accessToken: signInResponse.AuthenticationResult.AccessToken,\n      idToken: signInResponse.AuthenticationResult.IdToken,\n    });\n  } catch (err) {\n    console.log(\"Error signing up user:\", err);\n    return res.status(500).json({ message: err.message });\n  }\n});\n\nrouter.post(\"/confirmSignUp\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(400).json({ statusCode: 400, message: \"Bad Request!\" });\n    }\n\n    const { verificationCode, email } = data;\n\n    const confirmSignUpParams = {\n      ClientId: process.env.ADMIN_CLIENT_ID,\n      Username: email,\n      ConfirmationCode: verificationCode,\n    };\n\n    await cognito.confirmSignUp(confirmSignUpParams).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Email address confirmed successfully\",\n    });\n  } catch (err) {\n    console.log(\"Error confirming email address:\", err);\n    return res.status(500).json({ message: err.message });\n  }\n});\n\nrouter.get(\"/getUser\", async (req, res) => {\n  try {\n    const accessToken = req.headers.authorization.split(\" \")[1];\n\n    const getUserParams = {\n      AccessToken: accessToken,\n    };\n\n    const user = await cognito.getUser(getUserParams).promise();\n\n    return res.status(200).json({ user });\n  } catch (err) {\n    console.error(\"Error retrieving user:\", err);\n\n    return res.status(500).json({ message: err.message });\n  }\n});\n\nrouter.get(\"/fetchdata\", async (req, res) => {\n  try {\n    const fetchUserParams = {\n      TableName: \"staff_list\",\n    };\n\n    const staffData = await dynamoDb.scan(fetchUserParams).promise();\n\n    const fetchSiteParams = {\n      TableName: \"site_list\",\n    };\n\n    const siteData = await dynamoDb.scan(fetchSiteParams).promise();\n\n    const fetchCompanyParams = {\n      TableName: \"company_list\",\n    };\n\n    const companyData = await dynamoDb.scan(fetchCompanyParams).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      data: {\n        staffData: staffData,\n        siteData,\n        siteData,\n        companyData,\n        companyData,\n      },\n    });\n  } catch (err) {\n    console.log(\"error\", err);\n    return res.status(404).json(error);\n  }\n});\n\nrouter.get(\"/companies\", async (req, res) => {\n  try {\n    const companyParams = {\n      TableName: \"company_list\",\n    };\n\n    const companyData = await dynamoDb.scan(companyParams).promise();\n\n    const orgParams = {\n      TableName: \"organization\",\n    };\n\n    const orgData = await dynamoDb.scan(orgParams).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      data: {\n        companyData: companyData,\n        orgData: orgData,\n      },\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/deleteowner\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const orgParam = {\n      TableName: \"organization\",\n      Key: {\n        id: data.orgId,\n      },\n    };\n\n    await dynamoDb.delete(orgParam).promise();\n\n    const companyParam = {\n      TableName: \"company_list\",\n      Key: {\n        id: data.companyId,\n      },\n    };\n\n    await dynamoDb.delete(companyParam).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Owner data has been successfully deleted\",\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/deletesites\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const params = {\n      TableName: \"site_list\",\n      FilterExpression: \"#organization_id = :organization_id\",\n      ExpressionAttributeNames: {\n        \"#organization_id\": \"organization_id\",\n      },\n      ExpressionAttributeValues: {\n        \":organization_id\": data.orgId, // Replace 'YourId' with the id you want to delete\n      },\n    };\n\n    const scanResults = [];\n    let items;\n\n    do {\n      items = await dynamoDb.scan(params).promise();\n      items.Items.forEach((item) => scanResults.push(item));\n      params.ExclusiveStartKey = items.LastEvaluatedKey;\n    } while (typeof items.LastEvaluatedKey !== \"undefined\");\n\n    for (const item of scanResults) {\n      const params = {\n        TableName: item.table_name,\n      };\n\n      await ddb.deleteTable(params).promise();\n      const deleteParams = {\n        TableName: \"site_list\",\n        Key: {\n          id: item.id,\n        },\n      };\n      await dynamoDb.delete(deleteParams).promise();\n    }\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Sites data has been successfully deleted\",\n    });\n  } catch (error) {\n    console.log(error);\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/deleterole\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const params = {\n      TableName: \"role_list\",\n      FilterExpression: \"#organization_id = :organization_id\",\n      ExpressionAttributeNames: {\n        \"#organization_id\": \"organization_id\",\n      },\n      ExpressionAttributeValues: {\n        \":organization_id\": data.orgId, // Replace 'YourId' with the id you want to delete\n      },\n    };\n\n    const scanResults = [];\n    let items;\n\n    do {\n      items = await dynamoDb.scan(params).promise();\n      items.Items.forEach((item) => scanResults.push(item));\n      params.ExclusiveStartKey = items.LastEvaluatedKey;\n    } while (typeof items.LastEvaluatedKey !== \"undefined\");\n\n    for (const item of scanResults) {\n      const deleteParams = {\n        TableName: \"role_list\",\n        Key: {\n          id: item.id,\n        },\n      };\n      await dynamoDb.delete(deleteParams).promise();\n    }\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Role data has been successfully deleted\",\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/deletestaffs\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const params = {\n      TableName: \"staff_list\",\n      FilterExpression: \"#organization_id = :organization_id\",\n      ExpressionAttributeNames: {\n        \"#organization_id\": \"organization_id\",\n      },\n      ExpressionAttributeValues: {\n        \":organization_id\": data.orgId, // Replace 'YourId' with the id you want to delete\n      },\n    };\n\n    const scanResults = [];\n    let items;\n\n    do {\n      items = await dynamoDb.scan(params).promise();\n      items.Items.forEach((item) => scanResults.push(item));\n      params.ExclusiveStartKey = items.LastEvaluatedKey;\n    } while (typeof items.LastEvaluatedKey !== \"undefined\");\n\n    for (const item of scanResults) {\n      const userParam = {\n        UserPoolId: process.env.USER_POOL_ID,\n        Username: item.email,\n      };\n\n      await cognito.adminDeleteUser(userParam).promise();\n\n      const deleteParams = {\n        TableName: \"staff_list\",\n        Key: {\n          id: item.id,\n        },\n      };\n      await dynamoDb.delete(deleteParams).promise();\n    }\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Role data has been successfully deleted\",\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/deletedocs\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const params = {\n      TableName: \"documents\",\n      FilterExpression: \"#organization_id = :organization_id\",\n      ExpressionAttributeNames: {\n        \"#organization_id\": \"organization_id\",\n      },\n      ExpressionAttributeValues: {\n        \":organization_id\": data.orgId, // Replace 'YourId' with the id you want to delete\n      },\n    };\n\n    const scanResults = [];\n    let items;\n\n    do {\n      items = await dynamoDb.scan(params).promise();\n      items.Items.forEach((item) => scanResults.push(item));\n      params.ExclusiveStartKey = items.LastEvaluatedKey;\n    } while (typeof items.LastEvaluatedKey !== \"undefined\");\n\n    for (const item of scanResults) {\n      const urlParts = new URL(item.docFile).pathname.split(\"/\");\n      const key = urlParts.slice(1).join(\"/\").replaceAll(\"%20\", \" \");\n\n      const params = {\n        Bucket: process.env.S3_BUCKET_NAME, // replace with your bucket name\n        Key: key, // replace with the image key\n      };\n\n      await s3bucket.deleteObject(params).promise();\n\n      const deleteParams = {\n        TableName: \"documents\",\n        Key: {\n          id: item.id,\n        },\n      };\n      await dynamoDb.delete(deleteParams).promise();\n    }\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Role data has been successfully deleted\",\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nexport default router;\n","import { Router } from \"express\";\nimport admin from \"./admin.route\";\n\nconst router = Router();\n\nrouter.use(\"/\", admin);\n\nexport default router;\n","import AWS from \"aws-sdk\";\nimport { Router } from \"express\";\nimport moment from \"moment\";\nconst uuid = require(\"uuid\");\n\nconst dynamoDb = new AWS.DynamoDB.DocumentClient();\n\nconst router = Router();\n\nfunction roundToNearestFiveMinutes(date, round) {\n  const ms = 1000 * 60 * round; // convert 5 minutes to milliseconds\n  const roundedDate = new Date(Math.round(date / ms) * ms);\n  return roundedDate.getTime();\n}\n\nrouter.post(\"/getsite\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request!\" });\n    }\n\n    const params = {\n      TableName: \"site_list\",\n      Key: {\n        id: data.id,\n      },\n    };\n\n    const site = await dynamoDb.get(params).promise();\n\n    const companyParams = {\n      TableName: \"company_list\",\n      FilterExpression: \"#organization_id = :organization_id\",\n      ExpressionAttributeNames: {\n        \"#organization_id\": \"organization_id\",\n      },\n      ExpressionAttributeValues: {\n        \":organization_id\": site.Item.organization_id,\n      },\n    };\n\n    const company = await dynamoDb.scan(companyParams).promise();\n\n    const response = {\n      statusCode: 200,\n      body: {\n        site: site,\n        company: company,\n      },\n    };\n\n    return res.status(200).json(response);\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/stafflist\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request!\" });\n    }\n\n    const params = {\n      TableName: \"staff_list\",\n      FilterExpression: \"#organization_id = :organization_id\",\n      ExpressionAttributeNames: {\n        \"#organization_id\": \"organization_id\",\n      },\n      ExpressionAttributeValues: {\n        \":organization_id\": data.organization_id,\n      },\n    };\n    const result = await dynamoDb.scan(params).promise();\n    const response = {\n      statusCode: 200,\n      body: result.Items,\n    };\n\n    return res.status(200).json(response);\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/trigger\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request!\" });\n    }\n\n    const params = {\n      TableName: \"organization\",\n      Key: {\n        id: data.id,\n      },\n    };\n\n    const result = await dynamoDb.get(params).promise();\n\n    if (result.Item.update_state) {\n      const siteParams = {\n        TableName: \"organization\",\n        Key: {\n          id: data.id,\n        },\n        ExpressionAttributeNames: {\n          \"#update_state\": \"update_state\",\n        },\n        ExpressionAttributeValues: {\n          \":update_state\": false,\n          \":updateAt\": timeStamp,\n        },\n        UpdateExpression:\n          \"SET #update_state = :update_state, updateAt = :updateAt\",\n        ReturnValues: \"ALL_NEW\",\n      };\n\n      await dynamoDb.update(siteParams).promise();\n    }\n\n    const response = {\n      statusCode: 200,\n      body: result,\n    };\n\n    return res.status(200).json(response);\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/start\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request!\" });\n    }\n\n    const uid = timeStamp.toString();\n\n    const dateParams = {\n      TableName: data.tableName,\n      Item: {\n        id: uid,\n        track_id: uid,\n        staff_id: data.staff.id,\n        date: moment(timeStamp).format(\"YYYY-MM-DD\"),\n        workPosition: data.workPosition,\n        start_date: roundToNearestFiveMinutes(timeStamp, data.round),\n        end_date: null,\n        total_time: null,\n        name: data.staff.name,\n        status: \"start\",\n        createdAt: timeStamp,\n        updateAt: timeStamp,\n      },\n    };\n\n    await dynamoDb.put(dateParams).promise();\n\n    const params = {\n      TableName: \"staff_list\",\n      Key: {\n        id: data.staff.id,\n      },\n      ExpressionAttributeNames: {\n        \"#clocked_state\": \"clocked_state\",\n        \"#break_state\": \"break_state\",\n        \"#track_id\": \"track_id\",\n        \"#record_id\": \"record_id\",\n        \"#site_id\": \"site_id\",\n        \"#last_start_date\": \"last_start_date\",\n      },\n      ExpressionAttributeValues: {\n        \":clocked_state\": true,\n        \":break_state\": false,\n        \":track_id\": uid,\n        \":record_id\": uid,\n        \":site_id\": data.tableName,\n        \":last_start_date\": roundToNearestFiveMinutes(timeStamp, data.round),\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression:\n        \"SET #clocked_state = :clocked_state, #break_state = :break_state, #track_id = :track_id, #record_id = :record_id, #site_id = :site_id, #last_start_date = :last_start_date, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    const result = await dynamoDb.update(params).promise();\n\n    const response = {\n      stsatusCode: 200,\n      body: result.Attributes,\n    };\n\n    return res.status(200).json(response);\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/break\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request!\" });\n    }\n    //calculate the total time from start work to start break\n    var differenceInMs =\n      roundToNearestFiveMinutes(timeStamp, data.round) -\n      data.staff.last_start_date;\n\n    var total_time = differenceInMs;\n\n    const uid = timeStamp.toString();\n    // update the start state record with total time and end time\n    const updateParams = {\n      TableName: data.tableName,\n      Key: {\n        id: data.staff.record_id,\n      },\n      ExpressionAttributeNames: {\n        \"#end_date\": \"end_date\",\n        \"#total_time\": \"total_time\",\n      },\n      ExpressionAttributeValues: {\n        \":end_date\": roundToNearestFiveMinutes(timeStamp, data.round),\n        \":total_time\": total_time,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression:\n        \"SET #end_date = :end_date, #total_time = :total_time, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    await dynamoDb.update(updateParams).promise();\n\n    // add new record to report table with break state\n    const addParams = {\n      TableName: data.tableName,\n      Item: {\n        id: uid,\n        track_id: data.staff.track_id,\n        staff_id: data.staff.id,\n        workPosition: data.workPosition,\n        date: moment(timeStamp).format(\"YYYY-MM-DD\"),\n        start_date: roundToNearestFiveMinutes(timeStamp, data.round),\n        end_date: null,\n        total_time: null,\n        name: data.staff.name,\n        status: \"break\",\n        createdAt: timeStamp,\n        updateAt: timeStamp,\n      },\n    };\n\n    await dynamoDb.put(addParams).promise();\n\n    // update user with break state\n    const updateUserParam = {\n      TableName: \"staff_list\",\n      Key: {\n        id: data.staff.id,\n      },\n      ExpressionAttributeNames: {\n        \"#break_state\": \"break_state\",\n        \"#record_id\": \"record_id\",\n        \"#last_start_date\": \"last_start_date\",\n      },\n      ExpressionAttributeValues: {\n        \":break_state\": true,\n        \":record_id\": uid,\n        \":last_start_date\": roundToNearestFiveMinutes(timeStamp, data.round),\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression:\n        \"SET #break_state = :break_state, #record_id = :record_id, #last_start_date = :last_start_date, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    const result = await dynamoDb.update(updateUserParam).promise();\n    const response = {\n      stsatusCode: 200,\n      body: result.Attributes,\n    };\n\n    return res.status(200).json(response);\n  } catch (error) {\n    console.log(error);\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/restart\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request!\" });\n    }\n    //calculate the total time from start work to start break\n    var differenceInMs =\n      roundToNearestFiveMinutes(timeStamp, data.round) -\n      data.staff.last_start_date;\n\n    var total_time = differenceInMs;\n\n    const uid = timeStamp.toString();\n    // update the start state record with total time and end time\n    const updateParams = {\n      TableName: data.tableName,\n      Key: {\n        id: data.staff.record_id,\n      },\n      ExpressionAttributeNames: {\n        \"#end_date\": \"end_date\",\n        \"#total_time\": \"total_time\",\n      },\n      ExpressionAttributeValues: {\n        \":end_date\": roundToNearestFiveMinutes(timeStamp, data.round),\n        \":total_time\": total_time,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression:\n        \"SET #end_date = :end_date, #total_time = :total_time, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    await dynamoDb.update(updateParams).promise();\n\n    // add new record to report table with break state\n    const addParams = {\n      TableName: data.tableName,\n      Item: {\n        id: uid,\n        track_id: data.staff.track_id,\n        staff_id: data.staff.id,\n        date: moment(timeStamp).format(\"YYYY-MM-DD\"),\n        start_date: roundToNearestFiveMinutes(timeStamp, data.round),\n        end_date: null,\n        total_time: null,\n        name: data.staff.name,\n        status: \"restart\",\n        createdAt: timeStamp,\n        updateAt: timeStamp,\n      },\n    };\n\n    await dynamoDb.put(addParams).promise();\n\n    const updateUserParam = {\n      TableName: \"staff_list\",\n      Key: {\n        id: data.staff.id,\n      },\n      ExpressionAttributeNames: {\n        \"#break_state\": \"break_state\",\n        \"#record_id\": \"record_id\",\n        \"#last_start_date\": \"last_start_date\",\n      },\n      ExpressionAttributeValues: {\n        \":break_state\": false,\n        \":record_id\": uid,\n        \":last_start_date\": roundToNearestFiveMinutes(timeStamp, data.round),\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression:\n        \"SET #break_state = :break_state, #record_id = :record_id, #last_start_date = :last_start_date, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    const result = await dynamoDb.update(updateUserParam).promise();\n    const response = {\n      stsatusCode: 200,\n      body: result.Attributes,\n    };\n\n    return res.status(200).json(response);\n  } catch (error) {\n    console.log(error);\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/end\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request!\" });\n    }\n    //calculate the total time from start work to start break\n    var differenceInMs =\n      roundToNearestFiveMinutes(timeStamp, data.round) -\n      data.staff.last_start_date;\n\n    var total_time = differenceInMs;\n\n    const uid = timeStamp.toString();\n    // update the start state record with total time and end time\n    const updateParams = {\n      TableName: data.tableName,\n      Key: {\n        id: data.staff.record_id,\n      },\n      ExpressionAttributeNames: {\n        \"#end_date\": \"end_date\",\n        \"#total_time\": \"total_time\",\n      },\n      ExpressionAttributeValues: {\n        \":end_date\": roundToNearestFiveMinutes(timeStamp, data.round),\n        \":total_time\": total_time,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression:\n        \"SET #end_date = :end_date, #total_time = :total_time, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    await dynamoDb.update(updateParams).promise();\n\n    // add new record to report table with break state\n    const addParams = {\n      TableName: data.tableName,\n      Item: {\n        id: uid,\n        track_id: data.staff.track_id,\n        staff_id: data.staff.id,\n        date: moment(timeStamp).format(\"YYYY-MM-DD\"),\n        start_date: roundToNearestFiveMinutes(timeStamp, data.round),\n        total_time: 0,\n        name: data.staff.name,\n        status: \"end\",\n        createdAt: timeStamp,\n        updateAt: timeStamp,\n      },\n    };\n\n    await dynamoDb.put(addParams).promise();\n\n    const updateUserParam = {\n      TableName: \"staff_list\",\n      Key: {\n        id: data.staff.id,\n      },\n      ExpressionAttributeNames: {\n        \"#clocked_state\": \"clocked_state\",\n        \"#break_state\": \"break_state\",\n        \"#record_id\": \"record_id\",\n        \"#site_id\": \"site_id\",\n        \"#last_start_date\": \"last_start_date\",\n      },\n      ExpressionAttributeValues: {\n        \":clocked_state\": false,\n        \":break_state\": false,\n        \":record_id\": null,\n        \":site_id\": null,\n        \":last_start_date\": null,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression:\n        \"SET #clocked_state = :clocked_state, #break_state = :break_state, #record_id = :record_id, #site_id = :site_id, #last_start_date = :last_start_date, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    const result = await dynamoDb.update(updateUserParam).promise();\n    const response = {\n      stsatusCode: 200,\n      body: result.Attributes,\n    };\n\n    return res.status(200).json(response);\n  } catch (error) {\n    console.log(error);\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/start-v1\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request!\" });\n    }\n\n    const checkParams = {\n      TableName: \"staff_list\",\n      Key: {\n        id: data.staff.id,\n      },\n    };\n\n    const checkResult = await dynamoDb.get(checkParams).promise();\n\n    if (checkResult.Item.clocked_state) {\n      return res.status(200).json({\n        statusCode: 400,\n        message: \"This staff already clocked in.\",\n      });\n    }\n\n    const uid = timeStamp.toString();\n\n    const dateParams = {\n      TableName: data.tableName,\n      Item: {\n        id: uid,\n        track_id: uid,\n        staff_id: data.staff.id,\n        site_id: data.siteId,\n        date: moment(timeStamp).format(\"YYYY-MM-DD\"),\n        workPosition: data.workPosition,\n        start_date: roundToNearestFiveMinutes(timeStamp, data.round),\n        end_date: null,\n        total_time: null,\n        name: data.staff.name,\n        status: \"start\",\n        createdAt: timeStamp,\n        updateAt: timeStamp,\n      },\n    };\n\n    await dynamoDb.put(dateParams).promise();\n\n    const params = {\n      TableName: \"staff_list\",\n      Key: {\n        id: data.staff.id,\n      },\n      ExpressionAttributeNames: {\n        \"#clocked_state\": \"clocked_state\",\n        \"#break_state\": \"break_state\",\n        \"#track_id\": \"track_id\",\n        \"#record_id\": \"record_id\",\n        \"#site_id\": \"site_id\",\n        \"#last_start_date\": \"last_start_date\",\n      },\n      ExpressionAttributeValues: {\n        \":clocked_state\": true,\n        \":break_state\": false,\n        \":track_id\": uid,\n        \":record_id\": uid,\n        \":site_id\": data.siteId,\n        \":last_start_date\": roundToNearestFiveMinutes(timeStamp, data.round),\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression:\n        \"SET #clocked_state = :clocked_state, #break_state = :break_state, #track_id = :track_id, #record_id = :record_id, #site_id = :site_id, #last_start_date = :last_start_date, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    const result = await dynamoDb.update(params).promise();\n\n    const response = {\n      stsatusCode: 200,\n      body: result.Attributes,\n    };\n\n    return res.status(200).json(response);\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/break-v1\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request!\" });\n    }\n\n    const checkParams = {\n      TableName: \"staff_list\",\n      Key: {\n        id: data.staff.id,\n      },\n    };\n\n    const checkResult = await dynamoDb.get(checkParams).promise();\n\n    if (!checkResult.Item.clocked_state) {\n      return res.status(200).json({\n        statusCode: 400,\n        message: \"This staff doesn't clock in yet.\",\n      });\n    } else if (checkResult.Item.break_state) {\n      return res.status(200).json({\n        statusCode: 400,\n        message: \"This staff break now!\",\n      });\n    }\n    //calculate the total time from start work to start break\n    var differenceInMs =\n      roundToNearestFiveMinutes(timeStamp, data.round) -\n      data.staff.last_start_date;\n\n    var total_time = differenceInMs;\n\n    const uid = timeStamp.toString();\n    // update the start state record with total time and end time\n    const updateParams = {\n      TableName: data.tableName,\n      Key: {\n        id: data.staff.record_id,\n      },\n      ExpressionAttributeNames: {\n        \"#end_date\": \"end_date\",\n        \"#total_time\": \"total_time\",\n      },\n      ExpressionAttributeValues: {\n        \":end_date\": roundToNearestFiveMinutes(timeStamp, data.round),\n        \":total_time\": total_time,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression:\n        \"SET #end_date = :end_date, #total_time = :total_time, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    await dynamoDb.update(updateParams).promise();\n\n    // add new record to report table with break state\n    const addParams = {\n      TableName: data.tableName,\n      Item: {\n        id: uid,\n        track_id: data.staff.track_id,\n        staff_id: data.staff.id,\n        site_id: data.siteId,\n        workPosition: data.workPosition,\n        date: moment(timeStamp).format(\"YYYY-MM-DD\"),\n        start_date: roundToNearestFiveMinutes(timeStamp, data.round),\n        end_date: null,\n        total_time: null,\n        name: data.staff.name,\n        status: \"break\",\n        createdAt: timeStamp,\n        updateAt: timeStamp,\n      },\n    };\n\n    await dynamoDb.put(addParams).promise();\n\n    // update user with break state\n    const updateUserParam = {\n      TableName: \"staff_list\",\n      Key: {\n        id: data.staff.id,\n      },\n      ExpressionAttributeNames: {\n        \"#break_state\": \"break_state\",\n        \"#record_id\": \"record_id\",\n        \"#last_start_date\": \"last_start_date\",\n      },\n      ExpressionAttributeValues: {\n        \":break_state\": true,\n        \":record_id\": uid,\n        \":last_start_date\": roundToNearestFiveMinutes(timeStamp, data.round),\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression:\n        \"SET #break_state = :break_state, #record_id = :record_id, #last_start_date = :last_start_date, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    const result = await dynamoDb.update(updateUserParam).promise();\n    const response = {\n      stsatusCode: 200,\n      body: result.Attributes,\n    };\n\n    return res.status(200).json(response);\n  } catch (error) {\n    console.log(error);\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/restart-v1\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request!\" });\n    }\n\n    const checkParams = {\n      TableName: \"staff_list\",\n      Key: {\n        id: data.staff.id,\n      },\n    };\n\n    const checkResult = await dynamoDb.get(checkParams).promise();\n\n    if (!checkResult.Item.clocked_state) {\n      return res.status(200).json({\n        statusCode: 400,\n        message: \"This staff doesn't clock in yet.\",\n      });\n    } else if (!checkResult.Item.break_state) {\n      return res.status(200).json({\n        statusCode: 400,\n        message: \"This staff work now!\",\n      });\n    }\n    //calculate the total time from start work to start break\n    var differenceInMs =\n      roundToNearestFiveMinutes(timeStamp, data.round) -\n      data.staff.last_start_date;\n\n    var total_time = differenceInMs;\n\n    const uid = timeStamp.toString();\n    // update the start state record with total time and end time\n    const updateParams = {\n      TableName: data.tableName,\n      Key: {\n        id: data.staff.record_id,\n      },\n      ExpressionAttributeNames: {\n        \"#end_date\": \"end_date\",\n        \"#total_time\": \"total_time\",\n      },\n      ExpressionAttributeValues: {\n        \":end_date\": roundToNearestFiveMinutes(timeStamp, data.round),\n        \":total_time\": total_time,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression:\n        \"SET #end_date = :end_date, #total_time = :total_time, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    await dynamoDb.update(updateParams).promise();\n\n    // add new record to report table with break state\n    const addParams = {\n      TableName: data.tableName,\n      Item: {\n        id: uid,\n        track_id: data.staff.track_id,\n        staff_id: data.staff.id,\n        site_id: data.siteId,\n        date: moment(timeStamp).format(\"YYYY-MM-DD\"),\n        start_date: roundToNearestFiveMinutes(timeStamp, data.round),\n        end_date: null,\n        total_time: null,\n        name: data.staff.name,\n        status: \"restart\",\n        createdAt: timeStamp,\n        updateAt: timeStamp,\n      },\n    };\n\n    await dynamoDb.put(addParams).promise();\n\n    const updateUserParam = {\n      TableName: \"staff_list\",\n      Key: {\n        id: data.staff.id,\n      },\n      ExpressionAttributeNames: {\n        \"#break_state\": \"break_state\",\n        \"#record_id\": \"record_id\",\n        \"#last_start_date\": \"last_start_date\",\n      },\n      ExpressionAttributeValues: {\n        \":break_state\": false,\n        \":record_id\": uid,\n        \":last_start_date\": roundToNearestFiveMinutes(timeStamp, data.round),\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression:\n        \"SET #break_state = :break_state, #record_id = :record_id, #last_start_date = :last_start_date, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    const result = await dynamoDb.update(updateUserParam).promise();\n    const response = {\n      stsatusCode: 200,\n      body: result.Attributes,\n    };\n\n    return res.status(200).json(response);\n  } catch (error) {\n    console.log(error);\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/end-v1\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request!\" });\n    }\n\n    const checkParams = {\n      TableName: \"staff_list\",\n      Key: {\n        id: data.staff.id,\n      },\n    };\n\n    const checkResult = await dynamoDb.get(checkParams).promise();\n\n    if (!checkResult.Item.clocked_state) {\n      return res.status(200).json({\n        statusCode: 400,\n        message: \"This staff doesn't clock in yet.\",\n      });\n    }\n    //calculate the total time from start work to start break\n    var differenceInMs =\n      roundToNearestFiveMinutes(timeStamp, data.round) -\n      data.staff.last_start_date;\n\n    var total_time = differenceInMs;\n\n    const uid = timeStamp.toString();\n    // update the start state record with total time and end time\n    const updateParams = {\n      TableName: data.tableName,\n      Key: {\n        id: data.staff.record_id,\n      },\n      ExpressionAttributeNames: {\n        \"#end_date\": \"end_date\",\n        \"#total_time\": \"total_time\",\n      },\n      ExpressionAttributeValues: {\n        \":end_date\": roundToNearestFiveMinutes(timeStamp, data.round),\n        \":total_time\": total_time,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression:\n        \"SET #end_date = :end_date, #total_time = :total_time, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    await dynamoDb.update(updateParams).promise();\n\n    // add new record to report table with break state\n    const addParams = {\n      TableName: data.tableName,\n      Item: {\n        id: uid,\n        track_id: data.staff.track_id,\n        staff_id: data.staff.id,\n        site_id: data.siteId,\n        date: moment(timeStamp).format(\"YYYY-MM-DD\"),\n        workPosition: data.workPosition,\n        start_date: roundToNearestFiveMinutes(timeStamp, data.round),\n        total_time: 0,\n        name: data.staff.name,\n        status: \"end\",\n        createdAt: timeStamp,\n        updateAt: timeStamp,\n      },\n    };\n\n    await dynamoDb.put(addParams).promise();\n\n    const updateUserParam = {\n      TableName: \"staff_list\",\n      Key: {\n        id: data.staff.id,\n      },\n      ExpressionAttributeNames: {\n        \"#clocked_state\": \"clocked_state\",\n        \"#break_state\": \"break_state\",\n        \"#record_id\": \"record_id\",\n        \"#site_id\": \"site_id\",\n        \"#last_start_date\": \"last_start_date\",\n      },\n      ExpressionAttributeValues: {\n        \":clocked_state\": false,\n        \":break_state\": false,\n        \":record_id\": null,\n        \":site_id\": null,\n        \":last_start_date\": null,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression:\n        \"SET #clocked_state = :clocked_state, #break_state = :break_state, #record_id = :record_id, #site_id = :site_id, #last_start_date = :last_start_date, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    const result = await dynamoDb.update(updateUserParam).promise();\n    const response = {\n      stsatusCode: 200,\n      body: result.Attributes,\n    };\n\n    return res.status(200).json(response);\n  } catch (error) {\n    console.log(error);\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/check\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request!\" });\n    }\n\n    const params = {\n      TableName: \"staff_list\",\n      Key: {\n        id: data.id,\n      },\n    };\n\n    const result = await dynamoDb.get(params).promise();\n\n    const response = {\n      statusCode: 200,\n      body: result,\n    };\n\n    return res.status(200).json(response);\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/addstaff\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request!\" });\n    }\n\n    const uid = timeStamp.toString();\n    const staff_id = timeStamp.toString();\n\n    const dateParams = {\n      TableName: data.tableName,\n      Item: {\n        id: uid,\n        track_id: uid,\n        staff_id: staff_id,\n        date: moment(timeStamp).format(\"YYYY-MM-DD\"),\n        start_date: roundToNearestFiveMinutes(timeStamp, data.round),\n        end_date: null,\n        total_time: null,\n        name: data.name,\n        status: \"start\",\n        createdAt: timeStamp,\n        updateAt: timeStamp,\n      },\n    };\n\n    await dynamoDb.put(dateParams).promise();\n\n    let Item = {\n      id: staff_id,\n      organization_id: data.organization_id,\n      name: data.name,\n      email: data.email,\n      avatar: process.env.DEFAULT_AVATAR,\n      site_id: data.tableName,\n      track_id: uid,\n      record_id: uid,\n      type: 1,\n      level: 3,\n      clocked_state: true,\n      break_state: false,\n      last_start_date: roundToNearestFiveMinutes(timeStamp, data.round),\n      state: false,\n      createAt: timeStamp,\n      updateAt: timeStamp,\n    };\n\n    const params = {\n      TableName: \"staff_list\",\n      Item,\n    };\n\n    await dynamoDb.put(params).promise();\n\n    const response = {\n      stsatusCode: 200,\n      message: \"success\",\n    };\n\n    return res.status(200).json(response);\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nexport default router;\n","import {Router} from \"express\"\nimport client from \"./client.route\"\n\nconst router = Router()\n\nrouter.use(\"/\", client)\n\nexport default router\n","import AWS from \"aws-sdk\";\nimport { Router } from \"express\";\nconst uuid = require(\"uuid\");\n\nconst dynamoDb = new AWS.DynamoDB.DocumentClient();\nconst s3bucket = new AWS.S3();\n\nconst router = Router();\n\nrouter.post(\"/create\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    console.log(data);\n\n    const Item = {\n      id: data.organizationId,\n      email: data.email,\n      state: \"free\",\n      name: data.name,\n      city: data.city,\n      country: data.country,\n      address: data.address,\n      address_sec: data.address_sec,\n      postcode: data.postCode,\n      telephone: data.telePhone,\n      organization_id: data.organizationId,\n      country_state: data.state,\n      timeZone: data.timeZone,\n      logo: process.env.DEFAULT_COMPANY_LOGO,\n      date_format: \"DD-MM-YYYY\",\n      type: 1,\n      round: 5,\n      createAt: timeStamp,\n      updateAt: timeStamp,\n    };\n\n    const companyCreateParams = {\n      TableName: \"company_list\",\n      Item,\n    };\n\n    const response = await dynamoDb.put(companyCreateParams).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"success create\",\n    });\n  } catch (error) {\n    console.log(error);\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/create-v1\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const record_table = \"record_\" + data.organizationId;\n\n    const Item = {\n      id: data.organizationId,\n      email: data.email,\n      state: \"free\",\n      name: data.name,\n      city: data.city,\n      country: data.country,\n      currency: data.currency,\n      address: data.address,\n      address_sec: data.address_sec,\n      postcode: data.postCode,\n      telephone: data.telePhone,\n      organization_id: data.organizationId,\n      country_state: data.state,\n      timeZone: data.timeZone,\n      logo: process.env.DEFAULT_COMPANY_LOGO,\n      date_format: \"DD-MM-YYYY\",\n      record_table: record_table,\n      type: 1,\n      round: 5,\n      createAt: timeStamp,\n      updateAt: timeStamp,\n    };\n\n    const companyCreateParams = {\n      TableName: \"company_list\",\n      Item,\n    };\n\n    const response = await dynamoDb.put(companyCreateParams).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"success create\",\n      data: response,\n    });\n  } catch (error) {\n    console.log(error);\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/fetch\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const params = {\n      TableName: \"company_list\",\n      FilterExpression: \"#organization_id = :organization_id\",\n      ExpressionAttributeNames: {\n        \"#organization_id\": \"organization_id\",\n      },\n      ExpressionAttributeValues: {\n        \":organization_id\": data.organization_id,\n      },\n    };\n\n    const result = await dynamoDb.scan(params).promise();\n\n    const response = {\n      statusCode: 200,\n      body: result,\n    };\n\n    return res.status(200).json(response);\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/update\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    let location = \"\";\n\n    if (data.logo) {\n      var buf = Buffer.from(\n        data.logo.replace(/^data:image\\/\\w+;base64,/, \"\"),\n        \"base64\"\n      );\n      const type = data.logo.split(\";\")[0].split(\"/\")[1];\n      const params = {\n        Bucket: process.env.S3_BUCKET_NAME,\n        Key: `Home/Logos/${data.name}/${data.name}_${timeStamp}.${type}`,\n        Body: buf,\n        ACL: \"public-read\",\n        ContentEncoding: \"base64\",\n        ContentType: `image/${type}`,\n      };\n      try {\n        const uploadData = await s3bucket.upload(params).promise();\n        location = uploadData.Location;\n      } catch (error) {\n        console.log(error);\n        return res.status(200).json({ statusCode: 500, error });\n      }\n    }\n\n    const params = data.logo\n      ? {\n          TableName: \"company_list\",\n          Key: {\n            id: data.id,\n          },\n          ExpressionAttributeNames: {\n            \"#name_text\": \"name\",\n            \"#rdname\": \"rdname\",\n            \"#logo\": \"logo\",\n            \"#date_format\": \"date_format\",\n            \"#timeZone\": \"timeZone\",\n            \"#type\": \"type\",\n            \"#round\": \"round\",\n          },\n          ExpressionAttributeValues: {\n            \":name\": data.name,\n            \":rdname\": data.rdname,\n            \":logo\": location,\n            \":date_format\": data.dateFormat,\n            \":timeZone\": data.timeZone,\n            \":type\": data.type,\n            \":round\": data.round,\n            \":updateAt\": timeStamp,\n          },\n          UpdateExpression:\n            \"SET #name_text = :name, #rdname = :rdname, #logo = :logo, #date_format = :date_format, #timeZone = :timeZone, #type = :type, #round = :round, updateAt = :updateAt\",\n          ReturnValues: \"ALL_NEW\",\n        }\n      : {\n          TableName: \"company_list\",\n          Key: {\n            id: data.id,\n          },\n          ExpressionAttributeNames: {\n            \"#name_text\": \"name\",\n            \"#rdname\": \"rdname\",\n            \"#date_format\": \"date_format\",\n            \"#timeZone\": \"timeZone\",\n            \"#type\": \"type\",\n            \"#round\": \"round\",\n          },\n          ExpressionAttributeValues: {\n            \":name\": data.name,\n            \":rdname\": data.rdname,\n            \":date_format\": data.dateFormat,\n            \":timeZone\": data.timeZone,\n            \":type\": data.type,\n            \":round\": data.round,\n            \":updateAt\": timeStamp,\n          },\n          UpdateExpression:\n            \"SET #name_text = :name, #rdname = :rdname, #date_format = :date_format, #timeZone = :timeZone, #type = :type, #round = :round, updateAt = :updateAt\",\n          ReturnValues: \"ALL_NEW\",\n        };\n\n    const result = await dynamoDb.update(params).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Company data has been successfully updated\",\n      data: location,\n      response: result,\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/update-v1\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(400).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    let location = data.logo;\n\n    if (data.base64) {\n      var buf = Buffer.from(\n        data.base64.replace(/^data:image\\/\\w+;base64,/, \"\"),\n        \"base64\"\n      );\n      const type = data.base64.split(\";\")[0].split(\"/\")[1];\n      const params = {\n        Bucket: process.env.S3_BUCKET_NAME,\n        Key: `Home/Logos/${data.name}/${data.name}_${timeStamp}.${type}`,\n        Body: buf,\n        ACL: \"public-read\",\n        ContentEncoding: \"base64\",\n        ContentType: `image/${type}`,\n      };\n      try {\n        const uploadData = await s3bucket.upload(params).promise();\n        location = uploadData.Location;\n      } catch (error) {\n        console.log(error);\n        return res.status(400).json({ statusCode: 500, error });\n      }\n    }\n\n    const params = {\n      TableName: \"company_list\",\n      Key: {\n        id: data.id,\n      },\n      ExpressionAttributeNames: {\n        \"#name_text\": \"name\",\n        \"#type\": \"type\",\n        \"#logo\": \"logo\",\n        \"#timeZone\": \"timeZone\",\n        \"#date_format\": \"date_format\",\n        \"#round\": \"round\",\n        \"#email\": \"email\",\n        \"#telephone\": \"telephone\",\n      },\n      ExpressionAttributeValues: {\n        \":name\": data.name,\n        \":type\": data.type,\n        \":logo\": location,\n        \":timeZone\": data.timeZone,\n        \":date_format\": data.date_format,\n        \":round\": data.round,\n        \":email\": data.email,\n        \":telephone\": data.telephone,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression:\n        \"SET #name_text = :name, #type = :type, #logo = :logo, #timeZone = :timeZone, #date_format = :date_format, #round = :round, #email = :email, #telephone = :telephone, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    await dynamoDb.update(params).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Company data has been successfully updated\",\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/state\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const organizationParams = {\n      TableName: \"organization\",\n      Key: {\n        id: data.organization_id,\n      },\n      ExpressionAttributeNames: {\n        \"#update_state\": \"update_state\",\n      },\n      ExpressionAttributeValues: {\n        \":update_state\": true,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression:\n        \"SET #update_state = :update_state, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    await dynamoDb.update(organizationParams).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"success create\",\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/getcompany\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const companyParams = {\n      TableName: \"company_list\",\n      FilterExpression: \"#organization_id = :organization_id\",\n      ExpressionAttributeNames: {\n        \"#organization_id\": \"organization_id\",\n      },\n      ExpressionAttributeValues: {\n        \":organization_id\": data.organization_id,\n      },\n    };\n\n    const company = await dynamoDb.scan(companyParams).promise();\n\n    const response = {\n      statusCode: 200,\n      body: company,\n    };\n\n    return res.status(200).json(response);\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/updatelogo\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    let location = \"\";\n\n    var buf = Buffer.from(\n      data.logo.replace(/^data:image\\/\\w+;base64,/, \"\"),\n      \"base64\"\n    );\n\n    const type = data.logo.split(\";\")[0].split(\"/\")[1];\n    const imageParam = {\n      Bucket: process.env.S3_BUCKET_NAME,\n      Key: `Home/Logos/${data.organization_id}/${timeStamp}.${type}`,\n      Body: buf,\n      ACL: \"public-read\",\n      ContentEncoding: \"base64\",\n      ContentType: `image/${type}`,\n    };\n    try {\n      const uploadData = await s3bucket.upload(imageParam).promise();\n      location = uploadData.Location;\n    } catch (error) {\n      console.log(error);\n      return res.status(200).json({ statusCode: 500, error });\n    }\n\n    const updateParams = {\n      TableName: \"company_list\",\n      Key: {\n        id: data.id,\n      },\n      ExpressionAttributeNames: {\n        \"#logo\": \"logo\",\n      },\n      ExpressionAttributeValues: {\n        \":logo\": location,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression: \"SET #logo = :logo, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    const result = await dynamoDb.update(updateParams).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Company Logo has been successfully updated\",\n      location: location,\n      response: result,\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/updatename\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const updateParams = {\n      TableName: \"company_list\",\n      Key: {\n        id: data.id,\n      },\n      ExpressionAttributeNames: {\n        \"#name\": \"name\",\n      },\n      ExpressionAttributeValues: {\n        \":name\": data.name,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression: \"SET #name = :name, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    const result = await dynamoDb.update(updateParams).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Company Name has been successfully updated\",\n      response: result,\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/updatesettings\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const updateParams = {\n      TableName: \"company_list\",\n      Key: {\n        id: data.id,\n      },\n      ExpressionAttributeNames: {\n        \"#rdname\": \"rdname\",\n        \"#break\": \"break\",\n        \"#timeZone\": \"timeZone\",\n        \"#date_format\": \"date_format\",\n        \"#type\": \"type\",\n        \"#round\": \"round\",\n      },\n      ExpressionAttributeValues: {\n        \":rdname\": data.rdname,\n        \":break\": data.break,\n        \":timeZone\": data.timeZone,\n        \":date_format\": data.date_format,\n        \":type\": data.type,\n        \":round\": data.round,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression:\n        \"SET #rdname = :rdname, #break = :break, #timeZone = :timeZone, #date_format = :date_format, #type = :type, #round = :round, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    const result = await dynamoDb.update(updateParams).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Company Name has been successfully updated\",\n      response: result,\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/updatecontact\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const updateParams = {\n      TableName: \"company_list\",\n      Key: {\n        id: data.id,\n      },\n      ExpressionAttributeNames: {\n        \"#email\": \"email\",\n        \"#telephone\": \"telephone\",\n      },\n      ExpressionAttributeValues: {\n        \":email\": data.email,\n        \":telephone\": data.telephone,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression:\n        \"SET #email = :email, #telephone = :telephone, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    const result = await dynamoDb.update(updateParams).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Company Name has been successfully updated\",\n      response: result,\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/updateForm\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const updateParams = {\n      TableName: \"company_list\",\n      Key: {\n        id: data.id,\n      },\n      ExpressionAttributeNames: {\n        \"#form\": \"form\",\n      },\n      ExpressionAttributeValues: {\n        \":form\": data.form,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression: \"SET #form = :form, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    const result = await dynamoDb.update(updateParams).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Company Form has been successfully updated\",\n      response: result,\n    });\n  } catch (error) {\n    return res.status(400).json(error);\n  }\n});\n\nrouter.post(\"/checkPaidState\", async (req, res) => {\n  try {\n    const data = req.body;\n\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const checkParam = {\n      TableName: \"company_list\",\n      Key: {\n        id: data.org_id,\n      },\n    };\n    const response = await dynamoDb.get(checkParam).promise();\n    return res.status(200).json({ statusCode: 200, data: response });\n  } catch (error) {\n    console.log(\"error\", error);\n    return res.status(200).json({ statusCode: 400, error: error });\n  }\n});\n\nrouter.post(\"/checkStaffsNumber\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n    console.log(data);\n    const tableName = \"staff_list\"; // Replace with your table name\n\n    const params = {\n      TableName: tableName,\n      FilterExpression: \"organization_id = :organization_id\",\n      ExpressionAttributeValues: {\n        \":organization_id\": data.orgId,\n      },\n    };\n\n    const items = await dynamoDb.scan(params).promise();\n\n    const checkParam = {\n      TableName: \"company_list\",\n      Key: {\n        id: data.orgId,\n      },\n    };\n    const response = await dynamoDb.get(checkParam).promise();\n\n    console.log(response);\n    const result = {\n      totalNumber: items.Items.length,\n      limitNumber: response.Item.paymentInfo.quantity,\n    };\n    return res.status(200).json({ statusCode: 200, data: result });\n  } catch (error) {\n    console.log(error);\n    return res.status(200).json({ statusCode: 400, error: error });\n  }\n});\n\nexport default router;\n","import { Router } from \"express\";\nimport company from \"./company.route\";\n\nconst router = Router();\n\nrouter.use(\"/\", company);\n\nexport default router;\n","import AWS from \"aws-sdk\";\nimport { Router } from \"express\";\nconst uuid = require(\"uuid\");\n\nconst dynamoDb = new AWS.DynamoDB.DocumentClient();\nvar ses = new AWS.SES();\n\nconst router = Router();\n\nrouter.post(\"/addticket\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const TableName = \"support\";\n\n    let Item = data;\n    Item.id = timeStamp.toString();\n    Item.createAt = timeStamp;\n    Item.updateAt = timeStamp;\n\n    const params = {\n      TableName: TableName,\n      Item,\n    };\n\n    const response = await dynamoDb.put(params).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"success create\",\n      data: response,\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/getticket\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const params = {\n      TableName: \"support\",\n      Key: {\n        id: data.id,\n      },\n    };\n\n    const res = await dynamoDb.get(params).promise();\n\n    const response = {\n      statusCode: 200,\n      body: res,\n    };\n\n    return res.status(200).json(response);\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/solveticket\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const params = {\n      TableName: \"support\",\n      Key: {\n        id: data.id,\n      },\n      ExpressionAttributeNames: {\n        \"#solved\": \"solved\",\n      },\n      ExpressionAttributeValues: {\n        \":solved\": true,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression: \"SET #solved = :solved, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    await dynamoDb.update(params).promise();\n\n    const message = \"#\" + data.id + \" ticket is closed\";\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: message,\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/updateticket\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const params = {\n      TableName: \"support\",\n      Key: {\n        id: data.id,\n      },\n      ExpressionAttributeNames: {\n        \"#messages\": \"messages\",\n      },\n      ExpressionAttributeValues: {\n        \":messages\": data.messages,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression: \"SET #messages = :messages, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    await dynamoDb.update(params).promise();\n\n    const message = \"#\" + data.id + \" ticket is closed.\";\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: message,\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.get(\"/fetchtickets\", async (req, res) => {\n  try {\n    const params = {\n      TableName: \"support\",\n    };\n    const ticketData = await dynamoDb.scan(params).promise();\n    return res.status(200).json({ statusCode: 200, data: ticketData });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/fetchticket\", async (req, res) => {\n  try {\n    const data = req.body;\n\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const params = {\n      TableName: \"support\",\n      FilterExpression: \"#organization_id = :organization_id\",\n      ExpressionAttributeNames: {\n        \"#organization_id\": \"organization_id\",\n      },\n      ExpressionAttributeValues: {\n        \":organization_id\": data.organization_id,\n      },\n    };\n    const result = await dynamoDb.scan(params).promise();\n    const response = {\n      statusCode: 200,\n      body: result.Items,\n    };\n\n    return res.status(200).json(response);\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/sendemail\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    var emailParams = {\n      Destination: {\n        ToAddresses: [\"support@teamixo.com\"], // replace recipient@example.com with the recipient's email address\n      },\n      Message: {\n        Body: {\n          Html: {\n            Charset: \"UTF-8\",\n            Data: `<div>\n              <p>Name: ${data.name}</p>\n              <p>Email Address: ${data.email}</p>\n              <p>Content: ${data.content}</p>\n            </div>\n            `,\n          },\n        },\n        Subject: {\n          Charset: \"UTF-8\",\n          Data: `Support request`, // replace with your email subject\n        },\n      },\n      Source: \"Teamixo Support <contact@teamixo.com>\", // replace sender@example.com with your \"From\" address\n    };\n\n    await ses.sendEmail(emailParams).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Contact email is sent to support team\",\n    });\n  } catch (error) {\n    return res.status(200).json({ statusCode: 500, error: error });\n  }\n});\n\nrouter.post(\"/join-to-list\", async (req, res) => {\n  try {\n    const data = req.body;\n    const timeStamp = new Date().getTime();\n    if (!data) {\n      return res.status(400).json({ message: \"Bad Request\" });\n    }\n\n    const Item = data;\n    Item.id = timeStamp.toString();\n    Item.createdAt = timeStamp;\n    Item.updatedAt = timeStamp;\n\n    const createParams = {\n      TableName: \"waitList\",\n      Item,\n    };\n\n    await dynamoDb.put(createParams).promise();\n\n    return res\n      .status(200)\n      .json({ message: \"Join request has been successfully added\" });\n  } catch (error) {\n    console.log(\"Error occurred: \", error);\n    return res.status(500).json(error);\n  }\n});\n\nrouter.get(\"/get-join-list\", async (req, res) => {\n  try {\n    const fetchParmas = {\n      TableName: \"waitList\",\n    };\n\n    const joinListData = await dynamoDb.scan(fetchParmas).promise();\n\n    return res.status(200).json({ data: joinListData });\n  } catch (error) {\n    console.log(\"Error occurred: \", error);\n    return res.status(500).json(error);\n  }\n});\n\nexport default router;\n","import { Router } from \"express\";\nimport contact from \"./contact.route\";\n\nconst router = Router();\n\nrouter.use(\"/\", contact);\n\nexport default router;\n","import AWS from \"aws-sdk\";\nimport { Router } from \"express\";\nconst uuid = require(\"uuid\");\nconst fs = require(\"fs\");\nconst multer = require(\"multer\");\nconst upload = multer({ storage: multer.memoryStorage() });\n\nconst dynamoDb = new AWS.DynamoDB.DocumentClient();\nconst S3 = new AWS.S3();\n\nconst router = Router();\n\nrouter.post(\"/adddata\", async (req, res) => {\n  try {\n    const data = req.body;\n    const timeStamp = new Date().getTime();\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    let Item = {\n      id: timeStamp.toString(),\n      organization_id: data.organization_id,\n      form_name: data.form_name,\n      form_id: data.form_id,\n      allocate_id: data.allocate_id,\n      sender: data.sender,\n      sender_type: data.sender_type,\n      form_result: data.form_result,\n      createAt: timeStamp,\n      updateAt: timeStamp,\n    };\n\n    const params = {\n      TableName: \"custom_data\",\n      Item,\n    };\n\n    const result = await dynamoDb.put(params).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: `${form_name} form have been created successfully!`,\n      data: result,\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/fetchdata\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const params = {\n      TableName: \"custom_data\",\n      FilterExpression: \"#organization_id = :organization_id\",\n      ExpressionAttributeNames: {\n        \"#organization_id\": \"organization_id\",\n      },\n      ExpressionAttributeValues: {\n        \":organization_id\": data.organization_id,\n      },\n    };\n\n    const result = await dynamoDb.scan(params).promise();\n\n    const response = {\n      statusCode: 200,\n      body: result,\n    };\n\n    return res.status(200).json(response);\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nexport default router;\n","import { Router } from \"express\";\n\nimport custom from \"./custom.route\";\n\nconst router = Router();\n\nrouter.use(\"/\", custom);\n\nexport default router;\n","import AWS from \"aws-sdk\";\nimport { Router } from \"express\";\n\nvar ddb = new AWS.DynamoDB({ apiVersion: \"2012-08-10\" });\n\nconst router = Router();\n\nrouter.post(\"/createtable\", async (req, res) => {\n  try {\n    const data = req.body;\n\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const params = {\n      TableName: data.tableName,\n      KeySchema: [{ AttributeName: \"id\", KeyType: \"HASH\" }],\n      AttributeDefinitions: [{ AttributeName: \"id\", AttributeType: \"S\" }],\n      BillingMode: \"PAY_PER_REQUEST\",\n    };\n\n    await ddb.createTable(params).promise();\n\n    res.status(200).json({ message: \"Create table successful\" });\n  } catch (error) {\n    console.error(\"An error ocurred:\", error);\n    res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/deletetable\", async (req, res) => {\n  try {\n    const data = req.body;\n\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const params = {\n      TableName: data.tableName,\n    };\n\n    await ddb.deleteTable(params).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Delete table successful\",\n    });\n  } catch (error) {\n    console.error(\"An error ocurred:\", error);\n    res.status(200).json(error);\n  }\n});\n\nexport default router;\n","import { Router } from \"express\";\n\nimport db from \"./db.route\";\n\nconst router = Router();\n\nrouter.use(\"/\", db);\n\nexport default router;\n","import AWS from \"aws-sdk\";\nimport { Router } from \"express\";\nimport moment from \"moment\";\nconst uuid = require(\"uuid\");\n\nconst dynamoDb = new AWS.DynamoDB.DocumentClient();\nconst s3bucket = new AWS.S3();\n\nconst router = Router();\n\nrouter.post(\"/upload\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n    const file = data.file;\n    const base64Data = file.replace(/^data:application\\/pdf;base64,/, \"\");\n    const decodedFile = Buffer.from(base64Data, \"base64\");\n    const params = {\n      Bucket: process.env.S3_BUCKET_NAME,\n      Key: `Home/Document/${data.organizationId}/${moment(timeStamp).format(\n        \"YYYY-MM-DD\"\n      )}/${data.docName}_${timeStamp}.pdf`,\n      Body: decodedFile,\n      ACL: \"public-read\",\n      ContentEncoding: \"base64\",\n      ContentType: `application/pdf`,\n    };\n    let location = \"\";\n    try {\n      const uploadData = await s3bucket.upload(params).promise();\n      location = uploadData.Location;\n    } catch (error) {\n      console.log(error);\n      return res.status(200).json({ statusCode: 500, error });\n    }\n    return res.status(200).json({ statusCode: 200, data: location });\n  } catch (error) {\n    res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/add\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    let Item = data;\n    Item.id = timeStamp.toString();\n    Item.createAt = timeStamp;\n    Item.updateAt = timeStamp;\n\n    const params = {\n      TableName: \"documents\",\n      Item,\n    };\n\n    await dynamoDb.put(params).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Document has been successfully created\",\n    });\n  } catch (error) {\n    res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/update\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const params = {\n      TableName: \"documents\",\n      Key: {\n        id: data.id,\n      },\n      ExpressionAttributeNames: {\n        \"#docName\": \"docName\",\n        \"#docType\": \"docType\",\n        \"#docDate\": \"docDate\",\n        \"#expireDate\": \"expireDate\",\n        \"#assignType\": \"assignType\",\n        \"#assignValue\": \"assignValue\",\n      },\n      ExpressionAttributeValues: {\n        \":docName\": data.docName,\n        \":docType\": data.docType,\n        \":docDate\": data.docDate,\n        \":expireDate\": data.expireDate,\n        \":assignType\": data.assignType,\n        \":assignValue\": data.assignValue,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression:\n        \"SET #docName = :docName, #docType = :docType, #docDate = :docDate, #expireDate = :expireDate, #assignType = :assignType, #assignValue = :assignValue, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    await dynamoDb.update(params).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Site data has been successfully updated\",\n    });\n  } catch (error) {\n    res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/delete\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const params = {\n      Bucket: process.env.S3_BUCKET_NAME, // replace with your bucket name\n      Key: data.key, // replace with the image key\n    };\n\n    await s3bucket.deleteObject(params).promise();\n\n    const documentParams = {\n      TableName: \"documents\",\n      Key: {\n        id: data.id,\n      },\n    };\n\n    await dynamoDb.delete(documentParams).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"delete successful\",\n    });\n  } catch (error) {\n    res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/fetch\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n    const params = {\n      TableName: \"documents\",\n      FilterExpression: \"#organization_id = :organization_id\",\n      ExpressionAttributeNames: {\n        \"#organization_id\": \"organization_id\",\n      },\n      ExpressionAttributeValues: {\n        \":organization_id\": data.organization_id,\n      },\n    };\n    const result = await dynamoDb.scan(params).promise();\n    const response = {\n      statusCode: 200,\n      body: result.Items,\n    };\n\n    return res.status(200).json(response);\n  } catch (error) {\n    res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/staff\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const params = {\n      TableName: \"documents\",\n      FilterExpression:\n        \"#organization_id = :organization_id AND #assignType < :assignType\",\n      ExpressionAttributeNames: {\n        \"#organization_id\": \"organization_id\",\n        \"#assignType\": \"assignType\",\n      },\n      ExpressionAttributeValues: {\n        \":organization_id\": data.organization_id,\n        \":assignType\": 5,\n      },\n    };\n\n    const result = await dynamoDb.scan(params).promise();\n    const resultDocList = result.Items.filter((item) => {\n      return (\n        item.assignType === 1 ||\n        (item.assignType === 2 && item.assignValue === data.type) ||\n        (item.assignType === 3 && data.role.includes(item.assignValue)) ||\n        data.userId === item.assignValue\n      );\n    });\n    return res.status(200).json({\n      statusCode: 200,\n      body: resultDocList,\n    });\n  } catch (error) {\n    res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/site\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const params = {\n      TableName: \"documents\",\n      FilterExpression:\n        \"#organization_id = :organization_id AND #assignType > :assignType\",\n      ExpressionAttributeNames: {\n        \"#organization_id\": \"organization_id\",\n        \"#assignType\": \"assignType\",\n      },\n      ExpressionAttributeValues: {\n        \":organization_id\": data.organization_id,\n        \":assignType\": 4,\n      },\n    };\n\n    const result = await dynamoDb.scan(params).promise();\n    const resultDocList = result.Items.filter((item) => {\n      return item.assignType === 5 || data.sietId === item.assignValue;\n    });\n    return res.status(200).json({\n      statusCode: 200,\n      body: resultDocList,\n    });\n  } catch (error) {\n    res.status(200).json(error);\n  }\n});\n\nexport default router;\n","import { Router } from \"express\";\nimport document from \"./document.route\";\n\nconst router = Router();\n\nrouter.use(\"/\", document);\n\nexport default router;\n","import AWS from \"aws-sdk\";\nimport { Router } from \"express\";\nconst uuid = require(\"uuid\");\nconst fs = require(\"fs\");\nconst multer = require(\"multer\");\nconst upload = multer({ storage: multer.memoryStorage() });\n\nconst dynamoDb = new AWS.DynamoDB.DocumentClient();\nconst S3 = new AWS.S3();\n\nconst router = Router();\n\nrouter.post(\"/newform\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request!\" });\n    }\n\n    let Item = {\n      id: timeStamp.toString(),\n      organization_id: data.organization_id,\n      form_name: data.form_name,\n      submit_label: data.submit_label,\n      form_elements: data.form_elements,\n      color: data.color,\n      createAt: timeStamp,\n      updateAt: timeStamp,\n    };\n\n    const params = {\n      TableName: \"form_list\",\n      Item,\n    };\n\n    await dynamoDb.put(params).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: `${form_name} form have been created successfully!`,\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/updateform\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request!\" });\n    }\n\n    const updateParam = {\n      TableName: \"form_list\",\n      Key: {\n        id: data.id,\n      },\n      ExpressionAttributeNames: {\n        \"#form_name\": \"form_name\",\n        \"#submit_label\": \"submit_label\",\n        \"#form_elements\": \"form_elements\",\n        \"#color\": \"color\",\n      },\n      ExpressionAttributeValues: {\n        \":form_name\": data.form_name,\n        \":submit_label\": data.submit_label,\n        \":form_elements\": data.form_elements,\n        \":color\": data.color,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression:\n        \"SET #form_name = :form_name, #submit_label = :submit_label, #form_elements = :form_elements, #color = :color, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    await dynamoDb.update(updateParam).promise();\n\n    return res\n      .status(200)\n      .json({ statusCode: 200, message: \"Allocate Form Success\" });\n  } catch (error) {\n    console.log(\"error\", error);\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/fetch\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const params = {\n      TableName: \"form_list\",\n      FilterExpression: \"#organization_id = :organization_id\",\n      ExpressionAttributeNames: {\n        \"#organization_id\": \"organization_id\",\n      },\n      ExpressionAttributeValues: {\n        \":organization_id\": data.organization_id,\n      },\n    };\n\n    const result = await dynamoDb.scan(params).promise();\n\n    const response = {\n      statusCode: 200,\n      body: result,\n    };\n\n    return res.status(200).json(response);\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/delete\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const delete_param = {\n      TableName: \"form_list\",\n      Key: {\n        id: data.id,\n      },\n    };\n\n    await dynamoDb.delete(delete_param).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Form has been removed successfully\",\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/allocate\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const allocateParam = {\n      TableName: \"form_list\",\n      Key: {\n        id: data.id,\n      },\n      ExpressionAttributeNames: {\n        \"#allocated_site\": \"allocated_site\",\n        \"#allocated_staff\": \"allocated_staff\",\n      },\n      ExpressionAttributeValues: {\n        \":allocated_site\": data.allocated_site,\n        \":allocated_staff\": data.allocated_staff,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression:\n        \"SET #allocated_site = :allocated_site, #allocated_staff = :allocated_staff, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    await dynamoDb.update(allocateParam).promise();\n\n    return res\n      .status(200)\n      .json({ statusCode: 200, message: \"Allocate Form Success\" });\n  } catch (error) {\n    console.log(error);\n    return res.status(200).json(error);\n  }\n});\n\nrouter.get(\"/test\", async (req, res) => {\n  try {\n    const params = {\n      TableName: \"form_list\",\n    };\n\n    const data = await dynamoDb.scan(params).promise();\n    return res.status(200).json({ data: data });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/upload\", upload.single(\"file\"), async (req, res) => {\n  const file = req.file;\n\n  const base64Data = req.body.base.split(\"base64,\")[1];\n  const decodedFile = Buffer.from(base64Data, \"base64\");\n\n  const params = {\n    Bucket: process.env.S3_BUCKET_NAME,\n    Key: \"Home/Form/File/\" + req.file.originalname, // Use the original file name\n    Body: decodedFile,\n    ACL: \"public-read\",\n    ContentEncoding: \"base64\",\n    ContentType: file.mimetype,\n  };\n\n  try {\n    const data = await S3.upload(params).promise();\n    console.log(`File uploaded successfully. ${data.Location}`);\n    return res\n      .status(200)\n      .json({ data: data.Location, message: \"File uploaded successfully\" });\n  } catch (error) {\n    console.error(\"Error uploading file:\", error);\n    return res\n      .status(200)\n      .json({ statusCode: 500, message: \"Error uploading file\" });\n  }\n});\n\nrouter.post(\"/uploadphoto\", async (req, res) => {\n  const timeStamp = new Date().getTime();\n  const photo = req.body.photo.split(\"base64,\")[1];\n\n  const decodedFile = Buffer.from(photo, \"base64\");\n\n  const params = {\n    Bucket: process.env.S3_BUCKET_NAME,\n    Key: \"Home/Form/Photo/\" + timeStamp, // Use the original file name\n    Body: decodedFile,\n    ACL: \"public-read\",\n    ContentEncoding: \"base64\",\n    ContentType: \"image/jpeg\",\n  };\n\n  try {\n    const data = await S3.upload(params).promise();\n    console.log(`File uploaded successfully. ${data.Location}`);\n    return res\n      .status(200)\n      .json({ data: data.Location, message: \"File uploaded successfully\" });\n  } catch (error) {\n    console.error(\"Error uploading file:\", error);\n    return res\n      .status(200)\n      .json({ statusCode: 500, message: \"Error uploading file\" });\n  }\n});\n\nrouter.post(\"/getuserform\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const fetchParam = {\n      TableName: \"form_list\",\n      FilterExpression: \"contains(allocated_staff, :allocate_id)\",\n      ExpressionAttributeValues: {\n        \":allocate_id\": data.allocate_id,\n      },\n    };\n\n    const result = await dynamoDb.scan(fetchParam).promise();\n\n    const response = {\n      statusCode: 200,\n      body: result,\n    };\n\n    return res.status(200).json(response);\n  } catch (error) {\n    console.log(error);\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/getsiteform\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const fetchParam = {\n      TableName: \"form_list\",\n      FilterExpression: \"contains(allocated_site, :allocate_id)\",\n      ExpressionAttributeValues: {\n        \":allocate_id\": data.allocate_id,\n      },\n    };\n\n    const result = await dynamoDb.scan(fetchParam).promise();\n\n    const response = {\n      statusCode: 200,\n      body: result,\n    };\n\n    return res.status(200).json(response);\n  } catch (error) {\n    console.log(error);\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/getforms\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const fetchParam = {\n      TableName: \"form_list\",\n      FilterExpression: \"#allocate_id = :allocate_id\",\n      ExpressionAttributeNames: {\n        \"#allocate_id\": \"allocate_id\",\n      },\n      ExpressionAttributeValues: {\n        \":allocate_id\": data.allocate_id,\n      },\n    };\n\n    const result = await dynamoDb.scan(fetchParam).promise();\n\n    const response = {\n      statusCode: 200,\n      body: result,\n    };\n\n    return res.status(200).json(response);\n  } catch (error) {\n    console.log(error);\n    return res.status(200).json(error);\n  }\n});\n\nexport default router;\n","import { Router } from \"express\";\n\nimport form from \"./form.route\";\n\nconst router = Router();\n\nrouter.use(\"/\", form);\n\nexport default router;\n","import { Router } from \"express\";\n\nimport v1 from \"./v1\";\nimport db from \"./db\";\nimport user from \"./user\";\nimport staff from \"./staff\";\nimport site from \"./site\";\nimport setting from \"./setting\";\nimport role from \"./role\";\nimport report from \"./report\";\nimport remote from \"./remote\";\nimport profile from \"./profile\";\nimport document from \"./document\";\nimport contact from \"./contact\";\nimport company from \"./company\";\nimport client from \"./client\";\nimport admin from \"./admin\";\nimport log from \"./logs\";\nimport form from \"./form\";\nimport custom from \"./custom\";\nimport payment from \"./payment\";\nimport migration from \"./migration\";\n\nconst router = Router();\n\nrouter.use(\"/v1\", v1);\nrouter.use(\"/db\", db);\nrouter.use(\"/user\", user);\nrouter.use(\"/staff\", staff);\nrouter.use(\"/site\", site);\nrouter.use(\"/setting\", setting);\nrouter.use(\"/role\", role);\nrouter.use(\"/report\", report);\nrouter.use(\"/remote\", remote);\nrouter.use(\"/profile\", profile);\nrouter.use(\"/document\", document);\nrouter.use(\"/support\", contact);\nrouter.use(\"/company\", company);\nrouter.use(\"/client\", client);\nrouter.use(\"/admin\", admin);\nrouter.use(\"/logs\", log);\nrouter.use(\"/form\", form);\nrouter.use(\"/custom\", custom);\nrouter.use(\"/payment\", payment);\nrouter.use(\"/migration\", migration);\n\nexport default router;\n","import { Router } from \"express\";\n\nimport logs from \"./log.route\";\n\nconst router = Router();\n\nrouter.use(\"/\", logs);\n\nexport default router;\n","import AWS from \"aws-sdk\";\nimport { Router } from \"express\";\nconst uuid = require(\"uuid\");\n\nconst dynamoDb = new AWS.DynamoDB.DocumentClient();\n\nconst router = Router();\n\nrouter.post(\"/addlog\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const userParam = {\n      TableName: \"staff_list\",\n      Key: {\n        id: data.userId,\n      },\n    };\n\n    const user = await dynamoDb.get(userParam).promise();\n\n    const TableName = \"logs\";\n\n    let Item = data;\n    Item.id = timeStamp.toString();\n    Item.user = user.Item.name;\n    Item.date = timeStamp;\n    Item.createAt = timeStamp;\n    Item.updateAt = timeStamp;\n    delete Item.userId;\n\n    const params = {\n      TableName: TableName,\n      Item,\n    };\n\n    const response = await dynamoDb.put(params).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"success create\",\n      data: response,\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/fetchlogs\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const params = {\n      TableName: \"logs\",\n      FilterExpression: \"#organization_id = :organization_id\",\n      ExpressionAttributeNames: {\n        \"#organization_id\": \"organization_id\",\n      },\n      ExpressionAttributeValues: {\n        \":organization_id\": data.organization_id,\n      },\n    };\n    const result = await dynamoDb.scan(params).promise();\n    const response = {\n      statusCode: 200,\n      body: result.Items,\n    };\n\n    return res.status(200).json(response);\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nexport default router;\n","import { Router } from \"express\";\n\nimport migration from \"./migration.route\";\n\nconst router = Router();\n\nrouter.use(\"/\", migration);\n\nexport default router;\n","import AWS from \"aws-sdk\";\nimport { Router } from \"express\";\n\nconst dynamoDb = new AWS.DynamoDB.DocumentClient();\n\nconst router = Router();\n\nrouter.post(\"/copydata\", async (req, res) => {\n  try {\n    const data = req.body;\n\n    const fetchSiteParams = {\n      TableName: \"site_list\",\n      FilterExpression: \"#organization_id = :organization_id\",\n      ExpressionAttributeNames: {\n        \"#organization_id\": \"organization_id\",\n      },\n      ExpressionAttributeValues: {\n        \":organization_id\": data.organization_id,\n      },\n    };\n\n    const siteResult = await dynamoDb.scan(fetchSiteParams).promise();\n\n    const siteData = siteResult.Items;\n\n    const migrationPromise = siteData.map(async (site, siteIndex) => {\n      const fetchOldDataParams = {\n        TableName: site.table_name,\n      };\n\n      const result = await dynamoDb.scan(fetchOldDataParams).promise();\n\n      const oldDatas = result.Items;\n\n      const promise = oldDatas.map(async (item, index) => {\n        const migrationDataParams = {\n          TableName: data.newTableName,\n          Item: {\n            ...item,\n            site_id: site.id,\n          },\n        };\n\n        await dynamoDb.put(migrationDataParams).promise();\n      });\n\n      await Promise.all(promise);\n    });\n\n    await Promise.all(migrationPromise);\n\n    return res.status(200).json({ data: siteData });\n  } catch (err) {\n    console.log(err);\n    return res.status(400).json({ error: err });\n  }\n});\n\nexport default router;\n","import { Router } from \"express\";\n\nimport payment from \"./payment.route\";\n\nconst router = Router();\n\nrouter.use(\"/\", payment);\n\nexport default router;\n","import AWS from \"aws-sdk\";\nimport { Router } from \"express\";\n\nconst dynamoDb = new AWS.DynamoDB.DocumentClient();\n\nconst stripe = require(\"stripe\")(process.env.STRIPE_S_ID);\n\nconst router = Router();\n\nrouter.post(\"/subscription\", async (req, res) => {\n  const { email, paymentMethodId, number } = req.body;\n  const data = req.body;\n  console.log(email, paymentMethodId, number);\n\n  try {\n    const timeStamp = new Date().getTime();\n    // Create a new customer\n    const customer = await stripe.customers.create({\n      email: email,\n      payment_method: paymentMethodId,\n      invoice_settings: {\n        default_payment_method: paymentMethodId,\n      },\n    });\n\n    // Create the subscription with 20x quantity\n    const subscription = await stripe.subscriptions.create({\n      customer: customer.id,\n      items: [\n        {\n          plan: process.env.STRIPE_PRICE_ID,\n          quantity: number, // Charge for 20 units of the subscription\n        },\n      ],\n      expand: [\"latest_invoice.payment_intent\"],\n    });\n\n    console.log(subscription.id, subscription.customer, subscription.quantity);\n\n    const paymentInfo = {\n      subscriptionId: subscription.id,\n      customerId: subscription.customer,\n      quantity: subscription.quantity,\n    };\n\n    const updatePlanParams = {\n      TableName: \"company_list\",\n      Key: {\n        id: data.id,\n      },\n      ExpressionAttributeNames: {\n        \"#paymentInfo\": \"paymentInfo\",\n        \"#state\": \"state\",\n      },\n      ExpressionAttributeValues: {\n        \":paymentInfo\": paymentInfo,\n        \":state\": \"paid\",\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression:\n        \"SET #paymentInfo = :paymentInfo, #state = :state, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    const result = await dynamoDb.update(updatePlanParams).promise();\n\n    return res.status(200).json({ statusCode: 200, body: subscription });\n  } catch (error) {\n    console.log(\"err\", error);\n    return res.status(200).json({\n      statusCode: 400,\n      body: { error: error },\n    });\n  }\n});\n\nrouter.post(\"/webhook\", async (req, res) => {\n  const sig = req.headers[\"stripe-signature\"];\n\n  let event;\n\n  try {\n    event = stripe.webhooks.constructEvent(\n      req.body,\n      sig,\n      process.env.STRIPE_WEBHOOK_SECRET\n    );\n  } catch (err) {\n    res.status(400).send(`Webhook Error: ${err.message}`);\n    return;\n  }\n\n  // Handle the event\n  switch (event.type) {\n    case \"customer.subscription.created\":\n      const subscriptionCreated = event.data.object;\n      // Handle the subscription created event\n      console.log(\n        `Subscription ${subscriptionCreated.id} created for customer ${subscriptionCreated.customer}`\n      );\n      break;\n    case \"customer.subscription.updated\":\n      const subscriptionUpdated = event.data.object;\n      // Handle the subscription updated event\n      console.log(`Subscription ${subscriptionUpdated.id} updated.`);\n      break;\n    case \"customer.subscription.deleted\":\n      const subscriptionDeleted = event.data.object;\n      // Handle the subscription deleted event\n      console.log(`Subscription ${subscriptionDeleted.id} deleted.`);\n      break;\n    // ... handle other event types\n    default:\n      console.log(`Unhandled event type ${event.type}`);\n  }\n\n  // Return a response to acknowledge receipt of the event\n  res.json({ received: true });\n});\n\nexport default router;\n","import { Router } from \"express\";\nimport profile from \"./profile.route\";\n\nconst router = Router();\n\nrouter.use(\"/\", profile);\n\nexport default router;\n","import AWS from \"aws-sdk\";\nimport { Router } from \"express\";\nconst uuid = require(\"uuid\");\n\nconst dynamoDb = new AWS.DynamoDB.DocumentClient();\nconst s3bucket = new AWS.S3();\nconst cognito = new AWS.CognitoIdentityServiceProvider();\n\nconst router = Router();\n\nrouter.post(\"/fetch\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const params = {\n      TableName: \"staff_list\",\n      Key: {\n        id: data.id,\n      },\n    };\n\n    const user = await dynamoDb.get(params).promise();\n\n    const response = {\n      statusCode: 200,\n      body: {\n        user: user,\n      },\n    };\n\n    return res.status(200).json(response);\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/update\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const params = {\n      TableName: \"staff_list\",\n      Key: {\n        id: data.id,\n      },\n      ExpressionAttributeNames: {\n        \"#name_text\": \"name\",\n        \"#gender\": \"gender\",\n        \"#birth\": \"birth\",\n      },\n      ExpressionAttributeValues: {\n        \":name\": data.name,\n        \":gender\": data.gender,\n        \":birth\": data.birth,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression:\n        \"SET #name_text = :name, #gender = :gender, #birth = :birth, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    await dynamoDb.update(params).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Profile data has been successfully updated\",\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/update-v1\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    let location = data.avatar;\n    let email = data.old_email;\n\n    if (data.base64) {\n      var buf = Buffer.from(\n        data.base64.replace(/^data:image\\/\\w+;base64,/, \"\"),\n        \"base64\"\n      );\n      const type = data.base64.split(\";\")[0].split(\"/\")[1];\n      const params = {\n        Bucket: process.env.S3_BUCKET_NAME,\n        Key: `Home/Avatars/${data.organization_id}/avatar${timeStamp}.${type}`,\n        Body: buf,\n        ACL: \"public-read\",\n        ContentEncoding: \"base64\",\n        ContentType: `image/${type}`,\n      };\n      try {\n        const uploadData = await s3bucket.upload(params).promise();\n        location = uploadData.Location;\n      } catch (error) {\n        console.log(error);\n        return res.status(200).json({ statusCode: 500, error });\n      }\n    }\n\n    if (data.email) {\n      email = data.email;\n      const { USER_POOL_ID } = process.env;\n\n      const params = {\n        UserPoolId: USER_POOL_ID,\n        Username: data.old_email,\n        UserAttributes: [\n          {\n            Name: \"email\",\n            Value: data.email,\n          },\n          {\n            Name: \"email_verified\",\n            Value: \"false\",\n          },\n        ],\n      };\n\n      await cognito.adminUpdateUserAttributes(params).promise();\n    }\n\n    const params = {\n      TableName: \"staff_list\",\n      Key: {\n        id: data.id,\n      },\n      ExpressionAttributeNames: {\n        \"#name_text\": \"name\",\n        \"#avatar\": \"avatar\",\n        \"#email\": \"email\",\n        \"#birth\": \"birth\",\n      },\n      ExpressionAttributeValues: {\n        \":name\": data.name,\n        \":avatar\": location,\n        \":email\": email,\n        \":birth\": data.birth,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression:\n        \"SET #name_text = :name, #avatar = :avatar, #email = :email, #birth = :birth, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    await dynamoDb.update(params).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Staff data has been successfully updated\",\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/updateavatar\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    let location = \"\";\n\n    var buf = Buffer.from(\n      data.avatar.replace(/^data:image\\/\\w+;base64,/, \"\"),\n      \"base64\"\n    );\n    const type = data.avatar.split(\";\")[0].split(\"/\")[1];\n    const s3params = {\n      Bucket: process.env.S3_BUCKET_NAME,\n      Key: `Home/Avatars/${data.organization_id}/avatar${timeStamp}.${type}`,\n      Body: buf,\n      ACL: \"public-read\",\n      ContentEncoding: \"base64\",\n      ContentType: `image/${type}`,\n    };\n    try {\n      const uploadData = await s3bucket.upload(s3params).promise();\n      location = uploadData.Location;\n    } catch (error) {\n      console.log(error);\n      return utils.responseData(200, { statusCode: 500, error });\n    }\n\n    const params = {\n      TableName: \"staff_list\",\n      Key: {\n        id: data.id,\n      },\n      ExpressionAttributeNames: {\n        \"#avatar\": \"avatar\",\n      },\n      ExpressionAttributeValues: {\n        \":avatar\": location,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression: \"SET #avatar = :avatar, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    await dynamoDb.update(params).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      avatar: location,\n      message: \"Profile Avatar has been successfully updated\",\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/changepin\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const staffParams = {\n      TableName: \"staff_list\",\n      Key: {\n        id: data.id,\n      },\n      ExpressionAttributeNames: {\n        \"#pin\": \"pin\",\n      },\n      ExpressionAttributeValues: {\n        \":pin\": data.pin,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression: \"SET #pin = :pin, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n    await dynamoDb.update(staffParams).promise();\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Pin has been successfully updated\",\n      response,\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/gethistory\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const staffParams = {\n      TableName: data.tableName,\n      FilterExpression: \"#staff_id = :staff_id\",\n      ExpressionAttributeNames: {\n        \"#staff_id\": \"staff_id\",\n      },\n      ExpressionAttributeValues: {\n        \":staff_id\": data.userId,\n      },\n    };\n\n    const staffHistoryList = await dynamoDb.scan(staffParams).promise();\n    return res.status(200).json({ statusCode: 200, data: staffHistoryList });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nexport default router;\n","import { Router } from \"express\";\nimport remote from \"./remote.route\";\n\nconst router = Router();\n\nrouter.use(\"/\", remote);\n\nexport default router;\n","import AWS from \"aws-sdk\";\nimport { Router } from \"express\";\n\nconst dynamoDb = new AWS.DynamoDB.DocumentClient();\n\nconst router = Router();\n\nrouter.post(\"/sites\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const params = {\n      TableName: \"site_list\",\n      FilterExpression: \"#organization_id = :organization_id\",\n      ExpressionAttributeNames: {\n        \"#organization_id\": \"organization_id\",\n      },\n      ExpressionAttributeValues: {\n        \":organization_id\": data.organization_id,\n      },\n    };\n    const result = await dynamoDb.scan(params).promise();\n    const response = {\n      statusCode: 200,\n      body: result.Items,\n    };\n\n    return res.status(200).json(response);\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nexport default router;\n","import { Router } from \"express\";\nimport report from \"./report.route\";\n\nconst router = Router();\n\nrouter.use(\"/\", report);\n\nexport default router;\n","import AWS from \"aws-sdk\";\nimport { Router } from \"express\";\nimport moment from \"moment\";\nconst uuid = require(\"uuid\");\n\nconst dynamoDb = new AWS.DynamoDB.DocumentClient();\nconst s3bucket = new AWS.S3();\n\nconst router = Router();\n\nasync function queryAndDeleteDynamoDB(params) {\n  const data = await dynamoDb.scan(params).promise();\n  for (let item of data.Items) {\n    const deleteParams = {\n      TableName: params.TableName,\n      Key: {\n        id: item.id,\n      },\n    };\n    await dynamoDb.delete(deleteParams).promise();\n  }\n  if (data.LastEvaluatedKey) {\n    params.ExclusiveStartKey = data.LastEvaluatedKey;\n    return queryAndDeleteDynamoDB(params);\n  }\n}\n\nrouter.post(\"/fetch\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const params = {\n      TableName: data.tableName,\n    };\n    const result = await dynamoDb.scan(params).promise();\n    const response = {\n      statusCode: 200,\n      body: result.Items,\n    };\n\n    return res.status(200).json(response);\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/scandate\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const params = {\n      TableName: data.tableName,\n      FilterExpression: \"#date between :start_date and :end_date\",\n      ExpressionAttributeNames: {\n        \"#date\": \"date\",\n      },\n      ExpressionAttributeValues: {\n        \":start_date\": data.start_date,\n        \":end_date\": data.end_date,\n      },\n    };\n\n    const result = await dynamoDb.scan(params).promise();\n\n    const response = {\n      statusCode: 200,\n      body: result,\n    };\n\n    return res.status(200).json(response);\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\n// router.post(\"/addtrack\", async (req, res) => {\n//   try {\n//     const timeStamp = new Date().getTime();\n//     const data = req.body;\n//     if (!data) {\n//       return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n//     }\n\n//     const TableName = data.tableName;\n//     let site_id = data.site_id;\n//     let last_start_date = data.last_start_date;\n//     let track_id = data.track_id;\n//     const clocked_state = data.state;\n\n//     let Item = data;\n//     Item.id = uuid.v1();\n//     Item.createdAt = timeStamp;\n//     Item.updateAt = timeStamp;\n//     Item.edit_state = 2;\n//     delete Item.tableName;\n//     delete Item.siteId;\n//     delete Item.track_id;\n//     delete Item.last_start_date;\n//     delete Item.state;\n//     delete Item.site_id;\n\n//     const params = {\n//       TableName: TableName,\n//       Item,\n//     };\n\n//     await dynamoDb.put(params).promise();\n\n//     var state = clocked_state;\n//     if (Item.end_date === null) {\n//       track_id = Item.id;\n//       last_start_date = data.start_date;\n//       state = true;\n//       site_id = TableName;\n//     }\n\n//     const staffParams = {\n//       TableName: \"staff_list\",\n//       Key: {\n//         id: data.staff_id,\n//       },\n//       ExpressionAttributeNames: {\n//         \"#clocked_state\": \"clocked_state\",\n//         \"#track_id\": \"track_id\",\n//         \"#site_id\": \"site_id\",\n//         \"#last_start_date\": \"last_start_date\",\n//       },\n//       ExpressionAttributeValues: {\n//         \":clocked_state\": state,\n//         \":track_id\": track_id,\n//         \":site_id\": site_id,\n//         \":last_start_date\": last_start_date,\n//         \":updateAt\": timeStamp,\n//       },\n//       UpdateExpression:\n//         \"SET #track_id = :track_id, #last_start_date = :last_start_date, #clocked_state = :clocked_state, #site_id = :site_id, updateAt = :updateAt\",\n//       ReturnValues: \"ALL_NEW\",\n//     };\n\n//     await dynamoDb.update(staffParams).promise();\n\n//     return res.status(200).json({\n//       statusCode: 200,\n//       message: `${Item.name} track data has been successfully created`,\n//     });\n//   } catch (error) {\n//     return res.status(200).json(error);\n//   }\n// });\n\nrouter.post(\"/addtrack\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request!\" });\n    }\n\n    const track_id = timeStamp;\n\n    const promise = data.dateList.map(async (item, index) => {\n      const uid = timeStamp + index + 1;\n\n      const dateParams = {\n        TableName: data.tableName,\n        Item: {\n          id: uid.toString(),\n          track_id: track_id,\n          staff_id: data.staff.id,\n          date: moment(item.start_date).format(\"YYYY-MM-DD\"),\n          start_date: item.start_date,\n          end_date: item.end_date,\n          total_time: item.total_time,\n          name: data.staff.name,\n          status: item.status,\n          track_type: 1,\n          createdAt: timeStamp,\n          updateAt: timeStamp,\n        },\n      };\n      await dynamoDb.put(dateParams).promise();\n    });\n\n    await Promise.all(promise);\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: `${data.staff.name} track data has been successfully created`,\n    });\n  } catch (error) {\n    console.log(error);\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/addtrack-v1\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request!\" });\n    }\n\n    const track_id = timeStamp;\n\n    const promise = data.dateList.map(async (item, index) => {\n      const uid = timeStamp + index + 1;\n\n      const dateParams = {\n        TableName: data.tableName,\n        Item: {\n          id: uid.toString(),\n          track_id: track_id,\n          staff_id: data.staff.id,\n          site_id: data.site.id,\n          date: moment(item.start_date).format(\"YYYY-MM-DD\"),\n          start_date: item.start_date,\n          end_date: item.end_date,\n          total_time: item.total_time,\n          name: data.staff.name,\n          status: item.status,\n          track_type: 1,\n          createdAt: timeStamp,\n          updateAt: timeStamp,\n        },\n      };\n      await dynamoDb.put(dateParams).promise();\n    });\n\n    await Promise.all(promise);\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: `${data.staff.name} track data has been successfully created`,\n    });\n  } catch (error) {\n    console.log(error);\n    return res.status(200).json(error);\n  }\n});\n\n// router.post(\"/updatetrack\", async (req, res) => {\n//   try {\n//     const timeStamp = new Date().getTime();\n//     const data = req.body;\n//     if (!data) {\n//       return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n//     }\n\n//     const dateParam = {\n//       TableName: data.tableName,\n//       Key: {\n//         id: data.id,\n//       },\n//       ExpressionAttributeNames: {\n//         \"#name\": \"name\",\n//         \"#staff_id\": \"staff_id\",\n//         \"#date\": \"date\",\n//         \"#start_date\": \"start_date\",\n//         \"#end_date\": \"end_date\",\n//         \"#start_origin\": \"start_origin\",\n//         \"#end_origin\": \"end_origin\",\n//         \"#total_time\": \"total_time\",\n//       },\n//       ExpressionAttributeValues: {\n//         \":name\": data.name,\n//         \":staff_id\": data.staff_id,\n//         \":date\": data.date,\n//         \":start_date\": data.start_date,\n//         \":end_date\": data.end_date,\n//         \":start_origin\": data.start_origin,\n//         \":end_origin\": data.end_origin,\n//         \":total_time\": data.total_time,\n//         \":edit_state\": 1,\n//         \":updateAt\": timeStamp,\n//       },\n//       UpdateExpression:\n//         \"SET #name = :name, #staff_id = :staff_id, #date = :date, #start_date = :start_date, #end_date = :end_date, #start_origin = :start_origin, #end_origin = :end_origin, #total_time = :total_time, edit_state = :edit_state, updateAt = :updateAt\",\n//       ReturnValues: \"ALL_NEW\",\n//     };\n\n//     await dynamoDb.update(dateParam).promise();\n\n//     if (data.state) {\n//       if (!data.subState) {\n//         const oldParams = {\n//           TableName: \"staff_list\",\n//           Key: {\n//             id: data.old_staff_id,\n//           },\n//           ExpressionAttributeNames: {\n//             \"#clocked_state\": \"clocked_state\",\n//           },\n//           ExpressionAttributeValues: {\n//             \":clocked_state\": false,\n//           },\n//           UpdateExpression: \"SET #clocked_state = :clocked_state\",\n//           ReturnValues: \"ALL_NEW\",\n//         };\n\n//         await dynamoDb.update(oldParams).promise();\n\n//         const params = {\n//           TableName: \"staff_list\",\n//           Key: {\n//             id: data.staff_id,\n//           },\n//           ExpressionAttributeNames: {\n//             \"#clocked_state\": \"clocked_state\",\n//             \"#last_start_date\": \"last_start_date\",\n//             \"#track_id\": \"track_id\",\n//             \"#site_id\": \"site_id\",\n//           },\n//           ExpressionAttributeValues: {\n//             \":clocked_state\": data.clocked_state,\n//             \":last_start_date\": data.start_date,\n//             \":track_id\": data.id,\n//             \":updateAt\": timeStamp,\n//             \":site_id\": data.tableName,\n//           },\n//           UpdateExpression:\n//             \"SET #last_start_date = :last_start_date, #clocked_state = :clocked_state, #track_id = :track_id, #site_id = :site_id, updateAt = :updateAt\",\n//           ReturnValues: \"ALL_NEW\",\n//         };\n\n//         await dynamoDb.update(params).promise();\n//       } else {\n//         if (data.clocked_state) {\n//           const params = {\n//             TableName: \"staff_list\",\n//             Key: {\n//               id: data.staff_id,\n//             },\n//             ExpressionAttributeNames: {\n//               \"#clocked_state\": \"clocked_state\",\n//               \"#last_start_date\": \"last_start_date\",\n//               \"#track_id\": \"track_id\",\n//               \"#site_id\": \"site_id\",\n//             },\n//             ExpressionAttributeValues: {\n//               \":clocked_state\": data.clocked_state,\n//               \":last_start_date\": data.start_date,\n//               \":track_id\": data.id,\n//               \":updateAt\": timeStamp,\n//               \":site_id\": data.tableName,\n//             },\n//             UpdateExpression:\n//               \"SET #last_start_date = :last_start_date, #clocked_state = :clocked_state, #track_id = :track_id, #site_id = :site_id, updateAt = :updateAt\",\n//             ReturnValues: \"ALL_NEW\",\n//           };\n\n//           await dynamoDb.update(params).promise();\n//         } else {\n//           const oldParams = {\n//             TableName: \"staff_list\",\n//             Key: {\n//               id: data.old_staff_id,\n//             },\n//             ExpressionAttributeNames: {\n//               \"#clocked_state\": \"clocked_state\",\n//             },\n//             ExpressionAttributeValues: {\n//               \":clocked_state\": false,\n//             },\n//             UpdateExpression: \"SET #clocked_state = :clocked_state\",\n//             ReturnValues: \"ALL_NEW\",\n//           };\n\n//           await dynamoDb.update(oldParams).promise();\n//         }\n//       }\n//     }\n\n//     return res.status(200).json({\n//       statusCode: 200,\n//       message: `${data.name} track data has been successfully updated`,\n//     });\n//   } catch (error) {\n//     return res.status(200).json(error);\n//   }\n// });\n\n// router.post(\"/deletetrack\", async (req, res) => {\n//   try {\n//     const timeStamp = new Date().getTime();\n//     const data = req.body;\n//     if (!data) {\n//       return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n//     }\n\n//     const params = {\n//       TableName: data.tableName,\n//       Key: {\n//         id: data.id,\n//       },\n//     };\n\n//     await dynamoDb.delete(params).promise();\n\n//     if (data.state) {\n//       const staffParams = {\n//         TableName: \"staff_list\",\n//         Key: {\n//           id: data.staff_id,\n//         },\n//         ExpressionAttributeNames: {\n//           \"#clocked_state\": \"clocked_state\",\n//         },\n//         ExpressionAttributeValues: {\n//           \":clocked_state\": false,\n//           \":updateAt\": timeStamp,\n//         },\n//         UpdateExpression:\n//           \"SET #clocked_state = :clocked_state, updateAt = :updateAt\",\n//         ReturnValues: \"ALL_NEW\",\n//       };\n\n//       await dynamoDb.update(staffParams).promise();\n//     }\n\n//     return res.status(200).json({\n//       statusCode: 200,\n//       message: \"Track data has been successfully deleted\",\n//     });\n//   } catch (error) {\n//     return res.status(200).json(error);\n//   }\n// });\n\nrouter.post(\"/updatetrack\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const promise = data.map(async (item, index) => {\n      const updateParam = {\n        TableName: item.tableName,\n        Key: {\n          id: item.id,\n        },\n        ExpressionAttributeNames: {\n          \"#date\": \"date\",\n          \"#start_date\": \"start_date\",\n          \"#end_date\": \"end_date\",\n          \"#status\": \"status\",\n          \"#total_time\": \"total_time\",\n        },\n        ExpressionAttributeValues: {\n          \":date\": moment(item.start_date).format(\"YYYY-MM-DD\"),\n          \":start_date\": item.start_date,\n          \":end_date\": item.end_date ? item.end_date : null,\n          \":status\": item.status,\n          \":total_time\": item.total_time,\n          \":updateAt\": timeStamp,\n        },\n        UpdateExpression:\n          \"SET #date = :date, #start_date = :start_date, #end_date = :end_date, #status = :status, #total_time = :total_time, updateAt = :updateAt\",\n        ReturnValues: \"ALL_NEW\",\n      };\n\n      // Check if the item has an origin_date\n      if (item.origin_date) {\n        // If it does, add it to the ExpressionAttributeNames, ExpressionAttributeValues, and UpdateExpression\n        updateParam.ExpressionAttributeNames[\"#origin_date\"] = \"origin_date\";\n        updateParam.ExpressionAttributeNames[\"#update_info\"] = \"update_info\";\n        updateParam.ExpressionAttributeValues[\":origin_date\"] =\n          item.origin_date;\n        updateParam.ExpressionAttributeValues[\":update_info\"] =\n          item.update_info;\n        updateParam.ExpressionAttributeValues[\":track_type\"] = 2;\n        updateParam.UpdateExpression +=\n          \", #origin_date = :origin_date, #update_info = :update_info, track_type = :track_type\";\n      }\n\n      // Return the promise from the map function\n      return dynamoDb.update(updateParam).promise();\n    });\n\n    // Now promise is an array of promises\n    await Promise.all(promise);\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: `Edit successful`,\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/deletetrack\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request!\" });\n    }\n\n    const params = {\n      TableName: data.tableName,\n      FilterExpression: \"#track_id = :track_id\",\n      ExpressionAttributeNames: {\n        \"#track_id\": \"track_id\",\n      },\n      ExpressionAttributeValues: {\n        \":track_id\": data.track_id, // Replace 'YourId' with the id you want to delete\n      },\n    };\n\n    await queryAndDeleteDynamoDB(params);\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"The report data has been deleted.\",\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/getimage\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const params = {\n      Bucket: process.env.S3_BUCKET_NAME, // replace with your bucket name\n      Key: data.key, // replace with the image key\n    };\n\n    try {\n      const data = await s3bucket.getObject(params).promise();\n      var base64Data = data.Body.toString(\"base64\");\n    } catch (error) {\n      console.log(error);\n      return res.status(200).json({ statusCode: 500, error });\n    }\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Company Logo\",\n      data: base64Data,\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/autoclockin\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request!\" });\n    }\n\n    const uid = timeStamp.toString();\n\n    const dateParams = {\n      TableName: data.tableName,\n      Item: {\n        id: uid,\n        track_id: uid,\n        staff_id: data.staff.id,\n        date: moment(data.dateList[0].start_date).format(\"YYYY-MM-DD\"),\n        start_date: data.dateList[0].start_date,\n        end_date: null,\n        total_time: null,\n        name: data.staff.name,\n        status: \"start\",\n        createdAt: timeStamp,\n        updateAt: timeStamp,\n      },\n    };\n\n    await dynamoDb.put(dateParams).promise();\n\n    const params = {\n      TableName: \"staff_list\",\n      Key: {\n        id: data.staff.id,\n      },\n      ExpressionAttributeNames: {\n        \"#clocked_state\": \"clocked_state\",\n        \"#break_state\": \"break_state\",\n        \"#track_id\": \"track_id\",\n        \"#record_id\": \"record_id\",\n        \"#site_id\": \"site_id\",\n        \"#last_start_date\": \"last_start_date\",\n      },\n      ExpressionAttributeValues: {\n        \":clocked_state\": true,\n        \":break_state\": false,\n        \":track_id\": uid,\n        \":record_id\": uid,\n        \":site_id\": data.tableName,\n        \":last_start_date\": data.dateList[0].start_date,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression:\n        \"SET #clocked_state = :clocked_state, #break_state = :break_state, #track_id = :track_id, #record_id = :record_id, #site_id = :site_id, #last_start_date = :last_start_date, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    const result = await dynamoDb.update(params).promise();\n\n    const response = {\n      stsatusCode: 200,\n      body: result.Attributes,\n    };\n\n    return res.status(200).json(response);\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nexport default router;\n","import { Router } from \"express\";\n\nimport role from \"./role.route\";\n\nconst router = Router();\n\nrouter.use(\"/\", role);\n\nexport default router;\n","import AWS from \"aws-sdk\";\nimport { Router } from \"express\";\nconst uuid = require(\"uuid\");\n\nconst dynamoDb = new AWS.DynamoDB.DocumentClient();\n\nconst router = Router();\n\nrouter.post(\"/create\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    let Item = {\n      id: timeStamp.toString(),\n      organization_id: data.organization_id,\n      role: data.roleName,\n      createAt: timeStamp,\n      updateAt: timeStamp,\n    };\n\n    const params = {\n      TableName: \"role_list\",\n      Item,\n    };\n\n    await dynamoDb.put(params).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Role has been successfully created\",\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/fetch\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const params = {\n      TableName: \"role_list\",\n      FilterExpression: \"#organization_id = :organization_id\",\n      ExpressionAttributeNames: {\n        \"#organization_id\": \"organization_id\",\n      },\n      ExpressionAttributeValues: {\n        \":organization_id\": data.organization_id,\n      },\n    };\n    const result = await dynamoDb.scan(params).promise();\n    const response = {\n      statusCode: 200,\n      body: result.Items,\n    };\n\n    return res.status(200).json(response);\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/update\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const params = {\n      TableName: \"role_list\",\n      Key: {\n        id: data.id,\n      },\n      ExpressionAttributeNames: {\n        \"#role_text\": \"role\",\n      },\n      ExpressionAttributeValues: {\n        \":role\": data.role,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression: \"SET #role_text = :role, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    await dynamoDb.update(params).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Role has been successfully updated\",\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/delete\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const params = {\n      TableName: \"role_list\",\n      Key: {\n        id: data.id,\n      },\n    };\n\n    await dynamoDb.delete(params).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Role has been successfully deleted\",\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/staffrole\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const params = {\n      TableName: \"staff_list\",\n      Key: {\n        id: data.id,\n      },\n      ExpressionAttributeNames: {\n        \"#role_text\": \"role\",\n      },\n      ExpressionAttributeValues: {\n        \":role\": data.role,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression: \"SET #role_text = :role, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    await dynamoDb.update(params).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Update Successful\",\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nexport default router;\n","import { Router } from \"express\";\n\nimport setting from \"./setting.route\";\n\nconst router = Router();\n\nrouter.use(\"/\", setting);\n\nexport default router;\n","import AWS from \"aws-sdk\";\nimport { Router } from \"express\";\n\nconst dynamoDb = new AWS.DynamoDB.DocumentClient();\n\nconst router = Router();\n\nrouter.post(\"/report\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request!\" });\n    }\n\n    const params = {\n      TableName: \"company_list\",\n      Key: {\n        id: data.id,\n      },\n      ExpressionAttributeNames: {\n        \"#site_report\": \"site_report\",\n        \"#staff_report\": \"staff_report\",\n        \"#show_day\": \"show_day\",\n      },\n      ExpressionAttributeValues: {\n        \":site_report\": data.site_report,\n        \":staff_report\": data.staff_report,\n        \":show_day\": data.showDay,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression:\n        \"SET #site_report = :site_report, #staff_report = :staff_report, #show_day = :show_day, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    await dynamoDb.update(params).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Report option data has been successfully updated\",\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nexport default router;\n","import { Router } from \"express\";\n\nimport site from \"./site.route\";\n\nconst router = Router();\n\nrouter.use(\"/\", site);\n\nexport default router;\n","import AWS from \"aws-sdk\";\nimport { Router } from \"express\";\nconst uuid = require(\"uuid\");\n\nconst dynamoDb = new AWS.DynamoDB.DocumentClient();\n\nconst router = Router();\n\nrouter.post(\"/create\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    let Item = data;\n    Item.id = timeStamp.toString();\n    Item.createAt = timeStamp;\n    Item.updateAt = timeStamp;\n\n    const params = {\n      TableName: \"site_list\",\n      Item,\n    };\n\n    await dynamoDb.put(params).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Site data has been successfully created\",\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/fetch\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const params = {\n      TableName: \"site_list\",\n      FilterExpression: \"#organization_id = :organization_id\",\n      ExpressionAttributeNames: {\n        \"#organization_id\": \"organization_id\",\n      },\n      ExpressionAttributeValues: {\n        \":organization_id\": data.organization_id,\n      },\n    };\n    const result = await dynamoDb.scan(params).promise();\n    const response = {\n      statusCode: 200,\n      body: result.Items,\n    };\n\n    return res.status(200).json(response);\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/update\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const params = {\n      TableName: \"site_list\",\n      Key: {\n        id: data.id,\n      },\n      ExpressionAttributeNames: {\n        \"#name_text\": \"name\",\n        \"#description_text\": \"description\",\n        \"#round\": \"round\",\n        \"#radius\": \"radius\",\n        \"#remote\": \"remote\",\n      },\n      ExpressionAttributeValues: {\n        \":name\": data.name,\n        \":description\": data.description,\n        \":round\": data.round,\n        \":radius\": data.radius,\n        \":remote\": data.remote,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression:\n        \"SET #name_text = :name, #description_text = :description, #round = :round, #radius = :radius, #remote = :remote, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    await dynamoDb.update(params).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Site data has been successfully updated\",\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/update-v1\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const params = {\n      TableName: \"site_list\",\n      Key: {\n        id: data.id,\n      },\n      ExpressionAttributeNames: {\n        \"#name_text\": \"name\",\n        \"#description_text\": \"description\",\n        \"#round\": \"round\",\n        \"#radius\": \"radius\",\n        \"#remote\": \"remote\",\n        \"#address\": \"address\",\n        \"#lat\": \"lat\",\n        \"#lng\": \"lng\",\n      },\n      ExpressionAttributeValues: {\n        \":name\": data.name,\n        \":description\": data.description,\n        \":round\": data.round,\n        \":radius\": data.radius,\n        \":remote\": data.remote,\n        \":address\": data.address,\n        \":lat\": data.lat,\n        \":lng\": data.lng,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression:\n        \"SET #name_text = :name, #description_text = :description, #round = :round, #radius = :radius, #remote = :remote, #address = :address, #lat = :lat, #lng = :lng, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    await dynamoDb.update(params).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Site data has been successfully updated\",\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/location\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const params = {\n      TableName: \"site_list\",\n      Key: {\n        id: data.id,\n      },\n      ExpressionAttributeNames: {\n        \"#lat\": \"lat\",\n        \"#lng\": \"lng\",\n        \"#address\": \"address\",\n      },\n      ExpressionAttributeValues: {\n        \":lat\": data.lat,\n        \":lng\": data.lng,\n        \":address\": data.address,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression:\n        \"SET #lat = :lat, #lng = :lng, #address = :address, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    await dynamoDb.update(params).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Location data has been successfully updated\",\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/delete\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const params = {\n      TableName: \"site_list\",\n      Key: {\n        id: data.id,\n      },\n    };\n\n    await dynamoDb.delete(params).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Site data had been successfully deleted\",\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/settime\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const updateParams = {\n      TableName: \"site_list\",\n      Key: {\n        id: data.id,\n      },\n      ExpressionAttributeNames: {\n        \"#siteClockInTime\": \"siteClockInTime\",\n      },\n      ExpressionAttributeValues: {\n        \":siteClockInTime\": data.siteClockInTime,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression:\n        \"SET #siteClockInTime = :siteClockInTime, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    await dynamoDb.update(updateParams).promise();\n\n    return res\n      .status(200)\n      .json({ statusCode: 200, message: \"Site clock in time is setted.\" });\n  } catch (error) {\n    return res.status(200).json({ statusCode: 500, error: error });\n  }\n});\n\nexport default router;\n","import { Router } from \"express\";\n\nimport staff from \"./staff.route\";\n\nconst router = Router();\n\nrouter.use(\"/\", staff);\n\nexport default router;\n","import AWS from \"aws-sdk\";\nimport { Router } from \"express\";\nimport moment from \"moment\";\nconst uuid = require(\"uuid\");\n\nconst cognito = new AWS.CognitoIdentityServiceProvider();\nconst dynamoDb = new AWS.DynamoDB.DocumentClient();\nconst s3bucket = new AWS.S3();\nvar ses = new AWS.SES();\n\nconst router = Router();\n\nfunction roundToNearestFiveMinutes(date, round) {\n  const ms = 1000 * 60 * round; // convert 5 minutes to milliseconds\n  const roundedDate = new Date(Math.round(date / ms) * ms);\n  return roundedDate.getTime();\n}\n\nrouter.post(\"/create\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    // const companyStateCheckParam = {\n    //   TableName: \"company_list\",\n    //   Key: {\n    //     id: data.companyInfo.organization_id,\n    //   },\n    // };\n\n    // const companyData = await dynamoDb.get(companyStateCheckParam).promise();\n    // console.log(companyData);\n    // if (companyData.Item.state === \"free\" && data.staffAmount === 3) {\n    //   return res.status(200).json({\n    //     statusCode: 400,\n    //     type: \"free\",\n    //     message: \"You have to upgrade your plan to add staffs further.\",\n    //   });\n    // }\n\n    const pin = Math.floor(1000 + Math.random() * 9000);\n    var result = \"\";\n    var characters =\n      \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    var charactersLength = characters.length;\n    for (var i = 0; i < 10; i++) {\n      result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n\n    let avatar = process.env.DEFAULT_AVATAR;\n\n    if (data.avatar) {\n      var buf = Buffer.from(\n        data.avatar.replace(/^data:image\\/\\w+;base64,/, \"\"),\n        \"base64\"\n      );\n      const type = data.avatar.split(\";\")[0].split(\"/\")[1];\n      const params = {\n        Bucket: process.env.S3_BUCKET_NAME,\n        Key: `Home/Avatars/${data.companyInfo.organization_id}/avatar${timeStamp}.${type}`,\n        Body: buf,\n        ACL: \"public-read\",\n        ContentEncoding: \"base64\",\n        ContentType: `image/${type}`,\n      };\n      try {\n        const uploadData = await s3bucket.upload(params).promise();\n        avatar = uploadData.Location;\n      } catch (error) {\n        console.log(error);\n        return res.status(200).json({ statusCode: 500, error });\n      }\n    }\n\n    let Item = {\n      id: timeStamp.toString(),\n      organization_id: data.companyInfo.organization_id,\n      email: data.email,\n      name: data.name,\n      avatar: avatar,\n      pin: pin,\n      role: data.role,\n      level: data.level,\n      type: data.type,\n      site_id: null,\n      track_id: null,\n      clocked_state: false,\n      state: true,\n      last_start_date: null,\n      createAt: timeStamp,\n      updateAt: timeStamp,\n    };\n\n    const params = {\n      UserPoolId: process.env.USER_POOL_ID, // replace with your User Pool ID\n      Username: data.email, // replace with the username\n      TemporaryPassword: result, // replace with a temporary password\n      UserAttributes: [\n        {\n          Name: \"email\",\n          Value: data.email, // replace with the user's email\n        },\n        {\n          Name: \"email_verified\",\n          Value: \"true\",\n        },\n        {\n          Name: \"custom:role\",\n          Value: data.level == 2 ? \"admin\" : \"member\",\n        },\n        {\n          Name: \"custom:user_id\",\n          Value: Item.id,\n        },\n        {\n          Name: \"custom:level\",\n          Value: data.level.toString(),\n        },\n        {\n          Name: \"custom:organization_id\",\n          Value: data.companyInfo.organization_id,\n        },\n      ],\n      MessageAction: \"SUPPRESS\", // suppresses the welcome message\n    };\n    await cognito.adminCreateUser(params).promise();\n\n    const staffParams = {\n      TableName: \"staff_list\",\n      Item,\n    };\n\n    await dynamoDb.put(staffParams).promise();\n\n    const inviteLink =\n      data.level === 2\n        ? \"https://app.teamixo.com/invite/\" + Item.id\n        : \"https://user.teamixo.com/invite/\" + Item.id;\n\n    var emailParams = {\n      Destination: {\n        ToAddresses: [data.email], // replace recipient@example.com with the recipient's email address\n      },\n      Message: {\n        Body: {\n          Html: {\n            Charset: \"UTF-8\",\n            Data: `<div>\n              <p>Dear ${data.name}</p>\n              <p>\n                You have been invited to join the ${data.companyInfo.name} workspace, we use this\n                system for you to clock-in and clock-out of your shifts as well as to manage\n                your employee profile, it is important you setup your profile now using the\n                link below:\n              </p>\n              <p>\n                <a\n                  href=\"${inviteLink}\"\n                  style=\"\n                    height: 20px;\n                    background-color: #3a2456;\n                    color: white;\n                    border-radius: 6px;\n                    padding: 5px 8px 5px 8px;\n                    text-decoration: none;\n                    font-weight: 600;\n                  \"\n                  >SET PASSWORD</a\n                >\n              </p>\n              <p>\n                <span style=\"font-weight: 600\"\n                  >You will need your PIN number to create your password</span\n                ><span>- your unique PIN number is: </span\n                ><span style=\"font-weight: 600\">${pin}.</span>\n              </p>\n              <p>\n                <span style=\"font-weight: 600\"\n                  >You will also use this PIN to clock in and clock out of shifts so please\n                  keep it safe and on hand.</span\n                >\n              </p>\n              <p>\n                <span\n                  >Once you have created your account using the link above you will be able\n                  to login at</span\n                ><br />\n                <a href=\"https://app.teamixo.com/\" style=\"text-decoration: none\"\n                  >https://user.teamixo.com</a\n                ><span style=\"font-weight: 600\">\n                  where you can manage your profile and update your PIN to a more memorable\n                  number for yourself.</span\n                >\n              </p>\n              <p>\n                If you have any questions please reply to this e-mail, send an e-mail to\n                ${data.companyInfo.email} or contact your manager.\n              </p>\n              <p>Kind Regards,</p>\n              <p>The ${data.companyInfo.name} admin team.</p>\n            </div>\n            `,\n          },\n        },\n        Subject: {\n          Charset: \"UTF-8\",\n          Data: `You are invited as member from ${data.companyInfo.name}`, // replace with your email subject\n        },\n      },\n      Source: \"Teamixo Support <support@teamixo.com>\", // replace sender@example.com with your \"From\" address\n    };\n\n    await ses.sendEmail(emailParams).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Staff data has been successfully created\",\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/fetch\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const params = {\n      TableName: \"staff_list\",\n      FilterExpression: \"#organization_id = :organization_id\",\n      ExpressionAttributeNames: {\n        \"#organization_id\": \"organization_id\",\n      },\n      ExpressionAttributeValues: {\n        \":organization_id\": data.organization_id,\n      },\n    };\n    const result = await dynamoDb.scan(params).promise();\n    const response = {\n      statusCode: 200,\n      body: result.Items,\n    };\n\n    return res.status(200).json(response);\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/update\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    let location = data.avatar;\n    let email = data.old_email;\n\n    if (data.base64) {\n      var buf = Buffer.from(\n        data.base64.replace(/^data:image\\/\\w+;base64,/, \"\"),\n        \"base64\"\n      );\n      const type = data.base64.split(\";\")[0].split(\"/\")[1];\n      const params = {\n        Bucket: process.env.S3_BUCKET_NAME,\n        Key: `Home/Avatars/${data.organization_id}/avatar${timeStamp}.${type}`,\n        Body: buf,\n        ACL: \"public-read\",\n        ContentEncoding: \"base64\",\n        ContentType: `image/${type}`,\n      };\n      try {\n        const uploadData = await s3bucket.upload(params).promise();\n        location = uploadData.Location;\n      } catch (error) {\n        console.log(error);\n        return res.status(200).json({ statusCode: 500, error });\n      }\n    }\n\n    if (data.email) {\n      email = data.email;\n      const { USER_POOL_ID } = process.env;\n\n      const params = {\n        UserPoolId: USER_POOL_ID,\n        Username: data.old_email,\n        UserAttributes: [\n          {\n            Name: \"email\",\n            Value: data.email,\n          },\n          {\n            Name: \"email_verified\",\n            Value: \"false\",\n          },\n        ],\n      };\n\n      await cognito.adminUpdateUserAttributes(params).promise();\n    }\n\n    const params = {\n      TableName: \"staff_list\",\n      Key: {\n        id: data.id,\n      },\n      ExpressionAttributeNames: {\n        \"#name_text\": \"name\",\n        \"#role_text\": \"role\",\n        \"#avatar\": \"avatar\",\n        \"#email\": \"email\",\n        \"#birth\": \"birth\",\n        \"#pin\": \"pin\",\n        \"#type\": \"type\",\n        \"#state\": \"state\",\n      },\n      ExpressionAttributeValues: {\n        \":name\": data.name,\n        \":role\": data.role,\n        \":type\": data.type,\n        \":avatar\": location,\n        \":email\": email,\n        \":birth\": data.birth,\n        \":pin\": data.pin,\n        \":state\": true,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression:\n        \"SET #name_text = :name, #role_text = :role, #type = :type, #avatar = :avatar, #email = :email, #birth = :birth, #pin = :pin, #state = :state, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    await dynamoDb.update(params).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Staff data has been successfully updated\",\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/upgrade\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const pin = Math.floor(1000 + Math.random() * 9000);\n    var result = \"\";\n    var characters =\n      \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    var charactersLength = characters.length;\n    for (var i = 0; i < 10; i++) {\n      result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n\n    const addParams = {\n      UserPoolId: process.env.USER_POOL_ID, // replace with your User Pool ID\n      Username: data.email, // replace with the username\n      TemporaryPassword: result, // replace with a temporary password\n      UserAttributes: [\n        {\n          Name: \"email\",\n          Value: data.email, // replace with the user's email\n        },\n        {\n          Name: \"email_verified\",\n          Value: \"true\",\n        },\n        {\n          Name: \"custom:role\",\n          Value: \"member\",\n        },\n        {\n          Name: \"custom:user_id\",\n          Value: data.id,\n        },\n        {\n          Name: \"custom:level\",\n          Value: \"3\",\n        },\n        {\n          Name: \"custom:organization_id\",\n          Value: data.organization_id,\n        },\n      ],\n      MessageAction: \"SUPPRESS\", // suppresses the welcome message\n    };\n    await cognito.adminCreateUser(addParams).promise();\n\n    const params = {\n      TableName: \"staff_list\",\n      Key: {\n        id: data.id,\n      },\n      ExpressionAttributeNames: {\n        \"#role_text\": \"role\",\n        \"#type\": \"type\",\n        \"#state\": \"state\",\n        \"#pin\": \"pin\",\n      },\n      ExpressionAttributeValues: {\n        \":role\": data.role,\n        \":type\": data.type,\n        \":state\": true,\n        \":pin\": pin,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression:\n        \"SET #role_text = :role, #type = :type, #state = :state, #pin = :pin, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    await dynamoDb.update(params).promise();\n\n    const inviteLink = \"https://user.teamixo.com/invite/\" + data.id;\n\n    var emailParams = {\n      Destination: {\n        ToAddresses: [data.email], // replace recipient@example.com with the recipient's email address\n      },\n      Message: {\n        Body: {\n          Html: {\n            Charset: \"UTF-8\",\n            Data: `<div>\n            <p>Dear ${data.name}</p>\n            <p>\n              You have been invited to join the ${data.companyInfo.name} workspace, we use this\n              system for you to clock-in and clock-out of your shifts as well as to manage\n              your employee profile, it is important you setup your profile now using the\n              link below:\n            </p>\n            <p>\n              <a\n                href=\"${inviteLink}\"\n                style=\"\n                  height: 20px;\n                  background-color: #3a2456;\n                  color: white;\n                  border-radius: 6px;\n                  padding: 5px 8px 5px 8px;\n                  text-decoration: none;\n                  font-weight: 600;\n                \"\n                >SET PASSWORD</a\n              >\n            </p>\n            <p>\n              <span style=\"font-weight: 600\"\n                >You will need your PIN number to create your password</span\n              ><span>- your unique PIN number is: </span\n              ><span style=\"font-weight: 600\">${pin}.</span>\n            </p>\n            <p>\n              <span style=\"font-weight: 600\"\n                >You will also use this PIN to clock in and clock out of shifts so please\n                keep it safe and on hand.</span\n              >\n            </p>\n            <p>\n              <span\n                >Once you have created your account using the link above you will be able\n                to login at</span\n              ><br />\n              <a href=\"https://app.teamixo.com/\" style=\"text-decoration: none\"\n                >https://app.teamixo.com/</a\n              ><span style=\"font-weight: 600\">\n                where you can manage your profile and update your PIN to a more memorable\n                number for yourself.</span\n              >\n            </p>\n            <p>\n              If you have any questions please reply to this e-mail, send an e-mail to\n              ${data.companyInfo.email} or contact your manager.\n            </p>\n            <p>Kind Regards,</p>\n            <p>The ${data.companyInfo.name} admin team.</p>\n          </div>\n          `,\n          },\n        },\n        Subject: {\n          Charset: \"UTF-8\",\n          Data: `You are invited as member from ${data.companyInfo.name}`, // replace with your email subject\n        },\n      },\n      Source: \"support@teamixo.com\", // replace sender@example.com with your \"From\" address\n    };\n\n    await ses.sendEmail(emailParams).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Upgrade Successful\",\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/delete\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Reqeust\" });\n    }\n\n    if (data.state) {\n      const params = {\n        UserPoolId: process.env.USER_POOL_ID,\n        Username: data.email,\n      };\n\n      await cognito.adminDeleteUser(params).promise();\n    }\n\n    const params = {\n      TableName: \"staff_list\",\n      Key: {\n        id: data.id,\n      },\n    };\n\n    await dynamoDb.delete(params).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Staff data has been successfully deleted\",\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/addpermission\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const permissionParam = {\n      TableName: \"staff_list\",\n      Key: {\n        id: data.id,\n      },\n      ExpressionAttributeNames: {\n        \"#permission\": \"permission\",\n      },\n      ExpressionAttributeValues: {\n        \":permission\": data.permission,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression: \"SET #permission = :permission, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    await dynamoDb.update(permissionParam).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Permissions has been successfully added!\",\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/fetchadmin\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const params = {\n      TableName: \"staff_list\",\n      FilterExpression:\n        \"#organization_id = :organization_id AND #level = :level\",\n      ExpressionAttributeNames: {\n        \"#organization_id\": \"organization_id\",\n        \"#level\": \"level\",\n      },\n      ExpressionAttributeValues: {\n        \":organization_id\": data.organization_id,\n        \":level\": 2,\n      },\n    };\n    const result = await dynamoDb.scan(params).promise();\n    const response = {\n      statusCode: 200,\n      body: result.Items,\n    };\n\n    return res.status(200).json(response);\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/grade\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const updateParams = {\n      TableName: \"staff_list\",\n      Key: {\n        id: data.id,\n      },\n      ExpressionAttributeNames: {\n        \"#level\": \"level\",\n        \"#permission\": \"permission\",\n        \"#role\": \"role\",\n      },\n      ExpressionAttributeValues: {\n        \":level\": data.level,\n        \":permission\": data.permission,\n        \":role\": data.staff_role,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression:\n        \"SET #level = :level, #permission = :permission, #role = :role, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n    await dynamoDb.update(updateParams).promise();\n\n    const cognitoParams = {\n      UserPoolId: process.env.USER_POOL_ID,\n      Username: data.email,\n      UserAttributes: [\n        {\n          Name: \"custom:level\",\n          Value: data.level.toString(),\n        },\n        {\n          Name: \"custom:role\",\n          Value: data.role,\n        },\n      ],\n    };\n\n    await cognito.adminUpdateUserAttributes(cognitoParams).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Staff has been successfully down graded\",\n    });\n  } catch (error) {\n    res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/block\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const updateParams = {\n      TableName: \"staff_list\",\n      Key: {\n        id: data.id,\n      },\n      ExpressionAttributeNames: {\n        \"#block_state\": \"block_state\",\n      },\n      ExpressionAttributeValues: {\n        \":block_state\": data.block_state,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression: \"SET #block_state = :block_state, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    await dynamoDb.update(updateParams).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Staff block state has been successfully changed\",\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/emailduplicate\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    var params = {\n      TableName: \"staff_list\",\n      FilterExpression: \"#email = :email\",\n      ExpressionAttributeNames: { \"#email\": \"email\" }, // field to check\n      ExpressionAttributeValues: { \":email\": data.email },\n    };\n\n    const result = await dynamoDb.scan(params).promise();\n\n    return res.status(200).json({ statusCode: 200, data: result.Items });\n  } catch (error) {\n    console.log(error);\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/start\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request!\" });\n    }\n\n    const uid = timeStamp.toString();\n\n    const dateParams = {\n      TableName: data.tableName,\n      Item: {\n        id: uid,\n        track_id: uid,\n        staff_id: data.staff.id,\n        date: moment(data.date).format(\"YYYY-MM-DD\"),\n        start_date: roundToNearestFiveMinutes(data.date, data.round),\n        end_date: null,\n        total_time: null,\n        name: data.staff.name,\n        status: \"start\",\n        createdAt: timeStamp,\n        updateAt: timeStamp,\n      },\n    };\n\n    const resu = await dynamoDb.put(dateParams).promise();\n\n    const params = {\n      TableName: \"staff_list\",\n      Key: {\n        id: data.staff.id,\n      },\n      ExpressionAttributeNames: {\n        \"#clocked_state\": \"clocked_state\",\n        \"#break_state\": \"break_state\",\n        \"#track_id\": \"track_id\",\n        \"#record_id\": \"record_id\",\n        \"#site_id\": \"site_id\",\n        \"#last_start_date\": \"last_start_date\",\n      },\n      ExpressionAttributeValues: {\n        \":clocked_state\": true,\n        \":break_state\": false,\n        \":track_id\": uid,\n        \":record_id\": uid,\n        \":site_id\": data.tableName,\n        \":last_start_date\": roundToNearestFiveMinutes(data.date, data.round),\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression:\n        \"SET #clocked_state = :clocked_state, #break_state = :break_state, #track_id = :track_id, #record_id = :record_id, #site_id = :site_id, #last_start_date = :last_start_date, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    await dynamoDb.update(params).promise();\n\n    const response = {\n      stsatusCode: 200,\n      message: \"The staff has been clocked in successfully.\",\n    };\n\n    return res.status(200).json(response);\n  } catch (error) {\n    console.log(error);\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/start-v1\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request!\" });\n    }\n\n    const uid = timeStamp.toString();\n\n    const dateParams = {\n      TableName: data.tableName,\n      Item: {\n        id: uid,\n        track_id: uid,\n        staff_id: data.staff.id,\n        site_id: data.site.id,\n        date: moment(data.date).format(\"YYYY-MM-DD\"),\n        start_date: roundToNearestFiveMinutes(data.date, data.round),\n        end_date: null,\n        total_time: null,\n        name: data.staff.name,\n        status: \"start\",\n        createdAt: timeStamp,\n        updateAt: timeStamp,\n      },\n    };\n\n    const resu = await dynamoDb.put(dateParams).promise();\n\n    const params = {\n      TableName: \"staff_list\",\n      Key: {\n        id: data.staff.id,\n      },\n      ExpressionAttributeNames: {\n        \"#clocked_state\": \"clocked_state\",\n        \"#break_state\": \"break_state\",\n        \"#track_id\": \"track_id\",\n        \"#record_id\": \"record_id\",\n        \"#site_id\": \"site_id\",\n        \"#last_start_date\": \"last_start_date\",\n      },\n      ExpressionAttributeValues: {\n        \":clocked_state\": true,\n        \":break_state\": false,\n        \":track_id\": uid,\n        \":record_id\": uid,\n        \":site_id\": data.site.id,\n        \":last_start_date\": roundToNearestFiveMinutes(data.date, data.round),\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression:\n        \"SET #clocked_state = :clocked_state, #break_state = :break_state, #track_id = :track_id, #record_id = :record_id, #site_id = :site_id, #last_start_date = :last_start_date, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    await dynamoDb.update(params).promise();\n\n    const response = {\n      stsatusCode: 200,\n      message: \"The staff has been clocked in successfully.\",\n    };\n\n    return res.status(200).json(response);\n  } catch (error) {\n    console.log(error);\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/end\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request!\" });\n    }\n    //calculate the total time from start work to start break\n    var differenceInMs =\n      roundToNearestFiveMinutes(data.date, data.round) -\n      data.staff.last_start_date;\n\n    var total_time = differenceInMs;\n\n    const uid = timeStamp.toString();\n    // update the start state record with total time and end time\n    const updateParams = {\n      TableName: data.tableName,\n      Key: {\n        id: data.staff.record_id,\n      },\n      ExpressionAttributeNames: {\n        \"#end_date\": \"end_date\",\n        \"#total_time\": \"total_time\",\n      },\n      ExpressionAttributeValues: {\n        \":end_date\": roundToNearestFiveMinutes(data.date, data.round),\n        \":total_time\": total_time,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression:\n        \"SET #end_date = :end_date, #total_time = :total_time, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    await dynamoDb.update(updateParams).promise();\n\n    // add new record to report table with break state\n    const addParams = {\n      TableName: data.tableName,\n      Item: {\n        id: uid,\n        track_id: data.staff.track_id,\n        staff_id: data.staff.id,\n        date: moment(data.date).format(\"YYYY-MM-DD\"),\n        start_date: roundToNearestFiveMinutes(data.date, data.round),\n        total_time: 0,\n        name: data.staff.name,\n        status: \"end\",\n        createdAt: timeStamp,\n        updateAt: timeStamp,\n      },\n    };\n\n    await dynamoDb.put(addParams).promise();\n\n    const updateUserParam = {\n      TableName: \"staff_list\",\n      Key: {\n        id: data.staff.id,\n      },\n      ExpressionAttributeNames: {\n        \"#clocked_state\": \"clocked_state\",\n        \"#break_state\": \"break_state\",\n        \"#record_id\": \"record_id\",\n        \"#site_id\": \"site_id\",\n        \"#last_start_date\": \"last_start_date\",\n      },\n      ExpressionAttributeValues: {\n        \":clocked_state\": false,\n        \":break_state\": false,\n        \":record_id\": null,\n        \":site_id\": null,\n        \":last_start_date\": null,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression:\n        \"SET #clocked_state = :clocked_state, #break_state = :break_state, #record_id = :record_id, #site_id = :site_id, #last_start_date = :last_start_date, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    const result = await dynamoDb.update(updateUserParam).promise();\n    const response = {\n      stsatusCode: 200,\n      message: \"The staff has been clocked out successfully.\",\n    };\n\n    return res.status(200).json(response);\n  } catch (error) {\n    console.log(error);\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/end-v1\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request!\" });\n    }\n    //calculate the total time from start work to start break\n    var differenceInMs =\n      roundToNearestFiveMinutes(data.date, data.round) -\n      data.staff.last_start_date;\n\n    var total_time = differenceInMs;\n\n    const uid = timeStamp.toString();\n    // update the start state record with total time and end time\n    const updateParams = {\n      TableName: data.tableName,\n      Key: {\n        id: data.staff.record_id,\n      },\n      ExpressionAttributeNames: {\n        \"#end_date\": \"end_date\",\n        \"#total_time\": \"total_time\",\n      },\n      ExpressionAttributeValues: {\n        \":end_date\": roundToNearestFiveMinutes(data.date, data.round),\n        \":total_time\": total_time,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression:\n        \"SET #end_date = :end_date, #total_time = :total_time, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    await dynamoDb.update(updateParams).promise();\n\n    // add new record to report table with break state\n    const addParams = {\n      TableName: data.tableName,\n      Item: {\n        id: uid,\n        track_id: data.staff.track_id,\n        staff_id: data.staff.id,\n        site_id: data.site.id,\n        date: moment(data.date).format(\"YYYY-MM-DD\"),\n        start_date: roundToNearestFiveMinutes(data.date, data.round),\n        total_time: 0,\n        name: data.staff.name,\n        status: \"end\",\n        createdAt: timeStamp,\n        updateAt: timeStamp,\n      },\n    };\n\n    await dynamoDb.put(addParams).promise();\n\n    const updateUserParam = {\n      TableName: \"staff_list\",\n      Key: {\n        id: data.staff.id,\n      },\n      ExpressionAttributeNames: {\n        \"#clocked_state\": \"clocked_state\",\n        \"#break_state\": \"break_state\",\n        \"#record_id\": \"record_id\",\n        \"#site_id\": \"site_id\",\n        \"#last_start_date\": \"last_start_date\",\n      },\n      ExpressionAttributeValues: {\n        \":clocked_state\": false,\n        \":break_state\": false,\n        \":record_id\": null,\n        \":site_id\": null,\n        \":last_start_date\": null,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression:\n        \"SET #clocked_state = :clocked_state, #break_state = :break_state, #record_id = :record_id, #site_id = :site_id, #last_start_date = :last_start_date, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    const result = await dynamoDb.update(updateUserParam).promise();\n    const response = {\n      stsatusCode: 200,\n      message: \"The staff has been clocked out successfully.\",\n    };\n\n    return res.status(200).json(response);\n  } catch (error) {\n    console.log(error);\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/setclock\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const updateParams = {\n      TableName: \"staff_list\",\n      Key: {\n        id: data.id,\n      },\n      ExpressionAttributeNames: {\n        \"#clockInTime\": \"clockInTime\",\n        \"#clockOutTime\": \"clockOutTime\",\n      },\n      ExpressionAttributeValues: {\n        \":clockInTime\": data.clockInTime,\n        \":clockOutTime\": data.clockOutTime,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression:\n        \"SET #clockInTime = :clockInTime, #clockOutTime = :clockOutTime, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    await dynamoDb.update(updateParams).promise();\n\n    return res\n      .status(200)\n      .json({ statusCode: 200, message: \"Staff clock time is setted!\" });\n  } catch (error) {\n    return res.status(200).json({ statusCode: 500, error: error });\n  }\n});\n\nexport default router;\n","import { Router } from \"express\";\n\nimport user from \"./user.route\";\n\nconst router = Router();\n\nrouter.use(\"/\", user);\n\nexport default router;\n","import AWS from \"aws-sdk\";\nimport { Router } from \"express\";\nconst uuid = require(\"uuid\");\n\nconst cognito = new AWS.CognitoIdentityServiceProvider();\nconst dynamoDb = new AWS.DynamoDB.DocumentClient();\n\nconst router = Router();\n\nrouter.post(\"/signup\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, error: \"Bad Request\" });\n    }\n    const { CLIENT_ID } = process.env;\n\n    const userId = timeStamp.toString();\n\n    const params = {\n      ClientId: CLIENT_ID,\n      Password: data.password,\n      Username: data.email,\n      UserAttributes: [\n        {\n          Name: \"email\",\n          Value: data.email,\n        },\n        {\n          Name: \"custom:user_id\",\n          Value: userId,\n        },\n        {\n          Name: \"custom:role\",\n          Value: \"owner\",\n        },\n        {\n          Name: \"custom:level\",\n          Value: \"1\",\n        },\n        {\n          Name: \"custom:organization_id\",\n          Value: userId,\n        },\n      ],\n    };\n    await cognito.signUp(params).promise();\n\n    const pin = Math.floor(1000 + Math.random() * 9000);\n\n    var staffItems = {\n      id: userId,\n      organization_id: userId,\n      email: data.email,\n      name: data.fname,\n      first_name: data.firstName,\n      last_name: data.lastName,\n      avatar: process.env.DEFAULT_AVATAR,\n      pin: pin,\n      role: [\"owner\"],\n      level: 1,\n      type: 1,\n      site_id: null,\n      track_id: null,\n      clocked_state: false,\n      state: true,\n      last_start_date: null,\n      createAt: timeStamp,\n      updateAt: timeStamp,\n    };\n\n    const staffParams = {\n      TableName: \"staff_list\",\n      Item: staffItems,\n    };\n\n    await dynamoDb.put(staffParams).promise();\n\n    res.status(200).json({\n      statusCode: 200,\n      message: \"User registration successful\",\n      response: staffItems,\n    });\n  } catch (error) {\n    console.error(\"An error ocurred:\", error);\n    res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/login\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n    const { USER_POOL_ID, CLIENT_ID } = process.env;\n    const params = {\n      AuthFlow: \"ADMIN_NO_SRP_AUTH\",\n      UserPoolId: USER_POOL_ID,\n      ClientId: CLIENT_ID,\n      AuthParameters: {\n        USERNAME: data.email,\n        PASSWORD: data.password,\n      },\n    };\n    const response = await cognito.adminInitiateAuth(params).promise();\n    res.status(200).json({\n      statusCode: 200,\n      message: \"Login succeed\",\n      token: response.AuthenticationResult.IdToken,\n      accessToken: response.AuthenticationResult.AccessToken,\n    });\n  } catch (error) {\n    console.error(\"An error ocurred:\", error);\n    res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/confirmEmail\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n    const { CLIENT_ID } = process.env;\n    const params = {\n      ClientId: CLIENT_ID,\n      Username: data.email,\n      ConfirmationCode: data.confirmCode,\n    };\n    const response = await cognito.confirmSignUp(params).promise();\n\n    res.status(200).json({\n      statusCode: 200,\n      message: `Confirm succeffsul about ${data.email}`,\n      response: response,\n    });\n  } catch (error) {\n    console.error(\"An error occured:\", error);\n    res.status(200).json({\n      statusCode: 400,\n      data: {\n        message: \"Verification code is not correct\",\n        error: error,\n      },\n    });\n  }\n});\n\nrouter.post(\"/forgot\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n    const { CLIENT_ID } = process.env;\n\n    const params = {\n      ClientId: CLIENT_ID, // replace with your App client id\n      Username: data.useremail, // replace with the username\n    };\n\n    const response = await cognito.forgotPassword(params).promise();\n    return res.status(200).json({ statusCode: 200, response });\n  } catch (error) {\n    console.log(\"An error occured:\", error);\n    res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/setpassword\", async (req, res) => {\n  try {\n    const data = req.body;\n    const timeStamp = new Date().getTime();\n    if (!data) {\n      return res.status(200).json({\n        statusCode: 400,\n        message: \"Bad Request\",\n      });\n    }\n\n    var verifyParams = {\n      UserPoolId: process.env.USER_POOL_ID, // replace with your User Pool ID\n      Username: data.email, // replace with the user's username\n      Password: data.password, // replace with the user's real password\n      Permanent: true,\n    };\n\n    const response = await cognito.adminSetUserPassword(verifyParams).promise();\n\n    const passwordStateParam = {\n      TableName: \"staff_list\",\n      Key: {\n        id: data.id,\n      },\n      ExpressionAttributeNames: {\n        \"#password_state\": \"password_state\",\n      },\n      ExpressionAttributeValues: {\n        \":password_state\": true,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression:\n        \"SET #password_state = :password_state, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    await dynamoDb.update(passwordStateParam).promise();\n\n    return res.status(200).json({ statusCode: 200, response });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/confirmforgot\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({\n        statusCode: 400,\n        message: \"Bad Request\",\n      });\n    }\n\n    const { CLIENT_ID } = process.env;\n\n    const params = {\n      ClientId: CLIENT_ID, // replace with your App client id\n      Username: data.username, // replace with the username\n      ConfirmationCode: data.confirmationCode, // replace with the confirmation code\n      Password: data.newPassword, // replace with the new password\n    };\n\n    const response = await cognito.confirmForgotPassword(params).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      response,\n      message: \"Password has been changed successfully.\",\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/changeEmail\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n\n    if (!data) {\n      return res.status(200).json({\n        statusCode: 400,\n        message: \"Bad Request\",\n      });\n    }\n\n    const { USER_POOL_ID } = process.env;\n\n    const params = {\n      UserPoolId: USER_POOL_ID,\n      Username: data.oldEmail,\n      UserAttributes: [\n        {\n          Name: \"email\",\n          Value: data.newEmail,\n        },\n        {\n          Name: \"email_verified\",\n          Value: \"false\",\n        },\n      ],\n    };\n\n    const response = await cognito.adminUpdateUserAttributes(params).promise();\n\n    const staffParams = {\n      TableName: \"staff_list\",\n      Key: {\n        id: data.id,\n      },\n      ExpressionAttributeNames: {\n        \"#email\": \"email\",\n      },\n      ExpressionAttributeValues: {\n        \":email\": data.newEmail,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression: \"SET #email = :email, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    await dynamoDb.update(staffParams).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Email has been successfully updated\",\n      data: response,\n    });\n  } catch (error) {\n    return res.status(200).json(error);\n  }\n});\n\nrouter.post(\"/resend\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const params = {\n      AccessToken: data.accessToken,\n      AttributeName: \"email\",\n    };\n\n    await cognito.getUserAttributeVerificationCode(params).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Verification code resent successfully.\",\n    });\n  } catch (error) {\n    console.log(error);\n    return res.status(200).json({\n      statusCode: 500,\n      body: {\n        message: \"Failed to resend verification code\",\n        error: error,\n      },\n    });\n  }\n});\n\nrouter.post(\"/emailverify\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(200).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const params = {\n      AccessToken: data.accessToken, // The user's access token\n      AttributeName: \"email\", // Attribute you are verifying\n      Code: data.confirmCode, // The verification code submitted by the user\n    };\n\n    await cognito.verifyUserAttribute(params).promise();\n    console.log(\"Email verified successfully\");\n\n    return res.status(200).json({\n      statusCode: 200,\n      body: {\n        message: \"Email verified successfully\",\n      },\n    });\n  } catch (error) {\n    console.log(error);\n    return res.status(200).json({\n      statusCode: 500,\n      error: error,\n      body: {\n        message: \"Email verification code is not correct.\",\n        error: error,\n      },\n    });\n  }\n});\n\nexport default router;\n","import AWS from \"aws-sdk\";\nimport { Router } from \"express\";\n\nconst dynamoDb = new AWS.DynamoDB.DocumentClient();\nconst DBController = new AWS.DynamoDB();\nconst cognito = new AWS.CognitoIdentityServiceProvider();\n\nconst router = Router();\n\nrouter.post(\"/delete_sites\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res\n        .status(400)\n        .json({ message: \"Bad Request. Server can't find the delete ID\" });\n    }\n\n    const scanParams = {\n      TableName: \"site_list\",\n      FilterExpression: \"#organization_id = :organization_id\",\n      ExpressionAttributeNames: {\n        \"#organization_id\": \"organization_id\",\n      },\n      ExpressionAttributeValues: {\n        \":organization_id\": data.id,\n      },\n    };\n\n    const scanResults = [];\n    let items;\n\n    do {\n      items = await dynamoDb.scan(scanParams).promise();\n      items.Items.forEach((item) => scanResults.push(item));\n      scanParams.ExclusiveStartKey = items.LastEvaluatedKey;\n    } while (typeof items.LastEvaluatedKey !== \"undefined\");\n\n    for (const site of scanResults) {\n      const deleteParams = {\n        TableName: \"site_list\",\n        Key: {\n          id: site.id,\n        },\n      };\n      await dynamoDb.delete(deleteParams).promise();\n    }\n\n    return res\n      .status(200)\n      .json({ message: \"All site data has been successfully deleted!\" });\n  } catch (error) {\n    console.log(\"Error occured in delete site\", error);\n    return res.status(500).json({ message: \"Server Error!\", error: error });\n  }\n});\n\nrouter.post(\"/delete_roles\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res\n        .status(400)\n        .json({ message: \"Bad Request. Server can't find the delete ID\" });\n    }\n\n    const scanParams = {\n      TableName: \"role_list\",\n      FilterExpression: \"#organization_id = :organization_id\",\n      ExpressionAttributeNames: {\n        \"#organization_id\": \"organization_id\",\n      },\n      ExpressionAttributeValues: {\n        \":organization_id\": data.id,\n      },\n    };\n\n    const scanResults = [];\n    let items;\n\n    do {\n      items = await dynamoDb.scan(scanParams).promise();\n      items.Items.forEach((item) => scanResults.push(item));\n      scanParams.ExclusiveStartKey = items.LastEvaluatedKey;\n    } while (typeof items.LastEvaluatedKey !== \"undefined\");\n\n    for (const role of scanResults) {\n      const deleteParams = {\n        TableName: \"role_list\",\n        Key: {\n          id: role.id,\n        },\n      };\n      await dynamoDb.delete(deleteParams).promise();\n    }\n\n    return res\n      .status(200)\n      .json({ message: \"All role data has been successfully deleted!\" });\n  } catch (error) {\n    console.log(\"Error occured in delete site\", error);\n    return res.status(500).json({ message: \"Server Error!\", error: error });\n  }\n});\n\nrouter.post(\"/delete_tracks\", async (req, res) => {\n  try {\n    const data = req.body;\n\n    if (!data) {\n      return res\n        .status(400)\n        .json({ message: \"Bad Request. Server can't find the delete ID\" });\n    }\n\n    const deleteTrackTableParams = {\n      TableName: \"record_\" + data.id,\n    };\n\n    await DBController.deleteTable(deleteTrackTableParams).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Track record data has been successfully deleted!\",\n    });\n  } catch (error) {\n    console.log(\"Error occured: \", error);\n    return res.status(200).json({ message: \"Server Error!\", error: error });\n  }\n});\n\nrouter.post(\"/delete_staffs\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res\n        .status(400)\n        .json({ message: \"Bad Request. Server can't find the delete ID\" });\n    }\n\n    const params = {\n      TableName: \"staff_list\",\n      FilterExpression: \"#organization_id = :organization_id\",\n      ExpressionAttributeNames: {\n        \"#organization_id\": \"organization_id\",\n      },\n      ExpressionAttributeValues: {\n        \":organization_id\": data.id, // Replace 'YourId' with the id you want to delete\n      },\n    };\n\n    const scanResults = [];\n    let items;\n\n    do {\n      items = await dynamoDb.scan(params).promise();\n      items.Items.forEach((item) => scanResults.push(item));\n      params.ExclusiveStartKey = items.LastEvaluatedKey;\n    } while (typeof items.LastEvaluatedKey !== \"undefined\");\n\n    for (const item of scanResults) {\n      const userParam = {\n        UserPoolId: process.env.USER_POOL_ID,\n        Username: item.email,\n      };\n\n      await cognito.adminDeleteUser(userParam).promise();\n\n      const deleteParams = {\n        TableName: \"staff_list\",\n        Key: {\n          id: item.id,\n        },\n      };\n      await dynamoDb.delete(deleteParams).promise();\n    }\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"All staffs data has been successfully deleted\",\n    });\n  } catch (error) {\n    console.log(\"Error Occured: \", error);\n    return res.status(500).json({ message: \"Server Error!\", error: error });\n  }\n});\n\nrouter.post(\"/delete_company\", async (req, res) => {\n  try {\n    const data = req.body;\n\n    if (!data) {\n      return res\n        .status(400)\n        .json({ message: \"Bad Request. Server can't find the delete ID\" });\n    }\n\n    const deleteCompanyParams = {\n      TableName: \"company_list\",\n      Key: {\n        id: data.id,\n      },\n    };\n\n    await dynamoDb.delete(deleteCompanyParams).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Company data has been successfully deleted!\",\n    });\n  } catch (error) {\n    console.log(\"Error Occured: \", error);\n    return res.status(500).json({ message: \"Server Error!\", error: error });\n  }\n});\n\nexport default router;\n","import { Router } from \"express\";\n\nimport company from \"./company\";\n\nconst router = Router();\n\nrouter.use(\"/company\", company);\n\nexport default router;\n","import { Router } from \"express\";\n\nconst router = Router();\n\nrouter.get(\"/\", async (req, res) => {\n  try {\n    res.status(200).json([]);\n  } catch (error) {\n    console.error(\"An error ocurred:\", error);\n    res.status(200).json(error);\n  }\n});\n\nrouter.get(\"/:id\", async (req, res) => {\n  try {\n    res.status(200).json({});\n  } catch (error) {\n    console.error(\"An error ocurred:\", error);\n    res.status(500).json(error);\n  }\n});\n\nrouter.post(\"/\", async (req, res) => {\n  try {\n    res.status(201).json({});\n  } catch (error) {\n    console.error(\"An error occurred:\", error);\n    res.status(500).json(error);\n  }\n});\n\nrouter.put(\"/:id\", async (req, res) => {\n  try {\n    res.status(200).json({});\n  } catch (error) {\n    console.error(\"An error occurred:\", error);\n    res.status(500).json(error);\n  }\n});\n\nrouter.delete(\"/:id\", async (req, res) => {\n  try {\n    res.status(200).json({});\n  } catch (error) {\n    console.error(\"An error occurred:\", error);\n    res.status(500).json(error);\n  }\n});\n\nexport default router;\n","import { Router } from \"express\";\n\nimport books from \"./books.route\";\nimport admins from \"./admin\";\nimport server from \"./server\";\n\nconst router = Router();\n\nrouter.use(\"/books\", books);\nrouter.use(\"/admin\", admins);\nrouter.use(\"/server\", server);\n\nexport default router;\n","import AWS from \"aws-sdk\";\nimport { Router } from \"express\";\nimport jwt from \"jsonwebtoken\";\nimport { GeneratePin } from \"../utils\";\n\nconst cognito = new AWS.CognitoIdentityServiceProvider();\nconst dynamoDb = new AWS.DynamoDB.DocumentClient();\n\nconst router = Router();\n\nrouter.post(\"/login\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(400).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n    const { USER_POOL_ID, CLIENT_ID } = process.env;\n    const params = {\n      AuthFlow: \"ADMIN_NO_SRP_AUTH\",\n      UserPoolId: USER_POOL_ID,\n      ClientId: CLIENT_ID,\n      AuthParameters: {\n        USERNAME: data.email,\n        PASSWORD: data.password,\n      },\n    };\n\n    const response = await cognito.adminInitiateAuth(params).promise();\n\n    const IdToken = response.AuthenticationResult.IdToken;\n    const AccessToken = response.AuthenticationResult.AccessToken;\n\n    const userInfo = jwt.decode(response.AuthenticationResult.IdToken);\n\n    if (userInfo[\"custom:level\"] == 3) {\n      return res\n        .status(404)\n        .json({ message: \"User has not permission to login server side.\" });\n    }\n\n    const userId = userInfo[\"custom:user_id\"];\n\n    const getUserParams = {\n      TableName: \"staff_list\",\n      Key: {\n        id: userId,\n      },\n    };\n\n    const userResult = await dynamoDb.get(getUserParams).promise();\n\n    const user = userResult.Item;\n\n    res.status(200).json({\n      statusCode: 200,\n      message: \"Login succeed\",\n      user: user,\n      token: IdToken,\n      accessToken: AccessToken,\n    });\n  } catch (error) {\n    console.error(\"An error ocurred:\", error);\n    res.status(500).json(error);\n  }\n});\n\nrouter.post(\"/signup\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n\n    if (!data) {\n      return res.status(400).json({ statusCode: 400, error: \"Bad Request\" });\n    }\n    const { CLIENT_ID } = process.env;\n\n    const userId = timeStamp.toString();\n\n    const params = {\n      ClientId: CLIENT_ID,\n      Password: data.password,\n      Username: data.email,\n      UserAttributes: [\n        {\n          Name: \"email\",\n          Value: data.email,\n        },\n        {\n          Name: \"custom:user_id\",\n          Value: userId,\n        },\n        {\n          Name: \"custom:role\",\n          Value: \"owner\",\n        },\n        {\n          Name: \"custom:level\",\n          Value: \"1\",\n        },\n        {\n          Name: \"custom:organization_id\",\n          Value: userId,\n        },\n      ],\n    };\n    await cognito.signUp(params).promise();\n\n    const pin = GeneratePin();\n\n    var staffItems = {\n      id: userId,\n      organization_id: userId,\n      email: data.email,\n      name: data.fname,\n      first_name: data.firstName,\n      last_name: data.lastName,\n      avatar: process.env.DEFAULT_AVATAR,\n      pin: pin,\n      role: \"owner\",\n      level: 1,\n      type: 1,\n      site_id: null,\n      track_id: null,\n      clocked_state: false,\n      state: true,\n      last_start_date: null,\n      createAt: timeStamp,\n      updateAt: timeStamp,\n    };\n\n    const staffParams = {\n      TableName: \"staff_list\",\n      Item: staffItems,\n    };\n\n    await dynamoDb.put(staffParams).promise();\n\n    res.status(200).json({\n      statusCode: 200,\n      message: \"User registration successful\",\n      response: staffItems,\n    });\n  } catch (error) {\n    console.error(\"An error ocurred:\", error);\n    res.status(500).json(error);\n  }\n});\n\nrouter.post(\"/verify-email\", async (req, res) => {\n  try {\n    const data = req.body;\n\n    if (!data) {\n      return res.status(400).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const { CLIENT_ID } = process.env;\n\n    const params = {\n      ClientId: CLIENT_ID,\n      Username: data.email,\n      ConfirmationCode: data.confirmCode,\n    };\n\n    const response = await cognito.confirmSignUp(params).promise();\n\n    res.status(200).json({\n      statusCode: 200,\n      message: `Confirm succeffsul about ${data.email}`,\n      response: response,\n    });\n  } catch (error) {\n    console.error(\"An error occurred:\", error);\n    res.status(500).json({\n      message: \"Verification code is not correct\",\n      error: error,\n    });\n  }\n});\n\nrouter.post(\"/getMe\", async (req, res) => {\n  try {\n    const data = req.body;\n\n    if (!data) {\n      return res.status(400).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const params = {\n      TableName: \"staff_list\",\n      Key: {\n        id: data.userId,\n      },\n    };\n\n    const user = await dynamoDb.get(params).promise();\n\n    const response = {\n      statusCode: 200,\n      body: {\n        user: user,\n      },\n    };\n\n    return res.status(200).json(response);\n  } catch (error) {\n    console.log(\"Error occurred: \", error);\n    return res.status(500).json(error);\n  }\n});\n\nexport default router;\n","import AWS from \"aws-sdk\";\nimport { Router } from \"express\";\n\nvar ddb = new AWS.DynamoDB({ apiVersion: \"2012-08-10\" });\nconst dynamoDb = new AWS.DynamoDB.DocumentClient();\nconst s3bucket = new AWS.S3();\n\nconst router = Router();\n\nrouter.post(\"/create\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(404).json({ statusCode: 404, message: \"Bad Request\" });\n    }\n\n    const record_table = \"record_\" + data.organizationId;\n\n    const Item = {\n      id: data.organizationId,\n      email: data.email,\n      state: \"free\",\n      name: data.name,\n      city: data.city,\n      country: data.country,\n      currency: data.currency,\n      address: data.address,\n      address_sec: data.address_sec,\n      postcode: data.postCode,\n      telephone: data.telePhone,\n      organization_id: data.organizationId,\n      timeZone: data.timeZone,\n      logo: process.env.DEFAULT_COMPANY_LOGO,\n      date_format: \"DD-MM-YYYY\",\n      record_table: record_table,\n      type: 1,\n      round: 5,\n      createAt: timeStamp,\n      updateAt: timeStamp,\n    };\n\n    const companyCreateParams = {\n      TableName: \"company_list\",\n      Item,\n    };\n\n    const response = await dynamoDb.put(companyCreateParams).promise();\n\n    const params = {\n      TableName: record_table,\n      KeySchema: [{ AttributeName: \"id\", KeyType: \"HASH\" }],\n      AttributeDefinitions: [{ AttributeName: \"id\", AttributeType: \"S\" }],\n      BillingMode: \"PAY_PER_REQUEST\",\n    };\n\n    await ddb.createTable(params).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"success create\",\n      data: response,\n    });\n  } catch (error) {\n    console.log(error);\n    return res.status(500).json(error);\n  }\n});\n\nexport default router;\n","import AWS from \"aws-sdk\";\nimport { Router } from \"express\";\n\nconst dynamoDb = new AWS.DynamoDB.DocumentClient();\n\nconst router = Router();\n\nrouter.post(\"/list\", async (req, res) => {\n  try {\n    const data = req.body;\n\n    if (!data) {\n      return res.status(400).json({ message: \"Bad Request.\" });\n    }\n\n    const getParams = {\n      TableName: \"role_list\",\n      FilterExpression: \"#organization_id = :organization_id\",\n      ExpressionAttributeNames: {\n        \"#organization_id\": \"organization_id\",\n      },\n      ExpressionAttributeValues: {\n        \":organization_id\": data.organization_id,\n      },\n    };\n\n    const result = await dynamoDb.scan(getParams).promise();\n\n    return res.status(200).json({ statusCode: 200, body: result.Items });\n  } catch (error) {\n    console.log(\"Error occurred: \", error);\n    return res.status(500).json(error);\n  }\n});\n\nrouter.post(\"/create\", async (req, res) => {\n  try {\n    const data = req.body;\n    const timeStamp = new Date().getTime();\n\n    if (!data) {\n      return res.status(400).json({ message: \"Bad Request\" });\n    }\n\n    let Item = {\n      id: timeStamp.toString(),\n      organization_id: data.organization_id,\n      role: data.department,\n      createAt: timeStamp,\n      updateAt: timeStamp,\n    };\n\n    const createParams = {\n      TableName: \"role_list\",\n      Item,\n    };\n\n    await dynamoDb.put(createParams).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"New department has been successfully created\",\n    });\n  } catch (error) {\n    console.log(\"Error occurred: \", error);\n    return res.status(500).json(error);\n  }\n});\n\nrouter.post(\"/update\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(400).json({ message: \"Bad Request\" });\n    }\n\n    const params = {\n      TableName: \"role_list\",\n      Key: {\n        id: data.id,\n      },\n      ExpressionAttributeNames: {\n        \"#role_text\": \"role\",\n      },\n      ExpressionAttributeValues: {\n        \":role\": data.department,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression: \"SET #role_text = :role, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    await dynamoDb.update(params).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Department has been successfully updated\",\n    });\n  } catch (error) {\n    return res.status(500).json(error);\n  }\n});\n\nrouter.post(\"/delete\", async (req, res) => {\n  try {\n    const data = req.body;\n\n    if (!data) {\n      return res.status(400).json({ message: \"Bad Request\" });\n    }\n\n    const deleteDepartmentParams = {\n      TableName: \"role_list\",\n      Key: {\n        id: data.id,\n      },\n    };\n\n    await dynamoDb.delete(deleteDepartmentParams).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Department data has been successfilly deleted.\",\n    });\n  } catch (error) {\n    console.log(\"Error occurred: \", error);\n    return res.status(500).json(error.message);\n  }\n});\n\nexport default router;\n","import { Router } from \"express\";\n\nimport auth from \"./auth\";\nimport staff from \"./staff\";\nimport report from \"./report\"\nimport company from \"./company\";\nimport service from \"./service\";\nimport department from \"./department\";\n\nconst router = Router();\n\nrouter.use(\"/auth\", auth);\nrouter.use(\"/staff\", staff);\nrouter.use(\"/report\", report)\nrouter.use(\"/company\", company);\nrouter.use(\"/service\", service);\nrouter.use(\"/department\", department);\n\nexport default router;\n","import AWS from \"aws-sdk\";\nimport { Router } from \"express\";\nimport moment from \"moment\";\n\nconst dynamoDb = new AWS.DynamoDB.DocumentClient();\n\nconst router = Router();\n\nrouter.post(\"/list\", async (req, res) => {\n  try {\n    const data = req.body;\n\n    if (!data) {\n      return res.status(400).json({ message: \"Bad Request\" });\n    }\n\n    const getReportParams = {\n      TableName: data.tableName,\n    };\n\n    const result = await dynamoDb.scan(getReportParams).promise();\n\n    return res.status(200).json({ statusCode: 200, body: result });\n  } catch (error) {\n    return res.status(500).json(error);\n  }\n});\n\nrouter.post(\"/add_track\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(400).json({ message: \"Bad Request!\" });\n    }\n\n    const track_id = timeStamp;\n\n    const promise = data.dateList.map(async (item, index) => {\n      const uid = timeStamp + index;\n\n      const dateParams = {\n        TableName: data.tableName,\n        Item: {\n          id: uid.toString(),\n          track_id: track_id,\n          staff_id: data.staff.id,\n          site_id: data.site.id,\n          date: moment(item.start_date).format(\"YYYY-MM-DD\"),\n          start_date: item.start_date,\n          end_date: item.end_date,\n          total_time: item.total_time,\n          name: data.staff.name,\n          status: item.status,\n          track_type: 1,\n          createdAt: timeStamp,\n          updateAt: timeStamp,\n        },\n      };\n      await dynamoDb.put(dateParams).promise();\n    });\n\n    await Promise.all(promise);\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: `Track data has been successfully created`,\n    });\n  } catch (error) {\n    console.log(error);\n    return res.status(500).json(error);\n  }\n});\n\nrouter.post(\"/delete\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(400).json({ message: \"Bad Request!\" });\n    }\n\n    const params = {\n      TableName: data.tableName,\n      FilterExpression: \"#track_id = :track_id\",\n      ExpressionAttributeNames: {\n        \"#track_id\": \"track_id\",\n      },\n      ExpressionAttributeValues: {\n        \":track_id\": data.track_id, // Replace 'YourId' with the id you want to delete\n      },\n    };\n\n    await queryAndDeleteDynamoDB(params);\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"The report data has been deleted.\",\n    });\n  } catch (error) {\n    return res.status(500).json(error);\n  }\n});\n\n// ---------------------------------------------------\n\nasync function queryAndDeleteDynamoDB(params) {\n  const data = await dynamoDb.scan(params).promise();\n  for (let item of data.Items) {\n    const deleteParams = {\n      TableName: params.TableName,\n      Key: {\n        id: item.id,\n      },\n    };\n    await dynamoDb.delete(deleteParams).promise();\n  }\n  if (data.LastEvaluatedKey) {\n    params.ExclusiveStartKey = data.LastEvaluatedKey;\n    return queryAndDeleteDynamoDB(params);\n  }\n}\n\nexport default router;\n","import AWS from \"aws-sdk\";\nimport { Router } from \"express\";\n\nconst dynamoDb = new AWS.DynamoDB.DocumentClient();\n\nconst router = Router();\n\nrouter.post(\"/list\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res.status(404).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const params = {\n      TableName: \"site_list\",\n      FilterExpression: \"#organization_id = :organization_id\",\n      ExpressionAttributeNames: {\n        \"#organization_id\": \"organization_id\",\n      },\n      ExpressionAttributeValues: {\n        \":organization_id\": data.organizationId,\n      },\n    };\n    const result = await dynamoDb.scan(params).promise();\n    const response = {\n      statusCode: 200,\n      body: result.Items,\n    };\n\n    return res.status(200).json(response);\n  } catch (error) {\n    console.log(\"Error occurred: \", error);\n    return res.status(500).json(error);\n  }\n});\n\nrouter.post(\"/create\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body\n\n    if(!data) {\n      return res.status(400).json({message: \"Bad Requrest!\"})\n    }\n\n    let Item = data\n    Item.id = timeStamp.toString()\n    Item.createAt = timeStamp;\n    Item.updateAt = timeStamp\n    Item.table_name = 'record_' + data.organization_id\n\n    const createServiceParams = {\n      TableName: \"site_list\",\n      Item\n    }\n\n    await dynamoDb.put(createServiceParams).promise()\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Service has been successfully created.\"\n    })\n  } catch(error) {\n    console.log(\"Error occurred: \", error)\n    return res.state(500).json(error.message)\n  }\n})\n\nrouter.post(\"/delete\", async (req, res) => {\n  try {\n    const data = req.body\n\n    if(!data) {\n      return res.status(400).json({message: \"Bad Request\"})\n    }\n    \n    const deleteServiceParams = {\n      TableName: \"site_list\",\n      Key: {\n        id: data.id\n      }\n    };\n\n    await dynamoDb.delete(deleteServiceParams).promise()\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Service data has been successfilly deleted.\"\n    })\n  } catch (error) {\n    console.log(\"Error occurred: \", error)\n    return res.status(500).json(error.message)\n  }\n})\n\nrouter.post('/getservice', async (req, res) => {\n  try {\n    const data = req.body\n    \n    if(!data) {\n      return res.status(400).json({message: \"Bad Request.\"})\n    }\n\n    const getParams = {\n      TableName: 'site_list',\n      Key: {\n        id: data.id\n      }\n    }\n\n    const service = await dynamoDb.get(getParams).promise()\n\n    return res.status(200).json({statusCode: 200, service: service})\n  } catch(error) {\n    console.log(\"Error occurred: \", error)\n    return res.status(500).json(error)\n  }\n})\n\nrouter.post(\"/update\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n\n    if (!data) {\n      return res.status(400).json({ statusCode: 400, message: \"Bad Request\" });\n    }\n\n    const params = {\n      TableName: \"site_list\",\n      Key: {\n        id: data.id,\n      },\n      ExpressionAttributeNames: {\n        \"#name_text\": \"name\",\n        \"#description_text\": \"description\",\n        \"#round\": \"round\",\n        \"#radius\": \"radius\",\n        \"#remote\": \"remote\",\n        \"#address\": \"address\",\n        \"#lat\": \"lat\",\n        \"#lng\": \"lng\",\n      },\n      ExpressionAttributeValues: {\n        \":name\": data.name,\n        \":description\": data.description,\n        \":round\": data.round,\n        \":radius\": data.radius,\n        \":remote\": data.remote,\n        \":address\": data.address,\n        \":lat\": data.lat,\n        \":lng\": data.lng,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression:\n        \"SET #name_text = :name, #description_text = :description, #round = :round, #radius = :radius, #remote = :remote, #address = :address, #lat = :lat, #lng = :lng, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    await dynamoDb.update(params).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Service data has been successfully updated\",\n    });\n  } catch (error) {\n    return res.status(500).json(error);\n  }\n});\n\nexport default router;\n","import AWS from \"aws-sdk\";\nimport { Router } from \"express\";\nimport { UploadImage } from \"../utils/upload-util\";\nimport { TemporaryPasswordGenerator } from \"../utils\";\n\nconst dynamoDb = new AWS.DynamoDB.DocumentClient();\nconst cognito = new AWS.CognitoIdentityServiceProvider();\n\nconst router = Router();\n\nrouter.post(\"/fetch_staff\", async (req, res) => {\n  try {\n    const data = req.body;\n    if (!data) {\n      return res\n        .status(400)\n        .json({ message: \"Bad Request. Server can't find the ID\" });\n    }\n\n    const fetchParams = {\n      TableName: \"staff_list\",\n      Key: {\n        id: data.id,\n      },\n    };\n\n    const user = await dynamoDb.get(fetchParams).promise();\n\n    return res.status(200).json({ data: user });\n  } catch (error) {\n    console.log(error);\n    return res.status(500).json({ message: \"Server error\" });\n  }\n});\n\nrouter.post(\"/update_persional\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n\n    const data = req.body;\n    if (!data) {\n      return res\n        .status(400)\n        .json({ message: \"Bad Request: server can't find the update params!\" });\n    }\n\n    const updateParams = {\n      TableName: \"staff_list\",\n      Key: {\n        id: data.id,\n      },\n      ExpressionAttributeNames: {\n        \"#full_name\": \"name\",\n        \"#name_f\": \"first_name\",\n        \"#name_m\": \"middle_name\",\n        \"#name_l\": \"last_name\",\n        \"#gender\": \"gender\",\n        \"#birth\": \"birth\",\n        \"#emergency_name\": \"emergency_name\",\n        \"#emergency_employee\": \"emergency_employee\",\n        \"#emergency_phone\": \"emergency_phone\",\n        \"#address\": \"address\",\n        \"#address_sec\": \"address_sec\",\n        \"#city\": \"city\",\n        \"#country\": \"country\",\n        \"#postcode\": \"postcode\",\n        \"#email\": \"email\",\n        \"#email_sec\": \"email_sec\",\n        \"#phone\": \"phone\",\n        \"#phone_sec\": \"phone_sec\",\n      },\n      ExpressionAttributeValues: {\n        \":full_name\": data.full_name,\n        \":name_f\": data.name_f,\n        \":name_m\": data.name_m,\n        \":name_l\": data.name_l,\n        \":gender\": data.gender,\n        \":birth\": data.birth,\n        \":emergency_name\": data.emergency_name,\n        \":emergency_employee\": data.emergency_employee,\n        \":emergency_phone\": data.emergency_phone,\n        \":address\": data.address,\n        \":address_sec\": data.address_sec,\n        \":city\": data.city,\n        \":country\": data.country,\n        \":postcode\": data.postcode,\n        \":email\": data.email,\n        \":email_sec\": data.email_sec,\n        \":phone\": data.phone,\n        \":phone_sec\": data.phone_sec,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression:\n        \"SET #full_name = :full_name, #name_f = :name_f, #name_m = :name_m, #name_l = :name_l, #gender = :gender, #birth = :birth, #emergency_name = :emergency_name, #emergency_employee = :emergency_employee, #emergency_phone = :emergency_phone, #address = :address, #address_sec = :address_sec, #city = :city, #country = :country, #postcode = :postcode, #email = :email, #email_sec = :email_sec, #phone = :phone, #phone_sec = :phone_sec, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    await dynamoDb.update(updateParams).promise();\n\n    return res.status(200).json({\n      message: \"Staff personal information has been successfully updated\",\n    });\n  } catch (error) {\n    console.log(error);\n    return res.status(500).json({ message: \"Server error\" });\n  }\n});\n\nrouter.post(\"/update_salary\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n\n    const data = req.body;\n    if (!data) {\n      return res\n        .status(400)\n        .json({ message: \"Bad Request: server can't find the update params!\" });\n    }\n\n    const updateParams = {\n      TableName: \"staff_list\",\n      Key: {\n        id: data.id,\n      },\n      ExpressionAttributeNames: {\n        \"#salary\": \"salary\",\n      },\n      ExpressionAttributeValues: {\n        \":salary\": data.salary,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression: \"SET #salary = :salary, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    await dynamoDb.update(updateParams).promise();\n\n    return res.status(200).json({\n      message: \"Staff persional information has been successfully updated\",\n    });\n  } catch (error) {\n    console.log(error);\n    return res.status(500).json({ message: \"Server error\" });\n  }\n});\n\nrouter.post(\"/list\", async (req, res) => {\n  try {\n    const data = req.body;\n\n    if (!data) {\n      return res.status(400).json({ message: \"Bad Request.\" });\n    }\n\n    const getParams = {\n      TableName: \"staff_list\",\n      FilterExpression: \"#organization_id = :organization_id\",\n      ExpressionAttributeNames: {\n        \"#organization_id\": \"organization_id\",\n      },\n      ExpressionAttributeValues: {\n        \":organization_id\": data.organization_id,\n      },\n    };\n\n    const result = await dynamoDb.scan(getParams).promise();\n\n    return res.status(200).json({ statusCode: 200, body: result.Items });\n  } catch (error) {\n    console.log(\"Error occurred: \", error);\n    return res.status(500).json(error);\n  }\n});\n\nrouter.post(\"/update_role\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n    if (!data) {\n      return res.status(400).json({ message: \"Bad Request\" });\n    }\n\n    const params = {\n      TableName: \"staff_list\",\n      Key: {\n        id: data.id,\n      },\n      ExpressionAttributeNames: {\n        \"#role_text\": \"role\",\n      },\n      ExpressionAttributeValues: {\n        \":role\": data.department,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression: \"SET #role_text = :role, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    await dynamoDb.update(params).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Update Successful\",\n    });\n  } catch (error) {\n    return res.status(500).json(error);\n  }\n});\n\nrouter.post(\"/create\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n    const data = req.body;\n\n    if (!data) {\n      return res.status(400).json({ message: \"Bad Request\" });\n    }\n\n    const tempPassword = TemporaryPasswordGenerator();\n\n    const params = {\n      UserPoolId: process.env.USER_POOL_ID, // replace with your User Pool ID\n      Username: data.email, // replace with the username\n      TemporaryPassword: tempPassword, // replace with a temporary password\n      UserAttributes: [\n        {\n          Name: \"email\",\n          Value: data.email, // replace with the user's email\n        },\n        {\n          Name: \"email_verified\",\n          Value: \"true\",\n        },\n        {\n          Name: \"custom:role\",\n          Value: \"member\",\n        },\n        {\n          Name: \"custom:user_id\",\n          Value: timeStamp.toString(),\n        },\n        {\n          Name: \"custom:level\",\n          Value: \"3\",\n        },\n        {\n          Name: \"custom:organization_id\",\n          Value: data.organization_id,\n        },\n      ],\n      MessageAction: \"SUPPRESS\", // suppresses the welcome message\n    };\n    await cognito.adminCreateUser(params).promise();\n\n    const avatarUrl = await UploadImage(\n      data.avatar.base64,\n      data.organization_id,\n      timeStamp\n    );\n\n    let Item = data;\n    Item.level = 3;\n    Item.state = true;\n    Item.avatar = avatarUrl;\n    Item.break_state = false;\n    Item.updateAt = timeStamp;\n    Item.createAt = timeStamp;\n    Item.clocked_state = false;\n    Item.last_start_date = null;\n    Item.password_state = false;\n    Item.id = timeStamp.toString();\n\n    const createStaffParams = {\n      TableName: \"staff_list\",\n      Item,\n    };\n\n    await dynamoDb.put(createStaffParams).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Staff has been successfully created.\",\n    });\n  } catch (error) {\n    console.log(\"Error occurred: \", error);\n    return res.status(500).json(error.message);\n  }\n});\n\nrouter.post(\"/delete\", async (req, res) => {\n  try {\n    const data = req.body;\n\n    if (!data) {\n      return res.status(400).json({ message: \"Bad Request\" });\n    }\n\n    if (data.state) {\n      const params = {\n        UserPoolId: process.env.USER_POOL_ID,\n        Username: data.email,\n      };\n\n      await cognito.adminDeleteUser(params).promise();\n    }\n\n    const deleteStaffParams = {\n      TableName: \"staff_list\",\n      Key: {\n        id: data.id,\n      },\n    };\n\n    await dynamoDb.delete(deleteStaffParams).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Staff data has been successfilly deleted.\",\n    });\n  } catch (error) {\n    console.log(\"Error occurred: \", error);\n    return res.status(500).json(error.message);\n  }\n});\n\nrouter.post(\"/getstaff\", async (req, res) => {\n  try {\n    const data = req.body;\n\n    if (!data) {\n      return res.status(400).json({ message: \"Bad Request.\" });\n    }\n\n    const getParams = {\n      TableName: \"staff_list\",\n      Key: {\n        id: data.id,\n      },\n    };\n\n    const staff = await dynamoDb.get(getParams).promise();\n\n    return res.status(200).json({ statusCode: 200, staff: staff });\n  } catch (error) {\n    console.log(\"Error occurred: \", error);\n    return res.status(500).json(error);\n  }\n});\n\nrouter.post(\"/update\", async (req, res) => {\n  try {\n    const timeStamp = new Date().getTime();\n\n    const data = req.body;\n    if (!data) {\n      return res\n        .status(400)\n        .json({ message: \"Bad Request: server can't find the update params!\" });\n    }\n\n    let avatarUrl = data.avatar.avatarUrl;\n\n    if (data.avatar.base64) {\n      avatarUrl = await UploadImage(\n        data.avatar.base64,\n        data.organization_id,\n        timeStamp\n      );\n    }\n\n    const updateParams = {\n      TableName: \"staff_list\",\n      Key: {\n        id: data.id,\n      },\n      ExpressionAttributeNames: {\n        \"#address\": \"address\",\n        \"#avatar\": \"avatar\",\n        \"#birth\": \"birth\",\n        \"#city\": \"city\",\n        \"#country\": \"country\",\n        \"#email\": \"email\",\n        \"#emergency_employee\": \"emergency_employee\",\n        \"#emergency_name\": \"emergency_name\",\n        \"#emergency_phone\": \"emergency_phone\",\n        \"#first_name\": \"first_name\",\n        \"#gender\": \"gender\",\n        \"#last_name\": \"last_name\",\n        \"#name\": \"name\",\n        \"#phone\": \"phone\",\n        \"#pin\": \"pin\",\n        \"#postcode\": \"postcode\",\n        \"#role\": \"role\",\n        \"#salary\": \"salary\",\n        \"#type\": \"type\",\n      },\n      ExpressionAttributeValues: {\n        \":address\": data.address,\n        \":avatar\": avatarUrl,\n        \":birth\": data.birth,\n        \":city\": data.city,\n        \":country\": data.country,\n        \":email\": data.email,\n        \":emergency_employee\": data.emergency_employee,\n        \":emergency_name\": data.emergency_name,\n        \":emergency_phone\": data.emergency_phone,\n        \":first_name\": data.first_name,\n        \":gender\": data.gender,\n        \":last_name\": data.last_name,\n        \":name\": data.name,\n        \":phone\": data.phone,\n        \":pin\": data.pin,\n        \":postcode\": data.postcode,\n        \":role\": data.role,\n        \":salary\": data.salary,\n        \":type\": data.type,\n        \":updateAt\": timeStamp,\n      },\n      UpdateExpression:\n        \"SET #address = :address, #avatar = :avatar, #birth = :birth, #city = :city, #country = :country, #email = :email, #emergency_employee = :emergency_employee, #emergency_name = :emergency_name, #emergency_phone = :emergency_phone, #first_name = :first_name, #gender = :gender, #last_name = :last_name, #name = :name, #phone = :phone, #pin = :pin, #postcode = :postcode, #role = :role, #salary = :salary, #type = :type, updateAt = :updateAt\",\n      ReturnValues: \"ALL_NEW\",\n    };\n\n    await dynamoDb.update(updateParams).promise();\n\n    return res.status(200).json({\n      statusCode: 200,\n      message: \"Staff has been successfully updated.\",\n    });\n  } catch (error) {\n    console.log(error);\n    return res.status(500).json({ message: \"Server error\" });\n  }\n});\n\nexport default router;\n","export function GeneratePin() {\n  return Math.floor(1000 + Math.random() * 9000);\n}\n\nexport function TemporaryPasswordGenerator() {\n  var result = \"\";\n  var characters =\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n  var charactersLength = characters.length;\n  for (var i = 0; i < 10; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n\n  return result;\n}\n","import AWS from \"aws-sdk\";\nconst s3bucket = new AWS.S3();\n\nexport async function UploadImage(data, organization_id, timeStamp) {\n  var buf = Buffer.from(data.replace(/^data:image\\/\\w+;base64,/, \"\"), \"base64\");\n\n  const type = data.split(\";\")[0].split(\"/\")[1];\n\n  const params = {\n    Bucket: process.env.S3_BUCKET_NAME,\n    Key: `Home/Avatars/${organization_id}/avatar${timeStamp}.${type}`,\n    Body: buf,\n    ACL: \"public-read\",\n    ContentEncoding: \"base64\",\n    ContentType: `image/${type}`,\n  };\n\n  try {\n    const uploadData = await s3bucket.upload(params).promise();\n\n    return uploadData.Location;\n  } catch (error) {\n    console.log(error);\n    return error;\n  }\n}\n","module.exports = require(\"aws-sdk\");","module.exports = require(\"body-parser\");","module.exports = require(\"cors\");","module.exports = require(\"express\");","module.exports = require(\"fs\");","module.exports = require(\"jsonwebtoken\");","module.exports = require(\"moment\");","module.exports = require(\"multer\");","module.exports = require(\"serverless-http\");","module.exports = require(\"stripe\");","module.exports = require(\"uuid\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import express from \"express\";\nimport serverless from \"serverless-http\";\nimport cors from \"cors\";\nimport bodyParser from \"body-parser\";\n\nimport routes from \"./routes\";\n\nconst app = express();\n\napp.use(cors());\n\napp.use(bodyParser.json({ limit: \"10mb\" }));\napp.use(bodyParser.urlencoded({ limit: \"10mb\", extended: true }));\n\napp.use(express.json());\n\napp.use(\"/api\", routes);\n\napp.use((req, res, next) => {\n  res.status(404).send();\n});\n\napp.use((err, req, res, next) => {\n  res.status(err.status || 500).send();\n});\n\nexport const handler = serverless(app);\n"],"names":["AWS","Router","uuid","require","cognito","CognitoIdentityServiceProvider","dynamoDb","DynamoDB","DocumentClient","s3bucket","S3","ddb","apiVersion","router","post","req","res","data","body","status","json","statusCode","message","password","email","name","signUpParams","ClientId","process","env","ADMIN_CLIENT_ID","Username","Password","UserAttributes","Name","Value","signUpResponse","signUp","promise","user","UserSub","err","console","log","signInParams","AuthFlow","AuthParameters","USERNAME","PASSWORD","signInResponse","initiateAuth","accessToken","AuthenticationResult","AccessToken","idToken","IdToken","verificationCode","confirmSignUpParams","ConfirmationCode","confirmSignUp","get","headers","authorization","split","getUserParams","getUser","error","fetchUserParams","TableName","staffData","scan","fetchSiteParams","siteData","fetchCompanyParams","companyData","companyParams","orgParams","orgData","orgParam","Key","id","orgId","delete","companyParam","companyId","params","FilterExpression","ExpressionAttributeNames","ExpressionAttributeValues","scanResults","items","Items","forEach","item","push","ExclusiveStartKey","LastEvaluatedKey","table_name","deleteTable","deleteParams","userParam","UserPoolId","USER_POOL_ID","adminDeleteUser","urlParts","URL","docFile","pathname","key","slice","join","replaceAll","Bucket","S3_BUCKET_NAME","deleteObject","admin","use","moment","roundToNearestFiveMinutes","date","round","ms","roundedDate","Date","Math","getTime","site","Item","organization_id","company","response","result","timeStamp","update_state","siteParams","UpdateExpression","ReturnValues","update","uid","toString","dateParams","tableName","track_id","staff_id","staff","format","workPosition","start_date","end_date","total_time","createdAt","updateAt","put","stsatusCode","Attributes","differenceInMs","last_start_date","updateParams","record_id","addParams","updateUserParam","checkParams","checkResult","clocked_state","site_id","siteId","break_state","avatar","DEFAULT_AVATAR","type","level","state","createAt","client","organizationId","city","country","address","address_sec","postcode","postCode","telephone","telePhone","country_state","timeZone","logo","DEFAULT_COMPANY_LOGO","date_format","companyCreateParams","record_table","currency","location","buf","Buffer","from","replace","Body","ACL","ContentEncoding","ContentType","uploadData","upload","Location","rdname","dateFormat","base64","organizationParams","imageParam","break","form","checkParam","org_id","totalNumber","length","limitNumber","paymentInfo","quantity","ses","SES","messages","ticketData","emailParams","Destination","ToAddresses","Message","Html","Charset","Data","content","Subject","Source","sendEmail","updatedAt","createParams","fetchParmas","joinListData","contact","fs","multer","storage","memoryStorage","form_name","form_id","allocate_id","sender","sender_type","form_result","custom","KeySchema","AttributeName","KeyType","AttributeDefinitions","AttributeType","BillingMode","createTable","db","file","base64Data","decodedFile","docName","docType","docDate","expireDate","assignType","assignValue","documentParams","resultDocList","filter","role","includes","userId","sietId","document","submit_label","form_elements","color","updateParam","delete_param","allocateParam","allocated_site","allocated_staff","single","base","originalname","mimetype","photo","fetchParam","v1","setting","report","remote","profile","payment","migration","logs","siteResult","migrationPromise","map","siteIndex","fetchOldDataParams","oldDatas","index","migrationDataParams","newTableName","Promise","all","stripe","STRIPE_S_ID","paymentMethodId","number","customer","customers","create","payment_method","invoice_settings","default_payment_method","subscription","subscriptions","plan","STRIPE_PRICE_ID","expand","subscriptionId","customerId","updatePlanParams","sig","event","webhooks","constructEvent","STRIPE_WEBHOOK_SECRET","send","subscriptionCreated","object","subscriptionUpdated","subscriptionDeleted","received","gender","birth","old_email","adminUpdateUserAttributes","s3params","utils","responseData","staffParams","pin","staffHistoryList","queryAndDeleteDynamoDB","dateList","track_type","origin_date","update_info","getObject","roleName","site_report","staff_report","showDay","description","radius","lat","lng","siteClockInTime","floor","random","characters","charactersLength","i","charAt","companyInfo","TemporaryPassword","MessageAction","adminCreateUser","inviteLink","permissionParam","permission","staff_role","cognitoParams","block_state","resu","clockInTime","clockOutTime","CLIENT_ID","staffItems","fname","first_name","firstName","last_name","lastName","adminInitiateAuth","token","confirmCode","useremail","forgotPassword","verifyParams","Permanent","adminSetUserPassword","passwordStateParam","username","confirmationCode","newPassword","confirmForgotPassword","oldEmail","newEmail","getUserAttributeVerificationCode","Code","verifyUserAttribute","DBController","scanParams","deleteTrackTableParams","deleteCompanyParams","books","admins","server","jwt","GeneratePin","userInfo","decode","userResult","getParams","department","deleteDepartmentParams","auth","service","getReportParams","createServiceParams","deleteServiceParams","UploadImage","TemporaryPasswordGenerator","fetchParams","full_name","name_f","name_m","name_l","emergency_name","emergency_employee","emergency_phone","email_sec","phone","phone_sec","salary","tempPassword","avatarUrl","password_state","createStaffParams","deleteStaffParams","express","serverless","cors","bodyParser","routes","app","limit","urlencoded","extended","next","handler"],"sourceRoot":""}